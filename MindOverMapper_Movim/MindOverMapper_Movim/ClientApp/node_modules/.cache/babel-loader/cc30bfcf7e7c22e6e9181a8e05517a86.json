{"ast":null,"code":"import { createElement } from 'react';\nimport { BaseWidget, OpType } from '@blink-mind/renderer-react';\nimport styled from 'styled-components';\nimport RichMarkDownEditor from 'awehook-rich-markdown-editor';\nimport debug from 'debug';\nimport { BlockType } from '@blink-mind/core';\nimport MarkdownSerializer from 'slate-md-serializer';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) {\n    Object.defineProperty(cooked, \"raw\", {\n      value: raw\n    });\n  } else {\n    cooked.raw = raw;\n  }\n\n  return cooked;\n}\n\nvar log = debug('node:topic-content-editor');\nvar NodeContent = styled.div(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n  padding: 6px;\\n  background-color: \", \";\\n  cursor: \", \";\\n\"], [\"\\n  padding: 6px;\\n  background-color: \", \";\\n  cursor: \", \";\\n\"])), function (props) {\n  return props.readOnly ? null : 'white';\n}, function (props) {\n  return props.readOnly ? 'pointer' : 'text';\n});\n\nvar RichTextEditor =\n/** @class */\nfunction (_super) {\n  __extends(RichTextEditor, _super);\n\n  function RichTextEditor() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.onMouseDown = function (e) {\n      e.stopPropagation();\n    };\n\n    _this.onMouseMove = function (e) {\n      e.stopPropagation();\n    };\n\n    _this.onChange = function (value) {};\n\n    _this.getCustomizeProps = function () {\n      return null;\n    };\n\n    return _this;\n  }\n\n  RichTextEditor.prototype.render = function () {\n    var _a = this.props,\n        topicKey = _a.topicKey,\n        saveRef = _a.saveRef;\n\n    var _b = this.getCustomizeProps(),\n        block = _b.block,\n        readOnly = _b.readOnly,\n        refKeyPrefix = _b.refKeyPrefix;\n\n    var content = block.data;\n    if (content == null) return null;\n    var key = refKeyPrefix + \"-\" + topicKey;\n    return createElement(NodeContent, {\n      key: key,\n      readOnly: readOnly,\n      ref: saveRef(key),\n      onMouseDown: this.onMouseDown,\n      onMouseMove: this.onMouseMove\n    }, createElement(RichMarkDownEditor, {\n      editorValue: content,\n      readOnly: readOnly,\n      onChange: this.onChange\n    }));\n  };\n\n  return RichTextEditor;\n}(BaseWidget);\n\nvar templateObject_1;\n\nvar TopicContentEditor =\n/** @class */\nfunction (_super) {\n  __extends(TopicContentEditor, _super);\n\n  function TopicContentEditor() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.getCustomizeProps = function () {\n      var _a = _this.props,\n          model = _a.model,\n          topicKey = _a.topicKey;\n      var block = model.getTopic(topicKey).getBlock(BlockType.CONTENT).block;\n      var readOnly = model.editingContentKey !== topicKey;\n      var refKeyPrefix = 'content-editor';\n      return {\n        block: block,\n        readOnly: readOnly,\n        refKeyPrefix: refKeyPrefix\n      };\n    };\n\n    _this.onChange = function (value) {\n      _this.operation(OpType.SET_TOPIC_CONTENT, __assign(__assign({}, _this.props), {\n        content: value\n      }));\n    };\n\n    return _this;\n  }\n\n  return TopicContentEditor;\n}(RichTextEditor);\n\nvar TopicDescEditor =\n/** @class */\nfunction (_super) {\n  __extends(TopicDescEditor, _super);\n\n  function TopicDescEditor() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.getCustomizeProps = function () {\n      var _a = _this.props,\n          model = _a.model,\n          topicKey = _a.topicKey;\n      var block = model.getTopic(topicKey).getBlock(BlockType.DESC).block;\n      var readOnly = model.editingDescKey !== topicKey;\n      var refKeyPrefix = 'desc-editor';\n      return {\n        block: block,\n        readOnly: readOnly,\n        refKeyPrefix: refKeyPrefix\n      };\n    };\n\n    _this.onChange = function (value) {\n      _this.operation(OpType.SET_TOPIC_DESC, __assign(__assign({}, _this.props), {\n        desc: value\n      }));\n    };\n\n    return _this;\n  }\n\n  return TopicDescEditor;\n}(RichTextEditor);\n\nvar markdownSerializer = new MarkdownSerializer();\n\nfunction RichTextEditorPlugin() {\n  return {\n    renderTopicContentEditor: function (props) {\n      return createElement(TopicContentEditor, __assign({}, props));\n    },\n    renderTopicDescEditor: function (props) {\n      return createElement(TopicDescEditor, __assign({}, props));\n    },\n    serializeBlock: function (props, next) {\n      var block = props.block;\n\n      if (block.type === BlockType.CONTENT || block.type === BlockType.DESC) {\n        var res = {\n          type: block.type,\n          data: typeof block.data === 'string' ? block.data : markdownSerializer.serialize(block.data)\n        };\n        return res;\n      }\n\n      return next();\n    },\n    deserializeBlock: function (props, next) {\n      return next();\n    }\n  };\n}\n\nexport default RichTextEditorPlugin;","map":null,"metadata":{},"sourceType":"module"}