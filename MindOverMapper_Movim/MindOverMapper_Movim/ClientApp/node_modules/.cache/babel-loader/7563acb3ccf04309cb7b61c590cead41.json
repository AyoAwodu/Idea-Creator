{"ast":null,"code":"/*\r\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nimport * as tslib_1 from \"tslib\";\nexport var DISPLAYNAME_PREFIX = \"Blueprint3\";\n/** A collection of curated prop keys used across our Components which are not valid HTMLElement props. */\n\nvar INVALID_PROPS = [\"active\", \"alignText\", \"containerRef\", \"elementRef\", \"fill\", \"icon\", \"inputRef\", \"intent\", \"inline\", \"large\", \"loading\", \"leftIcon\", \"minimal\", \"onChildrenMount\", \"onRemove\", \"panel\", \"panelClassName\", \"popoverProps\", \"rightElement\", \"rightIcon\", \"round\", \"small\", \"text\"];\n/**\r\n * Typically applied to HTMLElements to filter out blacklisted props. When applied to a Component,\r\n * can filter props from being passed down to the children. Can also filter by a combined list of\r\n * supplied prop keys and the blacklist (only appropriate for HTMLElements).\r\n * @param props The original props object to filter down.\r\n * @param {string[]} invalidProps If supplied, overwrites the default blacklist.\r\n * @param {boolean} shouldMerge If true, will merge supplied invalidProps and blacklist together.\r\n */\n\nexport function removeNonHTMLProps(props, invalidProps, shouldMerge) {\n  if (invalidProps === void 0) {\n    invalidProps = INVALID_PROPS;\n  }\n\n  if (shouldMerge === void 0) {\n    shouldMerge = false;\n  }\n\n  if (shouldMerge) {\n    invalidProps = invalidProps.concat(INVALID_PROPS);\n  }\n\n  return invalidProps.reduce(function (prev, curr) {\n    if (prev.hasOwnProperty(curr)) {\n      delete prev[curr];\n    }\n\n    return prev;\n  }, tslib_1.__assign({}, props));\n}","map":null,"metadata":{},"sourceType":"module"}