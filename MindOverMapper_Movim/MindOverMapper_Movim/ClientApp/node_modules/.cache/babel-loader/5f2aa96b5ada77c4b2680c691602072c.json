{"ast":null,"code":"import isPlainObject from 'is-plain-object';\nimport { Map, List, Record, Set, OrderedSet, is, Stack } from 'immutable';\nimport warning from 'tiny-warning';\nimport invariant from 'tiny-invariant';\nimport Debug from 'debug';\nimport { reverse } from 'esrever';\nimport pick from 'lodash/pick';\nimport omit from 'lodash/omit';\nimport direction from 'direction';\n/**\n * An auto-incrementing index for generating keys.\n *\n * @type {Number}\n */\n\nvar n = void 0;\n/**\n * The global key generating function.\n *\n * @type {Function}\n */\n\nvar generate = void 0;\n/**\n * Create a key, using a provided key if available.\n *\n * @param {String|Void} key\n * @return {String}\n */\n\nfunction create(key) {\n  if (key == null) {\n    return generate();\n  }\n\n  if (typeof key === 'string') {\n    return key;\n  }\n\n  throw new Error('Keys must be strings, but you passed: ' + key);\n}\n/**\n * Set a different unique ID generating `function`.\n *\n * @param {Function} func\n */\n\n\nfunction setGenerator(func) {\n  generate = func;\n}\n/**\n * Reset the key generating function to its initial state.\n */\n\n\nfunction resetGenerator() {\n  n = 0;\n\n  generate = function generate() {\n    return '' + n++;\n  };\n}\n/**\n * Set the initial state.\n */\n\n\nresetGenerator();\n/**\n * Export.\n *\n * @type {Object}\n */\n\nvar KeyUtils = {\n  create: create,\n  setGenerator: setGenerator,\n  resetGenerator: resetGenerator\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar classCallCheck = function (instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n};\n\nvar createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar defineProperty = function (obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n};\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar inherits = function (subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n};\n\nvar objectWithoutProperties = function (obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};\n\nvar possibleConstructorReturn = function (self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n};\n\nvar slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar toConsumableArray = function (arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n};\n\nvar Data = function () {\n  function Data() {\n    classCallCheck(this, Data);\n  }\n\n  createClass(Data, null, [{\n    key: 'create',\n\n    /**\n     * Create a new `Data` with `attrs`.\n     *\n     * @param {Object|Data|Map} attrs\n     * @return {Data} data\n     */\n    value: function create() {\n      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (Map.isMap(attrs)) {\n        return attrs;\n      }\n\n      if (isPlainObject(attrs)) {\n        return Data.fromJSON(attrs);\n      }\n\n      throw new Error('`Data.create` only accepts objects or maps, but you passed it: ' + attrs);\n    }\n    /**\n     * Create a `Data` from a JSON `object`.\n     *\n     * @param {Object} object\n     * @return {Data}\n     */\n\n  }, {\n    key: 'fromJSON',\n    value: function fromJSON(object) {\n      return new Map(object);\n    }\n    /**\n     * Alias `fromJS`.\n     */\n\n  }]);\n  return Data;\n}();\n/**\n * Export.\n *\n * @type {Object}\n */\n\n\nData.fromJS = Data.fromJSON;\nvar DEFAULTS = {\n  data: undefined,\n  key: undefined,\n  nodes: undefined\n  /**\n   * Document.\n   *\n   * @type {Document}\n   */\n\n};\n\nvar Document = function (_Record) {\n  inherits(Document, _Record);\n\n  function Document() {\n    classCallCheck(this, Document);\n    return possibleConstructorReturn(this, (Document.__proto__ || Object.getPrototypeOf(Document)).apply(this, arguments));\n  }\n\n  createClass(Document, [{\n    key: 'toJSON',\n\n    /**\n     * Return a JSON representation of the document.\n     *\n     * @param {Object} options\n     * @return {Object}\n     */\n    value: function toJSON() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var object = {\n        object: this.object,\n        data: this.data.toJSON(),\n        nodes: this.nodes.toArray().map(function (n) {\n          return n.toJSON(options);\n        })\n      };\n\n      if (options.preserveKeys) {\n        object.key = this.key;\n      }\n\n      return object;\n    }\n  }], [{\n    key: 'create',\n\n    /**\n     * Create a new `Document` with `attrs`.\n     *\n     * @param {Object|Array|List|Text} attrs\n     * @return {Document}\n     */\n    value: function create() {\n      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (Document.isDocument(attrs)) {\n        return attrs;\n      }\n\n      if (List.isList(attrs) || Array.isArray(attrs)) {\n        attrs = {\n          nodes: attrs\n        };\n      }\n\n      if (isPlainObject(attrs)) {\n        return Document.fromJSON(attrs);\n      }\n\n      throw new Error('`Document.create` only accepts objects, arrays, lists or documents, but you passed it: ' + attrs);\n    }\n    /**\n     * Create a `Document` from a JSON `object`.\n     *\n     * @param {Object|Document} object\n     * @return {Document}\n     */\n\n  }, {\n    key: 'fromJSON',\n    value: function fromJSON(object) {\n      if (Document.isDocument(object)) {\n        return object;\n      }\n\n      var _object$data = object.data,\n          data = _object$data === undefined ? {} : _object$data,\n          _object$key = object.key,\n          key = _object$key === undefined ? KeyUtils.create() : _object$key,\n          _object$nodes = object.nodes,\n          nodes = _object$nodes === undefined ? [] : _object$nodes;\n      var document = new Document({\n        key: key,\n        data: new Map(data),\n        nodes: Node.createList(nodes)\n      });\n      return document;\n    }\n  }]);\n  return Document;\n}(Record(DEFAULTS));\n/**\n * Export.\n *\n * @type {Document}\n */\n\n\nvar DEFAULTS$1 = {\n  data: undefined,\n  key: undefined,\n  nodes: undefined,\n  type: undefined\n  /**\n   * Inline.\n   *\n   * @type {Inline}\n   */\n\n};\n\nvar Inline = function (_Record) {\n  inherits(Inline, _Record);\n\n  function Inline() {\n    classCallCheck(this, Inline);\n    return possibleConstructorReturn(this, (Inline.__proto__ || Object.getPrototypeOf(Inline)).apply(this, arguments));\n  }\n\n  createClass(Inline, [{\n    key: 'toJSON',\n\n    /**\n     * Return a JSON representation of the inline.\n     *\n     * @param {Object} options\n     * @return {Object}\n     */\n    value: function toJSON() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var object = {\n        object: this.object,\n        type: this.type,\n        data: this.data.toJSON(),\n        nodes: this.nodes.toArray().map(function (n) {\n          return n.toJSON(options);\n        })\n      };\n\n      if (options.preserveKeys) {\n        object.key = this.key;\n      }\n\n      return object;\n    }\n  }], [{\n    key: 'create',\n\n    /**\n     * Create a new `Inline` with `attrs`.\n     *\n     * @param {Object|String|Inline} attrs\n     * @return {Inline}\n     */\n    value: function create() {\n      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (Inline.isInline(attrs)) {\n        return attrs;\n      }\n\n      if (typeof attrs === 'string') {\n        attrs = {\n          type: attrs\n        };\n      }\n\n      if (isPlainObject(attrs)) {\n        return Inline.fromJSON(attrs);\n      }\n\n      throw new Error('`Inline.create` only accepts objects, strings or inlines, but you passed it: ' + attrs);\n    }\n    /**\n     * Create a list of `Inlines` from an array.\n     *\n     * @param {Array<Inline|Object>|List<Inline|Object>} elements\n     * @return {List<Inline>}\n     */\n\n  }, {\n    key: 'createList',\n    value: function createList() {\n      var elements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (List.isList(elements) || Array.isArray(elements)) {\n        var list = new List(elements.map(Inline.create));\n        return list;\n      }\n\n      throw new Error('`Inline.createList` only accepts arrays or lists, but you passed it: ' + elements);\n    }\n    /**\n     * Create a `Inline` from a JSON `object`.\n     *\n     * @param {Object|Inline} object\n     * @return {Inline}\n     */\n\n  }, {\n    key: 'fromJSON',\n    value: function fromJSON(object) {\n      if (Inline.isInline(object)) {\n        return object;\n      }\n\n      var _object$data = object.data,\n          data = _object$data === undefined ? {} : _object$data,\n          _object$key = object.key,\n          key = _object$key === undefined ? KeyUtils.create() : _object$key,\n          _object$nodes = object.nodes,\n          nodes = _object$nodes === undefined ? [] : _object$nodes,\n          type = object.type;\n\n      if (typeof type !== 'string') {\n        throw new Error('`Inline.fromJS` requires a `type` string.');\n      }\n\n      var inline = new Inline({\n        key: key,\n        type: type,\n        data: new Map(data),\n        nodes: Node.createList(nodes)\n      });\n      return inline;\n    }\n    /**\n     * Check if `any` is a list of inlines.\n     *\n     * @param {Any} any\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'isInlineList',\n    value: function isInlineList(any) {\n      return List.isList(any) && any.every(function (item) {\n        return Inline.isInline(item);\n      });\n    }\n  }]);\n  return Inline;\n}(Record(DEFAULTS$1));\n/**\n * Export.\n *\n * @type {Inline}\n */\n\n\nvar DEFAULTS$2 = {\n  data: undefined,\n  type: undefined\n  /**\n   * Mark.\n   *\n   * @type {Mark}\n   */\n\n};\n\nvar Mark = function (_Record) {\n  inherits(Mark, _Record);\n\n  function Mark() {\n    classCallCheck(this, Mark);\n    return possibleConstructorReturn(this, (Mark.__proto__ || Object.getPrototypeOf(Mark)).apply(this, arguments));\n  }\n\n  createClass(Mark, [{\n    key: 'toJSON',\n\n    /**\n     * Return a JSON representation of the mark.\n     *\n     * @return {Object}\n     */\n    value: function toJSON() {\n      var object = {\n        object: this.object,\n        type: this.type,\n        data: this.data.toJSON()\n      };\n      return object;\n    }\n  }], [{\n    key: 'create',\n\n    /**\n     * Create a new `Mark` with `attrs`.\n     *\n     * @param {Object|Mark} attrs\n     * @return {Mark}\n     */\n    value: function create() {\n      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (Mark.isMark(attrs)) {\n        return attrs;\n      }\n\n      if (typeof attrs === 'string') {\n        attrs = {\n          type: attrs\n        };\n      }\n\n      if (isPlainObject(attrs)) {\n        return Mark.fromJSON(attrs);\n      }\n\n      throw new Error('`Mark.create` only accepts objects, strings or marks, but you passed it: ' + attrs);\n    }\n    /**\n     * Create a set of marks.\n     *\n     * @param {Array<Object|Mark>} elements\n     * @return {Set<Mark>}\n     */\n\n  }, {\n    key: 'createSet',\n    value: function createSet(elements) {\n      if (Set.isSet(elements) || Array.isArray(elements)) {\n        var marks = new Set(elements.map(Mark.create));\n        return marks;\n      }\n\n      if (elements == null) {\n        return Set();\n      }\n\n      throw new Error('`Mark.createSet` only accepts sets, arrays or null, but you passed it: ' + elements);\n    }\n    /**\n     * Create a dictionary of settable mark properties from `attrs`.\n     *\n     * @param {Object|String|Mark} attrs\n     * @return {Object}\n     */\n\n  }, {\n    key: 'createProperties',\n    value: function createProperties() {\n      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (Mark.isMark(attrs)) {\n        return {\n          data: attrs.data,\n          type: attrs.type\n        };\n      }\n\n      if (typeof attrs === 'string') {\n        return {\n          type: attrs\n        };\n      }\n\n      if (isPlainObject(attrs)) {\n        var props = {};\n        if ('type' in attrs) props.type = attrs.type;\n        if ('data' in attrs) props.data = Data.create(attrs.data);\n        return props;\n      }\n\n      throw new Error('`Mark.createProperties` only accepts objects, strings or marks, but you passed it: ' + attrs);\n    }\n    /**\n     * Create a `Mark` from a JSON `object`.\n     *\n     * @param {Object} object\n     * @return {Mark}\n     */\n\n  }, {\n    key: 'fromJSON',\n    value: function fromJSON(object) {\n      var _object$data = object.data,\n          data = _object$data === undefined ? {} : _object$data,\n          type = object.type;\n\n      if (typeof type !== 'string') {\n        throw new Error('`Mark.fromJS` requires a `type` string.');\n      }\n\n      var mark = new Mark({\n        type: type,\n        data: new Map(data)\n      });\n      return mark;\n    }\n    /**\n     * Check if `any` is a set of marks.\n     *\n     * @param {Any} any\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'isMarkSet',\n    value: function isMarkSet(any) {\n      return Set.isSet(any) && any.every(function (item) {\n        return Mark.isMark(item);\n      });\n    }\n  }]);\n  return Mark;\n}(Record(DEFAULTS$2));\n/**\n * Export.\n *\n * @type {Mark}\n */\n\n\nvar DEFAULTS$3 = {\n  marks: undefined,\n  text: undefined\n  /**\n   * Leaf.\n   *\n   * @type {Leaf}\n   */\n\n};\n\nvar Leaf = function (_Record) {\n  inherits(Leaf, _Record);\n\n  function Leaf() {\n    classCallCheck(this, Leaf);\n    return possibleConstructorReturn(this, (Leaf.__proto__ || Object.getPrototypeOf(Leaf)).apply(this, arguments));\n  }\n\n  createClass(Leaf, [{\n    key: 'updateMark',\n\n    /**\n     * Update a `mark` at leaf, replace with newMark\n     *\n     * @param {Mark} mark\n     * @param {Mark} newMark\n     * @returns {Leaf}\n     */\n    value: function updateMark(mark, newMark) {\n      var marks = this.marks;\n      if (newMark.equals(mark)) return this;\n      if (!marks.has(mark)) return this;\n      var newMarks = marks.withMutations(function (collection) {\n        collection.remove(mark).add(newMark);\n      });\n      return this.set('marks', newMarks);\n    }\n    /**\n     * Add a `mark` to the leaf.\n     *\n     * @param {Mark} mark\n     * @returns {Text}\n     */\n\n  }, {\n    key: 'addMark',\n    value: function addMark(mark) {\n      var marks = this.marks;\n      return this.set('marks', marks.add(mark));\n    }\n    /**\n     * Add a `set` of marks to the leaf.\n     *\n     * @param {Set<Mark>} set\n     * @returns {Text}\n     */\n\n  }, {\n    key: 'addMarks',\n    value: function addMarks(set$$1) {\n      var marks = this.marks;\n      return this.set('marks', marks.union(set$$1));\n    }\n    /**\n     * Insert a text `string` into the leaf at `offset`.\n     *\n     * @param {Number} offset\n     * @param {String} string\n     * @return {Leaf}\n     */\n\n  }, {\n    key: 'insertText',\n    value: function insertText(offset, string) {\n      var text = this.text;\n      var next = text.slice(0, offset) + string + text.slice(offset);\n      return this.set('text', next);\n    }\n    /**\n     * Remove a `mark` from the leaf.\n     *\n     * @param {Mark} mark\n     * @returns {Text}\n     */\n\n  }, {\n    key: 'removeMark',\n    value: function removeMark(mark) {\n      var marks = this.marks;\n      return this.set('marks', marks.remove(mark));\n    }\n    /**\n     * Return a JSON representation of the leaf.\n     *\n     * @return {Object}\n     */\n\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      var object = {\n        object: this.object,\n        text: this.text,\n        marks: this.marks.toArray().map(function (m) {\n          return m.toJSON();\n        })\n      };\n      return object;\n    }\n  }], [{\n    key: 'create',\n\n    /**\n     * Create a new `Leaf` with `attrs`.\n     *\n     * @param {Object|Leaf} attrs\n     * @return {Leaf}\n     */\n    value: function create() {\n      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (Leaf.isLeaf(attrs)) {\n        return attrs;\n      }\n\n      if (typeof attrs === 'string') {\n        attrs = {\n          text: attrs\n        };\n      }\n\n      if (isPlainObject(attrs)) {\n        return Leaf.fromJSON(attrs);\n      }\n\n      throw new Error('`Leaf.create` only accepts objects, strings or leaves, but you passed it: ' + attrs);\n    }\n    /**\n     * Create a valid List of `Leaf` from `leaves`\n     *\n     * @param {List<Leaf>} leaves\n     * @return {List<Leaf>}\n     */\n\n  }, {\n    key: 'createLeaves',\n    value: function createLeaves(leaves) {\n      if (leaves.size <= 1) return leaves;\n      var invalid = false; // TODO: we can make this faster with [List] and then flatten\n\n      var result = List().withMutations(function (cache) {\n        // Search from the leaves left end to find invalid node;\n        leaves.findLast(function (leaf, index) {\n          var firstLeaf = cache.first(); // If the first leaf of cache exist, check whether the first leaf is connectable with the current leaf\n\n          if (firstLeaf) {\n            // If marks equals, then the two leaves can be connected\n            if (firstLeaf.marks.equals(leaf.marks)) {\n              invalid = true;\n              cache.set(0, firstLeaf.set('text', '' + leaf.text + firstLeaf.text));\n              return;\n            } // If the cached leaf is empty, drop the empty leaf with the upcoming leaf\n\n\n            if (firstLeaf.text === '') {\n              invalid = true;\n              cache.set(0, leaf);\n              return;\n            } // If the current leaf is empty, drop the leaf\n\n\n            if (leaf.text === '') {\n              invalid = true;\n              return;\n            }\n          }\n\n          cache.unshift(leaf);\n        });\n      });\n      if (!invalid) return leaves;\n      return result;\n    }\n    /**\n     * Split a list of leaves to two lists; if the leaves are valid leaves, the returned leaves are also valid\n     * Corner Cases:\n     *   1. if offset is smaller than 0, then return [List(), leaves]\n     *   2. if offset is bigger than the text length, then return [leaves, List()]\n     *\n     * @param {List<Leaf> leaves\n     * @return {Array<List<Leaf>>}\n     */\n\n  }, {\n    key: 'splitLeaves',\n    value: function splitLeaves(leaves, offset) {\n      if (offset < 0) return [List(), leaves];\n\n      if (leaves.size === 0) {\n        return [List(), List()];\n      }\n\n      var endOffset = 0;\n      var index = -1;\n      var left = void 0,\n          right = void 0;\n      leaves.find(function (leaf) {\n        index++;\n        var startOffset = endOffset;\n        var text = leaf.text;\n        endOffset += text.length;\n        if (endOffset < offset) return false;\n        if (startOffset > offset) return false;\n        var length = offset - startOffset;\n        left = leaf.set('text', text.slice(0, length));\n        right = leaf.set('text', text.slice(length));\n        return true;\n      });\n      if (!left) return [leaves, List()];\n\n      if (left.text === '') {\n        if (index === 0) {\n          return [List.of(left), leaves];\n        }\n\n        return [leaves.take(index), leaves.skip(index)];\n      }\n\n      if (right.text === '') {\n        if (index === leaves.size - 1) {\n          return [leaves, List.of(right)];\n        }\n\n        return [leaves.take(index + 1), leaves.skip(index + 1)];\n      }\n\n      return [leaves.take(index).push(left), leaves.skip(index + 1).unshift(right)];\n    }\n    /**\n     * Create a `Leaf` list from `attrs`.\n     *\n     * @param {Array<Leaf|Object>|List<Leaf|Object>} attrs\n     * @return {List<Leaf>}\n     */\n\n  }, {\n    key: 'createList',\n    value: function createList() {\n      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (List.isList(attrs) || Array.isArray(attrs)) {\n        var list = new List(attrs.map(Leaf.create));\n        return list;\n      }\n\n      throw new Error('`Leaf.createList` only accepts arrays or lists, but you passed it: ' + attrs);\n    }\n    /**\n     * Create a `Leaf` from a JSON `object`.\n     *\n     * @param {Object} object\n     * @return {Leaf}\n     */\n\n  }, {\n    key: 'fromJSON',\n    value: function fromJSON(object) {\n      var _object$text = object.text,\n          text = _object$text === undefined ? '' : _object$text,\n          _object$marks = object.marks,\n          marks = _object$marks === undefined ? [] : _object$marks;\n      var leaf = new Leaf({\n        text: text,\n        marks: Set(marks.map(Mark.fromJSON))\n      });\n      return leaf;\n    }\n    /**\n     * Check if `any` is a list of leaves.\n     *\n     * @param {Any} any\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'isLeafList',\n    value: function isLeafList(any) {\n      return List.isList(any) && any.every(function (item) {\n        return Leaf.isLeaf(item);\n      });\n    }\n  }]);\n  return Leaf;\n}(Record(DEFAULTS$3));\n/**\n * Export.\n *\n * @type {Leaf}\n */\n\n/* global WeakMap, Map, Symbol */\n\n/**\n * GLOBAL: True if memoization should is enabled.\n *\n * @type {Boolean}\n */\n\n\nvar ENABLED = true;\n/**\n * The leaf node of a cache tree. Used to support variable argument length. A\n * unique object, so that native Maps will key it by reference.\n *\n * @type {Symbol}\n */\n\nvar LEAF = Symbol('LEAF');\n/**\n * The node of a cache tree for a WeakMap to store cache visited by objects\n *\n * @type {Symbol}\n */\n\nvar STORE_KEY = Symbol('STORE_KEY');\n/**\n * Values to represent a memoized undefined and null value. Allows efficient value\n * retrieval using Map.get only.\n *\n * @type {Symbol}\n */\n\nvar UNDEFINED = Symbol('undefined');\nvar NULL = Symbol('null');\n/**\n * Default value for unset keys in native Maps\n *\n * @type {Undefined}\n */\n\nvar UNSET = undefined;\n/**\n * Global Store for all cached values\n *\n * @type {WeakMap}\n */\n\nvar memoizeStore = new WeakMap();\n/**\n * Memoize all of the `properties` on a `object`.\n *\n * @param {Object} object\n * @param {Array} properties\n * @return {Record}\n */\n\nfunction memoize(object, properties) {\n  var _loop = function _loop(property) {\n    var original = object[property];\n\n    if (!original) {\n      throw new Error('Object does not have a property named \"' + property + '\".');\n    }\n\n    object[property] = function () {\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      } // If memoization is disabled, call into the original method.\n\n\n      if (!ENABLED) return original.apply(this, args);\n\n      if (!memoizeStore.has(this)) {\n        memoizeStore.set(this, {\n          noArgs: {},\n          hasArgs: {}\n        });\n      }\n\n      var _memoizeStore$get = memoizeStore.get(this),\n          noArgs = _memoizeStore$get.noArgs,\n          hasArgs = _memoizeStore$get.hasArgs;\n\n      var takesArguments = args.length !== 0;\n      var cachedValue = void 0;\n      var keys = void 0;\n\n      if (takesArguments) {\n        keys = [property].concat(args);\n        cachedValue = getIn(hasArgs, keys);\n      } else {\n        cachedValue = noArgs[property];\n      } // If we've got a result already, return it.\n\n\n      if (cachedValue !== UNSET) {\n        return cachedValue === UNDEFINED ? undefined : cachedValue;\n      } // Otherwise calculate what it should be once and cache it.\n\n\n      var value = original.apply(this, args);\n      var v = value === undefined ? UNDEFINED : value;\n\n      if (takesArguments) {\n        setIn(hasArgs, keys, v);\n      } else {\n        noArgs[property] = v;\n      }\n\n      return value;\n    };\n  };\n\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = properties[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var property = _step.value;\n\n      _loop(property);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n}\n/**\n * Get a value at a key path in a tree of Map.\n *\n * If not set, returns UNSET.\n * If the set value is undefined, returns UNDEFINED.\n *\n * @param {Map} map\n * @param {Array} keys\n * @return {Any|UNSET|UNDEFINED}\n */\n\n\nfunction getIn(map, keys) {\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = keys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var key = _step2.value;\n\n      if (key === undefined) {\n        key = UNDEFINED;\n      } else if (key == null) {\n        key = NULL;\n      }\n\n      if ((typeof key === 'undefined' ? 'undefined' : _typeof(key)) === 'object') {\n        map = map[STORE_KEY] && map[STORE_KEY].get(key);\n      } else {\n        map = map[key];\n      }\n\n      if (map === UNSET) return UNSET;\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n\n  return map[LEAF];\n}\n/**\n * Set a value at a key path in a tree of Map, creating Maps on the go.\n *\n * @param {Map} map\n * @param {Array} keys\n * @param {Any} value\n * @return {Map}\n */\n\n\nfunction setIn(map, keys, value) {\n  var child = map;\n  var _iteratorNormalCompletion3 = true;\n  var _didIteratorError3 = false;\n  var _iteratorError3 = undefined;\n\n  try {\n    for (var _iterator3 = keys[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n      var key = _step3.value;\n\n      if (key === undefined) {\n        key = UNDEFINED;\n      } else if (key == null) {\n        key = NULL;\n      }\n\n      if ((typeof key === 'undefined' ? 'undefined' : _typeof(key)) !== 'object') {\n        if (!child[key]) {\n          child[key] = {};\n        }\n\n        child = child[key];\n        continue;\n      }\n\n      if (!child[STORE_KEY]) {\n        child[STORE_KEY] = new WeakMap();\n      }\n\n      if (!child[STORE_KEY].has(key)) {\n        var newChild = {};\n        child[STORE_KEY].set(key, newChild);\n        child = newChild;\n        continue;\n      }\n\n      child = child[STORE_KEY].get(key);\n    } // The whole path has been created, so set the value to the bottom most map.\n\n  } catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion3 && _iterator3.return) {\n        _iterator3.return();\n      }\n    } finally {\n      if (_didIteratorError3) {\n        throw _iteratorError3;\n      }\n    }\n  }\n\n  child[LEAF] = value;\n  return map;\n}\n/**\n * In DEV mode, clears the previously memoized values, globally.\n *\n * @return {Void}\n */\n\n\nfunction resetMemoization() {\n  memoizeStore = new WeakMap();\n}\n/**\n * In DEV mode, enable or disable the use of memoize values, globally.\n *\n * @param {Boolean} enabled\n * @return {Void}\n */\n\n\nfunction useMemoization(enabled) {\n  ENABLED = enabled;\n}\n/**\n * Export.\n *\n * @type {Object}\n */\n\n\nvar DEFAULTS$4 = {\n  leaves: undefined,\n  key: undefined\n  /**\n   * Text.\n   *\n   * @type {Text}\n   */\n\n};\n\nvar Text = function (_Record) {\n  inherits(Text, _Record);\n\n  function Text() {\n    classCallCheck(this, Text);\n    return possibleConstructorReturn(this, (Text.__proto__ || Object.getPrototypeOf(Text)).apply(this, arguments));\n  }\n\n  createClass(Text, [{\n    key: 'searchLeafAtOffset',\n\n    /**\n     * Find the 'first' leaf at offset; By 'first' the alorighthm prefers `endOffset === offset` than `startOffset === offset`\n     * Corner Cases:\n     *   1. if offset is negative, return the first leaf;\n     *   2. if offset is larger than text length, the leaf is null, startOffset, endOffset and index is of the last leaf\n     *\n     * @param {number}\n     * @returns {Object}\n     *   @property {number} startOffset\n     *   @property {number} endOffset\n     *   @property {number} index\n     *   @property {Leaf} leaf\n     */\n    value: function searchLeafAtOffset(offset) {\n      var endOffset = 0;\n      var startOffset = 0;\n      var index = -1;\n      var leaf = this.leaves.find(function (l) {\n        index++;\n        startOffset = endOffset;\n        endOffset = startOffset + l.text.length;\n        return endOffset >= offset;\n      });\n      return {\n        leaf: leaf,\n        endOffset: endOffset,\n        index: index,\n        startOffset: startOffset\n      };\n    }\n    /**\n     * Add a `mark` at `index` and `length`.\n     *\n     * @param {Number} index\n     * @param {Number} length\n     * @param {Mark} mark\n     * @return {Text}\n     */\n\n  }, {\n    key: 'addMark',\n    value: function addMark(index, length, mark) {\n      var marks = Set.of(mark);\n      return this.addMarks(index, length, marks);\n    }\n    /**\n     * Add a `set` of marks at `index` and `length`.\n     * Corner Cases:\n     *   1. If empty text, and if length === 0 and index === 0, will make sure the text contain an empty leaf with the given mark.\n     *\n     * @param {Number} index\n     * @param {Number} length\n     * @param {Set<Mark>} set\n     * @return {Text}\n     */\n\n  }, {\n    key: 'addMarks',\n    value: function addMarks(index, length, set$$1) {\n      if (this.text === '' && length === 0 && index === 0) {\n        var _leaves = this.leaves;\n\n        var first = _leaves.first();\n\n        if (!first) {\n          return this.set('leaves', List.of(Leaf.fromJSON({\n            text: '',\n            marks: set$$1\n          })));\n        }\n\n        var newFirst = first.addMarks(set$$1);\n        if (newFirst === first) return this;\n        return this.set('leaves', List.of(newFirst));\n      }\n\n      if (this.text === '') return this;\n      if (length === 0) return this;\n      if (index >= this.text.length) return this;\n\n      var _Leaf$splitLeaves = Leaf.splitLeaves(this.leaves, index),\n          _Leaf$splitLeaves2 = slicedToArray(_Leaf$splitLeaves, 2),\n          before = _Leaf$splitLeaves2[0],\n          bundle = _Leaf$splitLeaves2[1];\n\n      var _Leaf$splitLeaves3 = Leaf.splitLeaves(bundle, length),\n          _Leaf$splitLeaves4 = slicedToArray(_Leaf$splitLeaves3, 2),\n          middle = _Leaf$splitLeaves4[0],\n          after = _Leaf$splitLeaves4[1];\n\n      var leaves = before.concat(middle.map(function (x) {\n        return x.addMarks(set$$1);\n      }), after);\n      return this.setLeaves(leaves);\n    }\n    /**\n     * Derive the leaves for a list of `decorations`.\n     *\n     * @param {List} decorations (optional)\n     * @return {List<Leaf>}\n     */\n\n  }, {\n    key: 'getLeaves',\n    value: function getLeaves(decorations) {\n      var leaves = this.leaves; // PERF: We can exit early without decorations.\n\n      if (!decorations || decorations.size === 0) return leaves; // HACK: We shouldn't need this, because text nodes should never be in a\n      // position of not having any leaves...\n\n      if (leaves.size === 0) {\n        var marks = decorations.map(function (d) {\n          return d.mark;\n        });\n        var leaf = Leaf.create({\n          marks: marks\n        });\n        return List([leaf]);\n      } // HACK: this shouldn't be necessary, because the loop below should handle\n      // the `0` case without failures. It may already even, not sure.\n\n\n      if (this.text.length === 0) {\n        var _marks = decorations.map(function (d) {\n          return d.mark;\n        });\n\n        var _leaf = Leaf.create({\n          marks: _marks\n        });\n\n        return List([_leaf]);\n      }\n\n      var key = this.key,\n          text = this.text;\n      decorations.forEach(function (dec) {\n        var start = dec.start,\n            end = dec.end,\n            mark = dec.mark;\n        var hasStart = start.key === key;\n        var hasEnd = end.key === key;\n\n        if (hasStart && hasEnd) {\n          var index = hasStart ? start.offset : 0;\n          var length = hasEnd ? end.offset - index : text.length - index;\n          if (length < 1) return;\n          if (index >= text.length) return;\n\n          if (index !== 0 || length < text.length) {\n            var _Leaf$splitLeaves5 = Leaf.splitLeaves(leaves, index),\n                _Leaf$splitLeaves6 = slicedToArray(_Leaf$splitLeaves5, 2),\n                before = _Leaf$splitLeaves6[0],\n                bundle = _Leaf$splitLeaves6[1];\n\n            var _Leaf$splitLeaves7 = Leaf.splitLeaves(bundle, length),\n                _Leaf$splitLeaves8 = slicedToArray(_Leaf$splitLeaves7, 2),\n                middle = _Leaf$splitLeaves8[0],\n                after = _Leaf$splitLeaves8[1];\n\n            leaves = before.concat(middle.map(function (x) {\n              return x.addMark(mark);\n            }), after);\n            return;\n          }\n        }\n\n        leaves = leaves.map(function (x) {\n          return x.addMark(mark);\n        });\n      });\n      if (leaves === this.leaves) return leaves;\n      return Leaf.createLeaves(leaves);\n    }\n    /**\n     * Get all of the active marks on between two offsets\n     * Corner Cases:\n     *   1. if startOffset is equal or bigger than endOffset, then return Set();\n     *   2. If no text is selected between start and end, then return Set()\n     *\n     * @return {Set<Mark>}\n     */\n\n  }, {\n    key: 'getActiveMarksBetweenOffsets',\n    value: function getActiveMarksBetweenOffsets(startOffset, endOffset) {\n      if (startOffset <= 0 && endOffset >= this.text.length) {\n        return this.getActiveMarks();\n      }\n\n      if (startOffset >= endOffset) return Set(); // For empty text in a paragraph, use getActiveMarks;\n\n      if (this.text === '') return this.getActiveMarks();\n      var result = null;\n      var leafEnd = 0;\n      this.leaves.forEach(function (leaf) {\n        var leafStart = leafEnd;\n        leafEnd = leafStart + leaf.text.length;\n        if (leafEnd <= startOffset) return;\n        if (leafStart >= endOffset) return false;\n\n        if (!result) {\n          result = leaf.marks;\n          return;\n        }\n\n        result = result.intersect(leaf.marks);\n        if (result && result.size === 0) return false;\n        return false;\n      });\n      return result || Set();\n    }\n    /**\n     * Get all of the active marks on the text\n     *\n     * @return {Set<Mark>}\n     */\n\n  }, {\n    key: 'getActiveMarks',\n    value: function getActiveMarks() {\n      var _this2 = this;\n\n      if (this.leaves.size === 0) return Set();\n      var result = this.leaves.first().marks;\n      if (result.size === 0) return result;\n      return result.toOrderedSet().withMutations(function (x) {\n        _this2.leaves.forEach(function (c) {\n          x.intersect(c.marks);\n          if (x.size === 0) return false;\n        });\n      });\n    }\n    /**\n     * Get all of the marks on between two offsets\n     * Corner Cases:\n     *   1. if startOffset is equal or bigger than endOffset, then return Set();\n     *   2. If no text is selected between start and end, then return Set()\n     *\n     * @return {OrderedSet<Mark>}\n     */\n\n  }, {\n    key: 'getMarksBetweenOffsets',\n    value: function getMarksBetweenOffsets(startOffset, endOffset) {\n      if (startOffset <= 0 && endOffset >= this.text.length) {\n        return this.getMarks();\n      }\n\n      if (startOffset >= endOffset) return Set(); // For empty text in a paragraph, use getActiveMarks;\n\n      if (this.text === '') return this.getActiveMarks();\n      var result = null;\n      var leafEnd = 0;\n      this.leaves.forEach(function (leaf) {\n        var leafStart = leafEnd;\n        leafEnd = leafStart + leaf.text.length;\n        if (leafEnd <= startOffset) return;\n        if (leafStart >= endOffset) return false;\n\n        if (!result) {\n          result = leaf.marks;\n          return;\n        }\n\n        result = result.union(leaf.marks);\n      });\n      return result || Set();\n    }\n    /**\n     * Get all of the marks on the text.\n     *\n     * @return {OrderedSet<Mark>}\n     */\n\n  }, {\n    key: 'getMarks',\n    value: function getMarks() {\n      var array = this.getMarksAsArray();\n      return new OrderedSet(array);\n    }\n    /**\n     * Get all of the marks on the text as an array\n     *\n     * @return {Array}\n     */\n\n  }, {\n    key: 'getMarksAsArray',\n    value: function getMarksAsArray() {\n      if (this.leaves.size === 0) return [];\n      var first = this.leaves.first().marks;\n      if (this.leaves.size === 1) return first.toArray();\n      var result = [];\n      this.leaves.forEach(function (leaf) {\n        result.push(leaf.marks.toArray());\n      });\n      return Array.prototype.concat.apply(first.toArray(), result);\n    }\n    /**\n     * Get the marks on the text at `index`.\n     * Corner Cases:\n     *   1. if no text is before the index, and index !== 0, then return Set()\n     *   2. (for insert after split node or mark at range) if index === 0, and text === '', then return the leaf.marks\n     *   3. if index === 0, text !== '', return Set()\n     *\n     *\n     * @param {Number} index\n     * @return {Set<Mark>}\n     */\n\n  }, {\n    key: 'getMarksAtIndex',\n    value: function getMarksAtIndex(index) {\n      var _searchLeafAtOffset = this.searchLeafAtOffset(index),\n          leaf = _searchLeafAtOffset.leaf;\n\n      if (!leaf) return Set();\n      return leaf.marks;\n    }\n    /**\n     * Insert `text` at `index`.\n     *\n     * @param {Numbder} offset\n     * @param {String} text\n     * @param {Set} marks (optional)\n     * @return {Text}\n     */\n\n  }, {\n    key: 'insertText',\n    value: function insertText(offset, text, marks) {\n      if (this.text === '') {\n        return this.set('leaves', List.of(Leaf.create({\n          text: text,\n          marks: marks\n        })));\n      }\n\n      if (text.length === 0) return this;\n      if (!marks) marks = Set();\n\n      var _searchLeafAtOffset2 = this.searchLeafAtOffset(offset),\n          startOffset = _searchLeafAtOffset2.startOffset,\n          leaf = _searchLeafAtOffset2.leaf,\n          index = _searchLeafAtOffset2.index;\n\n      var delta = offset - startOffset;\n      var beforeText = leaf.text.slice(0, delta);\n      var afterText = leaf.text.slice(delta);\n      var leaves = this.leaves;\n\n      if (leaf.marks.equals(marks)) {\n        return this.set('leaves', leaves.set(index, leaf.set('text', beforeText + text + afterText)));\n      }\n\n      var nextLeaves = leaves.splice(index, 1, leaf.set('text', beforeText), Leaf.create({\n        text: text,\n        marks: marks\n      }), leaf.set('text', afterText));\n      return this.setLeaves(nextLeaves);\n    }\n    /**\n     * Remove a `mark` at `index` and `length`.\n     *\n     * @param {Number} index\n     * @param {Number} length\n     * @param {Mark} mark\n     * @return {Text}\n     */\n\n  }, {\n    key: 'removeMark',\n    value: function removeMark(index, length, mark) {\n      if (this.text === '' && index === 0 && length === 0) {\n        var first = this.leaves.first();\n        if (!first) return this;\n        var newFirst = first.removeMark(mark);\n        if (newFirst === first) return this;\n        return this.set('leaves', List.of(newFirst));\n      }\n\n      if (length <= 0) return this;\n      if (index >= this.text.length) return this;\n\n      var _Leaf$splitLeaves9 = Leaf.splitLeaves(this.leaves, index),\n          _Leaf$splitLeaves10 = slicedToArray(_Leaf$splitLeaves9, 2),\n          before = _Leaf$splitLeaves10[0],\n          bundle = _Leaf$splitLeaves10[1];\n\n      var _Leaf$splitLeaves11 = Leaf.splitLeaves(bundle, length),\n          _Leaf$splitLeaves12 = slicedToArray(_Leaf$splitLeaves11, 2),\n          middle = _Leaf$splitLeaves12[0],\n          after = _Leaf$splitLeaves12[1];\n\n      var leaves = before.concat(middle.map(function (x) {\n        return x.removeMark(mark);\n      }), after);\n      return this.setLeaves(leaves);\n    }\n    /**\n     * Remove text from the text node at `start` for `length`.\n     *\n     * @param {Number} start\n     * @param {Number} length\n     * @return {Text}\n     */\n\n  }, {\n    key: 'removeText',\n    value: function removeText(start, length) {\n      if (length <= 0) return this;\n      if (start >= this.text.length) return this; // PERF: For simple backspace, we can operate directly on the leaf\n\n      if (length === 1) {\n        var _searchLeafAtOffset3 = this.searchLeafAtOffset(start + 1),\n            leaf = _searchLeafAtOffset3.leaf,\n            index = _searchLeafAtOffset3.index,\n            startOffset = _searchLeafAtOffset3.startOffset;\n\n        var offset = start - startOffset;\n\n        if (leaf) {\n          if (leaf.text.length === 1) {\n            var _leaves2 = this.leaves.remove(index);\n\n            return this.setLeaves(_leaves2);\n          }\n\n          var beforeText = leaf.text.slice(0, offset);\n          var afterText = leaf.text.slice(offset + length);\n          var text = beforeText + afterText;\n\n          if (text.length > 0) {\n            return this.set('leaves', this.leaves.set(index, leaf.set('text', text)));\n          }\n        }\n      }\n\n      var _Leaf$splitLeaves13 = Leaf.splitLeaves(this.leaves, start),\n          _Leaf$splitLeaves14 = slicedToArray(_Leaf$splitLeaves13, 2),\n          before = _Leaf$splitLeaves14[0],\n          bundle = _Leaf$splitLeaves14[1];\n\n      var after = Leaf.splitLeaves(bundle, length)[1];\n      var leaves = Leaf.createLeaves(before.concat(after));\n\n      if (leaves.size === 1) {\n        var first = leaves.first();\n\n        if (first.text === '') {\n          return this.set('leaves', List.of(first.set('marks', this.getActiveMarks())));\n        }\n      }\n\n      return this.set('leaves', leaves);\n    }\n    /**\n     * Return a JSON representation of the text.\n     *\n     * @param {Object} options\n     * @return {Object}\n     */\n\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var object = {\n        object: this.object,\n        leaves: this.getLeaves().toArray().map(function (r) {\n          return r.toJSON();\n        })\n      };\n\n      if (options.preserveKeys) {\n        object.key = this.key;\n      }\n\n      return object;\n    }\n    /**\n     * Update a `mark` at `index` and `length` with `properties`.\n     *\n     * @param {Number} index\n     * @param {Number} length\n     * @param {Object} properties\n     * @param {Object} newProperties\n     * @return {Text}\n     */\n\n  }, {\n    key: 'updateMark',\n    value: function updateMark(index, length, properties, newProperties) {\n      var mark = Mark.create(properties);\n      var newMark = mark.merge(newProperties);\n\n      if (this.text === '' && length === 0 && index === 0) {\n        var _leaves3 = this.leaves;\n\n        var first = _leaves3.first();\n\n        if (!first) return this;\n        var newFirst = first.updateMark(mark, newMark);\n        if (newFirst === first) return this;\n        return this.set('leaves', List.of(newFirst));\n      }\n\n      if (length <= 0) return this;\n      if (index >= this.text.length) return this;\n\n      var _Leaf$splitLeaves15 = Leaf.splitLeaves(this.leaves, index),\n          _Leaf$splitLeaves16 = slicedToArray(_Leaf$splitLeaves15, 2),\n          before = _Leaf$splitLeaves16[0],\n          bundle = _Leaf$splitLeaves16[1];\n\n      var _Leaf$splitLeaves17 = Leaf.splitLeaves(bundle, length),\n          _Leaf$splitLeaves18 = slicedToArray(_Leaf$splitLeaves17, 2),\n          middle = _Leaf$splitLeaves18[0],\n          after = _Leaf$splitLeaves18[1];\n\n      var leaves = before.concat(middle.map(function (x) {\n        return x.updateMark(mark, newMark);\n      }), after);\n      return this.setLeaves(leaves);\n    }\n    /**\n     * Split this text and return two different texts\n     * @param {Number} position\n     * @returns {Array<Text>}\n     */\n\n  }, {\n    key: 'splitText',\n    value: function splitText(offset) {\n      var splitted = Leaf.splitLeaves(this.leaves, offset);\n      var one = this.set('leaves', splitted[0]);\n      var two = this.set('leaves', splitted[1]).regenerateKey();\n      return [one, two];\n    }\n    /**\n     * merge this text and another text at the end\n     * @param {Text} text\n     * @returns {Text}\n     */\n\n  }, {\n    key: 'mergeText',\n    value: function mergeText(text) {\n      var leaves = this.leaves.concat(text.leaves);\n      return this.setLeaves(leaves);\n    }\n    /**\n     * Set leaves with normalized `leaves`\n     *\n     * @param {List} leaves\n     * @returns {Text}\n     */\n\n  }, {\n    key: 'setLeaves',\n    value: function setLeaves(leaves) {\n      leaves = Leaf.createLeaves(leaves);\n\n      if (leaves.size === 1) {\n        var first = leaves.first();\n\n        if (!first.marks || first.marks.size === 0) {\n          if (first.text === '') {\n            return this.set('leaves', List([Leaf.create()]));\n          }\n        }\n      }\n\n      if (leaves.size === 0) {\n        leaves = leaves.push(Leaf.create());\n      }\n\n      return this.set('leaves', leaves);\n    }\n  }], [{\n    key: 'create',\n\n    /**\n     * Create a new `Text` with `attrs`.\n     *\n     * @param {Object|Array|List|String|Text} attrs\n     * @return {Text}\n     */\n    value: function create() {\n      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n      if (Text.isText(attrs)) {\n        return attrs;\n      }\n\n      if (typeof attrs === 'string') {\n        attrs = {\n          leaves: [{\n            text: attrs\n          }]\n        };\n      }\n\n      if (isPlainObject(attrs)) {\n        if (attrs.text) {\n          var _attrs = attrs,\n              text = _attrs.text,\n              marks = _attrs.marks,\n              key = _attrs.key;\n          attrs = {\n            key: key,\n            leaves: [{\n              text: text,\n              marks: marks\n            }]\n          };\n        }\n\n        return Text.fromJSON(attrs);\n      }\n\n      throw new Error('`Text.create` only accepts objects, arrays, strings or texts, but you passed it: ' + attrs);\n    }\n    /**\n     * Create a list of `Texts` from `elements`.\n     *\n     * @param {Array<Text|Object>|List<Text|Object>} elements\n     * @return {List<Text>}\n     */\n\n  }, {\n    key: 'createList',\n    value: function createList() {\n      var elements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (List.isList(elements) || Array.isArray(elements)) {\n        var list = new List(elements.map(Text.create));\n        return list;\n      }\n\n      throw new Error('`Text.createList` only accepts arrays or lists, but you passed it: ' + elements);\n    }\n    /**\n     * Create a `Text` from a JSON `object`.\n     *\n     * @param {Object|Text} object\n     * @return {Text}\n     */\n\n  }, {\n    key: 'fromJSON',\n    value: function fromJSON(object) {\n      if (Text.isText(object)) {\n        return object;\n      }\n\n      var _object$key = object.key,\n          key = _object$key === undefined ? KeyUtils.create() : _object$key;\n      var leaves = object.leaves;\n\n      if (!leaves) {\n        if (object.ranges) {\n          warning(false, 'As of slate@0.27.0, the `ranges` property of Slate objects has been renamed to `leaves`.');\n          leaves = object.ranges;\n        } else {\n          leaves = List();\n        }\n      }\n\n      if (Array.isArray(leaves)) {\n        leaves = List(leaves.map(function (x) {\n          return Leaf.create(x);\n        }));\n      } else if (List.isList(leaves)) {\n        leaves = leaves.map(function (x) {\n          return Leaf.create(x);\n        });\n      } else {\n        throw new Error('leaves must be either Array or Immutable.List');\n      }\n\n      if (leaves.size === 0) {\n        leaves = leaves.push(Leaf.create());\n      }\n\n      var node = new Text({\n        leaves: Leaf.createLeaves(leaves),\n        key: key\n      });\n      return node;\n    }\n    /**\n     * Check if `any` is a list of texts.\n     *\n     * @param {Any} any\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'isTextList',\n    value: function isTextList(any) {\n      return List.isList(any) && any.every(function (item) {\n        return Text.isText(item);\n      });\n    }\n  }]);\n  return Text;\n}(Record(DEFAULTS$4));\n/**\n * Memoize read methods.\n */\n\n\nmemoize(Text.prototype, ['getActiveMarks', 'getMarks', 'getMarksAsArray']);\n/**\n * Export.\n *\n * @type {Text}\n */\n\nvar Node = function () {\n  function Node() {\n    classCallCheck(this, Node);\n  }\n\n  createClass(Node, null, [{\n    key: 'create',\n\n    /**\n     * Create a new `Node` with `attrs`.\n     *\n     * @param {Object|Node} attrs\n     * @return {Node}\n     */\n    value: function create() {\n      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (Node.isNode(attrs)) {\n        return attrs;\n      }\n\n      if (isPlainObject(attrs)) {\n        var object = attrs.object;\n\n        if (!object && attrs.kind) {\n          warning(false, 'As of slate@0.32.0, the `kind` property of Slate objects has been renamed to `object`.');\n          object = attrs.kind;\n        }\n\n        switch (object) {\n          case 'block':\n            return Block.create(attrs);\n\n          case 'document':\n            return Document.create(attrs);\n\n          case 'inline':\n            return Inline.create(attrs);\n\n          case 'text':\n            return Text.create(attrs);\n\n          default:\n            {\n              throw new Error('`Node.create` requires a `object` string.');\n            }\n        }\n      }\n\n      throw new Error('`Node.create` only accepts objects or nodes but you passed it: ' + attrs);\n    }\n    /**\n     * Create a list of `Nodes` from an array.\n     *\n     * @param {Array<Object|Node>} elements\n     * @return {List<Node>}\n     */\n\n  }, {\n    key: 'createList',\n    value: function createList() {\n      var elements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (List.isList(elements) || Array.isArray(elements)) {\n        var list = List(elements.map(Node.create));\n        return list;\n      }\n\n      throw new Error('`Node.createList` only accepts lists or arrays, but you passed it: ' + elements);\n    }\n    /**\n     * Create a dictionary of settable node properties from `attrs`.\n     *\n     * @param {Object|String|Node} attrs\n     * @return {Object}\n     */\n\n  }, {\n    key: 'createProperties',\n    value: function createProperties() {\n      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (Block.isBlock(attrs) || Inline.isInline(attrs)) {\n        return {\n          data: attrs.data,\n          type: attrs.type\n        };\n      }\n\n      if (typeof attrs === 'string') {\n        return {\n          type: attrs\n        };\n      }\n\n      if (isPlainObject(attrs)) {\n        var props = {};\n        if ('type' in attrs) props.type = attrs.type;\n        if ('data' in attrs) props.data = Data.create(attrs.data);\n        return props;\n      }\n\n      throw new Error('`Node.createProperties` only accepts objects, strings, blocks or inlines, but you passed it: ' + attrs);\n    }\n    /**\n     * Create a `Node` from a JSON `value`.\n     *\n     * @param {Object} value\n     * @return {Node}\n     */\n\n  }, {\n    key: 'fromJSON',\n    value: function fromJSON(value) {\n      var object = value.object;\n\n      if (!object && value.kind) {\n        warning(false, 'As of slate@0.32.0, the `kind` property of Slate objects has been renamed to `object`.');\n        object = value.kind;\n      }\n\n      switch (object) {\n        case 'block':\n          return Block.fromJSON(value);\n\n        case 'document':\n          return Document.fromJSON(value);\n\n        case 'inline':\n          return Inline.fromJSON(value);\n\n        case 'text':\n          return Text.fromJSON(value);\n\n        default:\n          {\n            throw new Error('`Node.fromJSON` requires an `object` of either \\'block\\', \\'document\\', \\'inline\\' or \\'text\\', but you passed: ' + value);\n          }\n      }\n    }\n    /**\n     * Check if `any` is a `Node`.\n     *\n     * @param {Any} any\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'isNode',\n    value: function isNode(any) {\n      return Block.isBlock(any) || Document.isDocument(any) || Inline.isInline(any) || Text.isText(any);\n    }\n    /**\n     * Check if `any` is a list of nodes.\n     *\n     * @param {Any} any\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'isNodeList',\n    value: function isNodeList(any) {\n      return List.isList(any) && any.every(function (item) {\n        return Node.isNode(item);\n      });\n    }\n  }]);\n  return Node;\n}();\n/**\n * Export.\n *\n * @type {Object}\n */\n\n\nvar DEFAULTS$5 = {\n  data: undefined,\n  key: undefined,\n  nodes: undefined,\n  type: undefined\n  /**\n   * Block.\n   *\n   * @type {Block}\n   */\n\n};\n\nvar Block = function (_Record) {\n  inherits(Block, _Record);\n\n  function Block() {\n    classCallCheck(this, Block);\n    return possibleConstructorReturn(this, (Block.__proto__ || Object.getPrototypeOf(Block)).apply(this, arguments));\n  }\n\n  createClass(Block, [{\n    key: 'toJSON',\n\n    /**\n     * Return a JSON representation of the block.\n     *\n     * @param {Object} options\n     * @return {Object}\n     */\n    value: function toJSON() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var object = {\n        object: this.object,\n        type: this.type,\n        data: this.data.toJSON(),\n        nodes: this.nodes.toArray().map(function (n) {\n          return n.toJSON(options);\n        })\n      };\n\n      if (options.preserveKeys) {\n        object.key = this.key;\n      }\n\n      return object;\n    }\n  }], [{\n    key: 'create',\n\n    /**\n     * Create a new `Block` from `attrs`.\n     *\n     * @param {Object|String|Block} attrs\n     * @return {Block}\n     */\n    value: function create() {\n      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (Block.isBlock(attrs)) {\n        return attrs;\n      }\n\n      if (typeof attrs === 'string') {\n        attrs = {\n          type: attrs\n        };\n      }\n\n      if (isPlainObject(attrs)) {\n        return Block.fromJSON(attrs);\n      }\n\n      throw new Error('`Block.create` only accepts objects, strings or blocks, but you passed it: ' + attrs);\n    }\n    /**\n     * Create a list of `Blocks` from `attrs`.\n     *\n     * @param {Array<Block|Object>|List<Block|Object>} attrs\n     * @return {List<Block>}\n     */\n\n  }, {\n    key: 'createList',\n    value: function createList() {\n      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (List.isList(attrs) || Array.isArray(attrs)) {\n        var list = new List(attrs.map(Block.create));\n        return list;\n      }\n\n      throw new Error('`Block.createList` only accepts arrays or lists, but you passed it: ' + attrs);\n    }\n    /**\n     * Create a `Block` from a JSON `object`.\n     *\n     * @param {Object|Block} object\n     * @return {Block}\n     */\n\n  }, {\n    key: 'fromJSON',\n    value: function fromJSON(object) {\n      if (Block.isBlock(object)) {\n        return object;\n      }\n\n      var _object$data = object.data,\n          data = _object$data === undefined ? {} : _object$data,\n          _object$key = object.key,\n          key = _object$key === undefined ? KeyUtils.create() : _object$key,\n          _object$nodes = object.nodes,\n          nodes = _object$nodes === undefined ? [] : _object$nodes,\n          type = object.type;\n\n      if (typeof type !== 'string') {\n        throw new Error('`Block.fromJSON` requires a `type` string.');\n      }\n\n      var block = new Block({\n        key: key,\n        type: type,\n        data: Map(data),\n        nodes: Node.createList(nodes)\n      });\n      return block;\n    }\n    /**\n     * Check if `any` is a block list.\n     *\n     * @param {Any} any\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'isBlockList',\n    value: function isBlockList(any) {\n      return List.isList(any) && any.every(function (item) {\n        return Block.isBlock(item);\n      });\n    }\n  }]);\n  return Block;\n}(Record(DEFAULTS$5));\n/**\n * Export.\n *\n * @type {Block}\n */\n\n\nfunction compare(path, target) {\n  var m = min(path, target);\n\n  for (var i = 0; i < m; i++) {\n    var pv = path.get(i);\n    var tv = target.get(i); // If the path's value is ever less than the target's, it's before.\n\n    if (pv < tv) return -1; // If the target's value is ever less than the path's, it's after.\n\n    if (pv > tv) return 1;\n  } // Paths should now be equal, otherwise something is wrong\n\n\n  return path.size === target.size ? 0 : null;\n}\n/**\n * Create a path from `attrs`.\n *\n * @param {Array|List} attrs\n * @return {List}\n */\n\n\nfunction create$1(attrs) {\n  if (attrs == null) {\n    return null;\n  }\n\n  if (List.isList(attrs)) {\n    return attrs;\n  }\n\n  if (Array.isArray(attrs)) {\n    return List(attrs);\n  }\n\n  throw new Error('Paths can only be created from arrays or lists, but you passed: ' + attrs);\n}\n/**\n * Crop paths `a` and `b` to an equal size, defaulting to the shortest.\n *\n * @param {List} a\n * @param {List} b\n */\n\n\nfunction crop(a, b) {\n  var size = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : min(a, b);\n  var ca = a.slice(0, size);\n  var cb = b.slice(0, size);\n  return [ca, cb];\n}\n/**\n * Decrement a `path` by `n` at `index`, defaulting to the last index.\n *\n * @param {List} path\n * @param {Number} n\n * @param {Number} index\n */\n\n\nfunction decrement(path) {\n  var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : path.size - 1;\n  return increment(path, 0 - n, index);\n}\n/**\n * Get all ancestor paths of th given path.\n *\n * @param {List} path\n * @returns {List}\n */\n\n\nfunction getAncestors(path) {\n  var ancestors = List().withMutations(function (list) {\n    for (var i = 0; i < path.size; i++) {\n      list.push(path.slice(0, i));\n    }\n  });\n  return ancestors;\n}\n/**\n * Increment a `path` by `n` at `index`, defaulting to the last index.\n *\n * @param {List} path\n * @param {Number} n\n * @param {Number} index\n */\n\n\nfunction increment(path) {\n  var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : path.size - 1;\n  var value = path.get(index);\n  var newValue = value + n;\n  var newPath = path.set(index, newValue);\n  return newPath;\n}\n/**\n * Is a `path` above another `target` path?\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\n\nfunction isAbove(path, target) {\n  var _crop = crop(path, target),\n      _crop2 = slicedToArray(_crop, 2),\n      p = _crop2[0],\n      t = _crop2[1];\n\n  return path.size < target.size && compare(p, t) === 0;\n}\n/**\n * Is a `path` after another `target` path in a document?\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\n\nfunction isAfter(path, target) {\n  var _crop3 = crop(path, target),\n      _crop4 = slicedToArray(_crop3, 2),\n      p = _crop4[0],\n      t = _crop4[1];\n\n  return compare(p, t) === 1;\n}\n/**\n * Is a `path` before another `target` path in a document?\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\n\nfunction isBefore(path, target) {\n  var _crop5 = crop(path, target),\n      _crop6 = slicedToArray(_crop5, 2),\n      p = _crop6[0],\n      t = _crop6[1];\n\n  return compare(p, t) === -1;\n}\n/**\n * Is a `path` equal to another `target` path in a document?\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\n\nfunction isEqual(path, target) {\n  return path.equals(target);\n}\n/**\n * Is a `path` older than a `target` path? Meaning that it ends as an older\n * sibling of one of the indexes in the target.\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\n\nfunction isOlder(path, target) {\n  var index = path.size - 1;\n\n  var _crop7 = crop(path, target, index),\n      _crop8 = slicedToArray(_crop7, 2),\n      p = _crop8[0],\n      t = _crop8[1];\n\n  var pl = path.get(index);\n  var tl = target.get(index);\n  return isEqual(p, t) && pl > tl;\n}\n/**\n * Is a `path` a sibling of a `target` path?\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\n\nfunction isSibling(path, target) {\n  if (path.size !== target.size) return false;\n  var p = path.butLast();\n  var t = target.butLast();\n  return p.equals(t);\n}\n/**\n * Is a `path` younger than a `target` path? Meaning that it ends as a younger\n * sibling of one of the indexes in the target.\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\n\nfunction isYounger(path, target) {\n  var index = path.size - 1;\n\n  var _crop9 = crop(path, target, index),\n      _crop10 = slicedToArray(_crop9, 2),\n      p = _crop10[0],\n      t = _crop10[1];\n\n  var pl = path.get(index);\n  var tl = target.get(index);\n  return isEqual(p, t) && pl < tl;\n}\n/**\n * Lift a `path` to refer to its parent.\n *\n * @param {List} path\n * @return {List}\n */\n\n\nfunction lift(path) {\n  var parent = path.slice(0, -1);\n  return parent;\n}\n/**\n * Drop a `path`, returning the path from the first child.\n *\n * @param {List} path\n * @return {List}\n */\n\n\nfunction drop(path) {\n  var relative = path.slice(1);\n  return relative;\n}\n/**\n * Get the maximum length of paths `a` and `b`.\n *\n * @param {List} path\n * @param {List} path\n * @return {Number}\n */\n\n\nfunction max(a, b) {\n  var n = Math.max(a.size, b.size);\n  return n;\n}\n/**\n * Get the minimum length of paths `a` and `b`.\n *\n * @param {List} path\n * @param {List} path\n * @return {Number}\n */\n\n\nfunction min(a, b) {\n  var n = Math.min(a.size, b.size);\n  return n;\n}\n/**\n * Get the common ancestor path of path `a` and path `b`.\n *\n * @param {List} a\n * @param {List} b\n * @return {List}\n */\n\n\nfunction relate(a, b) {\n  var array = [];\n\n  for (var i = 0; i < a.size && i < b.size; i++) {\n    var av = a.get(i);\n    var bv = b.get(i); // If the values aren't equal, they've diverged and don't share an ancestor.\n\n    if (av !== bv) break; // Otherwise, the current value is still a common ancestor.\n\n    array.push(av);\n  }\n\n  var path = create$1(array);\n  return path;\n}\n/**\n * Transform a `path` by an `operation`, adjusting it to stay current.\n *\n * @param {List} path\n * @param {Operation} operation\n * @return {List<List>}\n */\n\n\nfunction transform(path, operation) {\n  var type = operation.type,\n      position = operation.position,\n      p = operation.path;\n\n  if (type === 'add_mark' || type === 'insert_text' || type === 'remove_mark' || type === 'remove_text' || type === 'set_mark' || type === 'set_node' || type === 'set_selection' || type === 'set_value' || path.size === 0) {\n    return List([path]);\n  }\n\n  var pIndex = p.size - 1;\n  var pEqual = isEqual(p, path);\n  var pYounger = isYounger(p, path);\n  var pAbove = isAbove(p, path);\n\n  if (type === 'insert_node') {\n    if (pEqual || pYounger || pAbove) {\n      path = increment(path, 1, pIndex);\n    }\n  }\n\n  if (type === 'remove_node') {\n    if (pYounger) {\n      path = decrement(path, 1, pIndex);\n    } else if (pEqual || pAbove) {\n      path = [];\n    }\n  }\n\n  if (type === 'merge_node') {\n    if (pEqual || pYounger) {\n      path = decrement(path, 1, pIndex);\n    } else if (pAbove) {\n      path = decrement(path, 1, pIndex);\n      path = increment(path, position, pIndex + 1);\n    }\n  }\n\n  if (type === 'split_node') {\n    if (pEqual) {\n      path = [path, increment(path)];\n    } else if (pYounger) {\n      path = increment(path, 1, pIndex);\n    } else if (pAbove) {\n      if (path.get(pIndex + 1) >= position) {\n        path = increment(path, 1, pIndex);\n        path = decrement(path, position, pIndex + 1);\n      }\n    }\n  }\n\n  if (type === 'move_node') {\n    var np = operation.newPath;\n\n    if (isEqual(p, np)) {\n      return List([path]);\n    }\n\n    if (pAbove || pEqual) {\n      // We are comparing something that was moved\n      // The new path is unaffected unless the old path was the left-sibling of an ancestor\n      if (isYounger(p, np) && p.size < np.size) {\n        path = decrement(np, 1, min(np, p) - 1).concat(path.slice(p.size));\n      } else {\n        path = np.concat(path.slice(p.size));\n      }\n    } else {\n      // This is equivalent logic to remove_node for path\n      if (pYounger) {\n        path = decrement(path, 1, pIndex);\n      } // This is the equivalent logic to insert_node for newPath\n\n\n      if (isYounger(np, path) || isEqual(np, path) || isAbove(np, path)) {\n        path = increment(path, 1, np.size - 1);\n      }\n    }\n  }\n\n  var paths = Array.isArray(path) ? path : [path];\n  return List(paths);\n}\n/**\n * Export.\n *\n * @type {Object}\n */\n\n\nvar PathUtils = {\n  compare: compare,\n  create: create$1,\n  crop: crop,\n  decrement: decrement,\n  getAncestors: getAncestors,\n  increment: increment,\n  isAbove: isAbove,\n  isAfter: isAfter,\n  isBefore: isBefore,\n  isEqual: isEqual,\n  isOlder: isOlder,\n  isSibling: isSibling,\n  isYounger: isYounger,\n  lift: lift,\n  drop: drop,\n  max: max,\n  min: min,\n  relate: relate,\n  transform: transform\n};\nvar DEFAULTS$6 = {\n  key: undefined,\n  offset: undefined,\n  path: undefined\n  /**\n   * Point.\n   *\n   * @type {Point}\n   */\n\n};\n\nvar Point = function (_Record) {\n  inherits(Point, _Record);\n\n  function Point() {\n    classCallCheck(this, Point);\n    return possibleConstructorReturn(this, (Point.__proto__ || Object.getPrototypeOf(Point)).apply(this, arguments));\n  }\n\n  createClass(Point, [{\n    key: 'isAfterPoint',\n\n    /**\n     * Check whether the point is after another `point`.\n     *\n     * @return {Boolean}\n     */\n    value: function isAfterPoint(point) {\n      if (this.isUnset) return false;\n      var is$$1 = this.key === point.key && this.offset > point.offset || PathUtils.compare(this.path, point.path) === 1;\n      return is$$1;\n    }\n    /**\n     * Check whether the point is after a `range`.\n     *\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'isAfterRange',\n    value: function isAfterRange(range) {\n      if (this.isUnset) return false;\n      var is$$1 = this.isAfterPoint(range.end);\n      return is$$1;\n    }\n    /**\n     * Check whether the point is at the end of a `range`.\n     *\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'isAtEndOfRange',\n    value: function isAtEndOfRange(range) {\n      if (this.isUnset) return false;\n      var is$$1 = this.equals(range.end);\n      return is$$1;\n    }\n    /**\n     * Check whether the point is at the start of a `range`.\n     *\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'isAtStartOfRange',\n    value: function isAtStartOfRange(range) {\n      if (this.isUnset) return false;\n      var is$$1 = this.equals(range.start);\n      return is$$1;\n    }\n    /**\n     * Check whether the point is before another `point`.\n     *\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'isBeforePoint',\n    value: function isBeforePoint(point) {\n      if (this.isUnset) return false;\n      var is$$1 = this.key === point.key && this.offset < point.offset || PathUtils.compare(this.path, point.path) === -1;\n      return is$$1;\n    }\n    /**\n     * Check whether the point is before a `range`.\n     *\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'isBeforeRange',\n    value: function isBeforeRange(range) {\n      if (this.isUnset) return false;\n      var is$$1 = this.isBeforePoint(range.start);\n      return is$$1;\n    }\n    /**\n     * Check whether the point is inside a `range`.\n     *\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'isInRange',\n    value: function isInRange(range) {\n      if (this.isUnset) return false;\n      var is$$1 = this.equals(range.start) || this.equals(range.end) || this.isAfterPoint(range.start) && this.isBeforePoint(range.end);\n      return is$$1;\n    }\n    /**\n     * Check whether the point is at the end of a `node`.\n     *\n     * @param {Node} node\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'isAtEndOfNode',\n    value: function isAtEndOfNode(node) {\n      if (this.isUnset) return false;\n      var last = node.getLastText();\n      var is$$1 = this.key === last.key && this.offset === last.text.length;\n      return is$$1;\n    }\n    /**\n     * Check whether the point is at the start of a `node`.\n     *\n     * @param {Node} node\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'isAtStartOfNode',\n    value: function isAtStartOfNode(node) {\n      if (this.isUnset) return false; // PERF: Do a check for a `0` offset first since it's quickest.\n\n      if (this.offset !== 0) return false;\n      var first = node.getFirstText();\n      var is$$1 = this.key === first.key;\n      return is$$1;\n    }\n    /**\n     * Check whether the point is in a `node`.\n     *\n     * @param {Node} node\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'isInNode',\n    value: function isInNode(node) {\n      if (this.isUnset) return false;\n      if (node.object === 'text' && node.key === this.key) return true;\n      if (node.hasNode(this.key)) return true;\n      return false;\n    }\n    /**\n     * Move the point's offset backward `n` characters.\n     *\n     * @param {Number} n (optional)\n     * @return {Point}\n     */\n\n  }, {\n    key: 'moveBackward',\n    value: function moveBackward() {\n      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      if (n === 0) return this;\n      if (n < 0) return this.moveForward(-n);\n      var point = this.setOffset(this.offset - n);\n      return point;\n    }\n    /**\n     * Move the point's offset forward `n` characters.\n     *\n     * @param {Number} n (optional)\n     * @return {Point}\n     */\n\n  }, {\n    key: 'moveForward',\n    value: function moveForward() {\n      var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      if (n === 0) return this;\n      if (n < 0) return this.moveBackward(-n);\n      var point = this.setOffset(this.offset + n);\n      return point;\n    }\n    /**\n     * Move the point's anchor point to a new `path` and `offset`.\n     *\n     * Optionally, the `path` can be a key string, or omitted entirely in which\n     * case it would be the offset number.\n     *\n     * @param {List|String|Number} path\n     * @param {Number} offset\n     * @return {Point}\n     */\n\n  }, {\n    key: 'moveTo',\n    value: function moveTo(path) {\n      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var key = this.key;\n\n      if (typeof path === 'number') {\n        offset = path;\n        path = this.path;\n      } else if (typeof path === 'string') {\n        key = path;\n        path = key === this.key ? this.path : null;\n      } else {\n        key = path.equals(this.path) ? this.key : null;\n      }\n\n      var point = this.merge({\n        key: key,\n        path: path,\n        offset: offset\n      });\n      return point;\n    }\n    /**\n     * Move the point's anchor point to the start of a `node`.\n     *\n     * @param {Node} node\n     * @return {Point}\n     */\n\n  }, {\n    key: 'moveToStartOfNode',\n    value: function moveToStartOfNode(node) {\n      var first = node.getFirstText();\n      var point = this.moveTo(first.key, 0);\n      return point;\n    }\n    /**\n     * Move the point's anchor point to the end of a `node`.\n     *\n     * @param {Node} node\n     * @return {Point}\n     */\n\n  }, {\n    key: 'moveToEndOfNode',\n    value: function moveToEndOfNode(node) {\n      var last = node.getLastText();\n      var point = this.moveTo(last.key, last.text.length);\n      return point;\n    }\n    /**\n     * Normalize the point relative to a `node`, ensuring that its key and path\n     * reference a text node, or that it gets unset.\n     *\n     * @param {Node} node\n     * @return {Point}\n     */\n\n  }, {\n    key: 'normalize',\n    value: function normalize(node) {\n      // If both the key and path are null, there's no reference to a node, so\n      // make sure it is entirely unset.\n      if (this.key == null && this.path == null) {\n        return this.setOffset(null);\n      }\n\n      var key = this.key,\n          offset = this.offset,\n          path = this.path; // PERF: this function gets called a lot.\n      // to avoid creating the key -> path lookup table, we attempt to look up by path first.\n\n      var target = path && node.getNode(path);\n\n      if (!target) {\n        target = node.getNode(key);\n\n        if (target) {\n          // There is a misalignment of path and key\n          var _point = this.merge({\n            path: node.getPath(key)\n          });\n\n          return _point;\n        }\n      }\n\n      if (!target) {\n        warning(false, \"A point's `path` or `key` invalid and was reset!\");\n        var text = node.getFirstText();\n        if (!text) return Point.create();\n\n        var _point2 = this.merge({\n          key: text.key,\n          offset: 0,\n          path: node.getPath(text.key)\n        });\n\n        return _point2;\n      }\n\n      if (target.object !== 'text') {\n        warning(false, 'A point should not reference a non-text node!');\n\n        var _text = target.getTextAtOffset(offset);\n\n        var before = target.getOffset(_text.key);\n\n        var _point3 = this.merge({\n          offset: offset - before,\n          key: _text.key,\n          path: node.getPath(_text.key)\n        });\n\n        return _point3;\n      }\n\n      if (target && path && key && key !== target.key) {\n        warning(false, \"A point's `key` did not match its `path`!\"); // TODO: if we look up by path above and it differs by key, do we want to reset it to looking up by key?\n      }\n\n      var point = this.merge({\n        key: target.key,\n        path: path == null ? node.getPath(target.key) : path,\n        offset: offset == null ? 0 : Math.min(offset, target.text.length)\n      });\n      return point;\n    }\n    /**\n     * Set the point's key to a new `key`.\n     *\n     * @param {String} key\n     * @return {Point}\n     */\n\n  }, {\n    key: 'setKey',\n    value: function setKey(key) {\n      if (key != null) {\n        key = KeyUtils.create(key);\n      }\n\n      var point = this.set('key', key);\n      return point;\n    }\n    /**\n     * Set the point's offset to a new `offset`.\n     *\n     * @param {Number} offset\n     * @return {Point}\n     */\n\n  }, {\n    key: 'setOffset',\n    value: function setOffset(offset) {\n      var point = this.set('offset', offset);\n      return point;\n    }\n    /**\n     * Set the point's path to a new `path`.\n     *\n     * @param {List|Array} path\n     * @return {Point}\n     */\n\n  }, {\n    key: 'setPath',\n    value: function setPath(path) {\n      if (path != null) {\n        path = PathUtils.create(path);\n      }\n\n      var point = this.set('path', path);\n      return point;\n    }\n    /**\n     * Return a JSON representation of the point.\n     *\n     * @param {Object} options\n     * @return {Object}\n     */\n\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var object = {\n        object: this.object,\n        key: this.key,\n        offset: this.offset,\n        path: this.path && this.path.toArray()\n      };\n\n      if (!options.preserveKeys) {\n        delete object.key;\n      }\n\n      return object;\n    }\n    /**\n     * Unset the point.\n     *\n     * @return {Point}\n     */\n\n  }, {\n    key: 'unset',\n    value: function unset() {\n      return this.merge({\n        key: null,\n        offset: null,\n        path: null\n      });\n    }\n  }, {\n    key: 'isSet',\n\n    /**\n     * Check whether all properties of the point are set.\n     *\n     * @return {Boolean}\n     */\n    get: function get$$1() {\n      return this.key != null && this.offset != null && this.path != null;\n    }\n    /**\n     * Check whether any property of the point is not set.\n     *\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'isUnset',\n    get: function get$$1() {\n      return !this.isSet;\n    }\n  }], [{\n    key: 'create',\n\n    /**\n     * Create a new `Point` with `attrs`.\n     *\n     * @param {Object|Point} attrs\n     * @return {Point}\n     */\n    value: function create() {\n      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (Point.isPoint(attrs)) {\n        return attrs;\n      }\n\n      if (isPlainObject(attrs)) {\n        return Point.fromJSON(attrs);\n      }\n\n      throw new Error('`Point.create` only accepts objects or points, but you passed it: ' + attrs);\n    }\n    /**\n     * Create a dictionary of settable point properties from `attrs`.\n     *\n     * @param {Object|Point} attrs\n     * @return {Object}\n     */\n\n  }, {\n    key: 'createProperties',\n    value: function createProperties() {\n      var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (Point.isPoint(a)) {\n        return {\n          key: a.key,\n          offset: a.offset,\n          path: a.path\n        };\n      }\n\n      if (isPlainObject(a)) {\n        var p = {};\n        if ('key' in a) p.key = a.key;\n        if ('offset' in a) p.offset = a.offset;\n        if ('path' in a) p.path = PathUtils.create(a.path); // If only a path is set, or only a key is set, ensure that the other is\n        // set to null so that it can be normalized back to the right value.\n        // Otherwise we won't realize that the path and key don't match anymore.\n\n        if ('path' in a && !('key' in a)) p.key = null;\n        if ('key' in a && !('path' in a)) p.path = null;\n        return p;\n      }\n\n      throw new Error('`Point.createProperties` only accepts objects or points, but you passed it: ' + a);\n    }\n    /**\n     * Create a `Point` from a JSON `object`.\n     *\n     * @param {Object} object\n     * @return {Point}\n     */\n\n  }, {\n    key: 'fromJSON',\n    value: function fromJSON(object) {\n      var _object$key = object.key,\n          key = _object$key === undefined ? null : _object$key,\n          _object$offset = object.offset,\n          offset = _object$offset === undefined ? null : _object$offset,\n          _object$path = object.path,\n          path = _object$path === undefined ? null : _object$path;\n      var point = new Point({\n        key: key,\n        offset: offset,\n        path: PathUtils.create(path)\n      });\n      return point;\n    }\n  }]);\n  return Point;\n}(Record(DEFAULTS$6));\n/**\n * Export.\n *\n * @type {Point}\n */\n\n\nvar DEFAULTS$7 = {\n  anchor: undefined,\n  focus: undefined,\n  mark: undefined\n  /**\n   * Decoration.\n   *\n   * @type {Decoration}\n   */\n\n};\n\nvar Decoration = function (_Record) {\n  inherits(Decoration, _Record);\n\n  function Decoration() {\n    classCallCheck(this, Decoration);\n    return possibleConstructorReturn(this, (Decoration.__proto__ || Object.getPrototypeOf(Decoration)).apply(this, arguments));\n  }\n\n  createClass(Decoration, [{\n    key: 'setProperties',\n\n    /**\n     * Set new `properties` on the decoration.\n     *\n     * @param {Object|Range|Selection} properties\n     * @return {Range}\n     */\n    value: function setProperties(properties) {\n      properties = Decoration.createProperties(properties);\n      var _properties = properties,\n          anchor = _properties.anchor,\n          focus = _properties.focus,\n          mark = _properties.mark;\n      var props = {};\n\n      if (anchor) {\n        props.anchor = Point.create(anchor);\n      }\n\n      if (focus) {\n        props.focus = Point.create(focus);\n      }\n\n      if (mark) {\n        props.mark = Mark.create(mark);\n      }\n\n      var decoration = this.merge(props);\n      return decoration;\n    }\n    /**\n     * Return a JSON representation of the decoration.\n     *\n     * @param {Object} options\n     * @return {Object}\n     */\n\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var object = {\n        object: this.object,\n        anchor: this.anchor.toJSON(options),\n        focus: this.focus.toJSON(options),\n        mark: this.mark.toJSON(options)\n      };\n      return object;\n    }\n  }], [{\n    key: 'create',\n\n    /**\n     * Create a new `Decoration` with `attrs`.\n     *\n     * @param {Object|Decoration} attrs\n     * @return {Decoration}\n     */\n    value: function create() {\n      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (Decoration.isDecoration(attrs)) {\n        return attrs;\n      }\n\n      if (Range.isRange(attrs)) {\n        return Decoration.fromJSON(Range.createProperties(attrs));\n      }\n\n      if (isPlainObject(attrs)) {\n        return Decoration.fromJSON(attrs);\n      }\n\n      throw new Error('`Decoration.create` only accepts objects or decorations, but you passed it: ' + attrs);\n    }\n    /**\n     * Create a list of `Ranges` from `elements`.\n     *\n     * @param {Array<Decoration|Object>|List<Decoration|Object>} elements\n     * @return {List<Decoration>}\n     */\n\n  }, {\n    key: 'createList',\n    value: function createList() {\n      var elements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (List.isList(elements) || Array.isArray(elements)) {\n        var list = new List(elements.map(Decoration.create));\n        return list;\n      }\n\n      throw new Error('`Decoration.createList` only accepts arrays or lists, but you passed it: ' + elements);\n    }\n    /**\n     * Create a dictionary of settable decoration properties from `attrs`.\n     *\n     * @param {Object|String|Decoration} attrs\n     * @return {Object}\n     */\n\n  }, {\n    key: 'createProperties',\n    value: function createProperties() {\n      var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (Decoration.isDecoration(a)) {\n        return {\n          anchor: Point.createProperties(a.anchor),\n          focus: Point.createProperties(a.focus),\n          mark: Mark.create(a.mark)\n        };\n      }\n\n      if (isPlainObject(a)) {\n        var p = {};\n        if ('anchor' in a) p.anchor = Point.create(a.anchor);\n        if ('focus' in a) p.focus = Point.create(a.focus);\n        if ('mark' in a) p.mark = Mark.create(a.mark);\n        return p;\n      }\n\n      throw new Error('`Decoration.createProperties` only accepts objects or decorations, but you passed it: ' + a);\n    }\n    /**\n     * Create a `Decoration` from a JSON `object`.\n     *\n     * @param {Object} object\n     * @return {Decoration}\n     */\n\n  }, {\n    key: 'fromJSON',\n    value: function fromJSON(object) {\n      var anchor = object.anchor,\n          focus = object.focus,\n          mark = object.mark;\n\n      if (!mark) {\n        throw new Error('Decorations must be created with a `mark`, but you passed: ' + JSON.stringify(object));\n      }\n\n      var decoration = new Decoration({\n        anchor: Point.fromJSON(anchor || {}),\n        focus: Point.fromJSON(focus || {}),\n        mark: Mark.fromJSON(mark)\n      });\n      return decoration;\n    }\n  }]);\n  return Decoration;\n}(Record(DEFAULTS$7));\n/**\n * Export.\n *\n * @type {Decoration}\n */\n\n/**\n * Slate-specific object types.\n *\n * @type {Object}\n */\n\n\nvar TYPES = {\n  block: '@@__SLATE_BLOCK__@@',\n  change: '@@__SLATE_CHANGE__@@',\n  decoration: '@@__SLATE_DECORATION__@@',\n  document: '@@__SLATE_DOCUMENT__@@',\n  editor: '@@__SLATE_EDITOR__@@',\n  inline: '@@__SLATE_INLINE__@@',\n  mark: '@@__SLATE_MARK__@@',\n  operation: '@@__SLATE_OPERATION__@@',\n  point: '@@__SLATE_POINT__@@',\n  range: '@@__SLATE_RANGE__@@',\n  selection: '@@__SLATE_SELECTION__@@',\n  text: '@@__SLATE_TEXT__@@',\n  value: '@@__SLATE_VALUE__@@'\n  /**\n   * Determine whether a `value` is of `type`.\n   *\n   * @param {string} type\n   * @param {any} value\n   * @return {boolean}\n   */\n\n};\n\nfunction isObject(type, value) {\n  return !!(value && value[TYPES[type]]);\n}\n\nvar DEFAULTS$8 = {\n  anchor: undefined,\n  focus: undefined\n  /**\n   * Range.\n   *\n   * @type {Range}\n   */\n\n};\n\nvar Range = function (_Record) {\n  inherits(Range, _Record);\n\n  function Range() {\n    classCallCheck(this, Range);\n    return possibleConstructorReturn(this, (Range.__proto__ || Object.getPrototypeOf(Range)).apply(this, arguments));\n  }\n\n  createClass(Range, [{\n    key: 'toJSON',\n\n    /**\n     * Return a JSON representation of the range.\n     *\n     * @param {Object} options\n     * @return {Object}\n     */\n    value: function toJSON() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var object = {\n        object: this.object,\n        anchor: this.anchor.toJSON(options),\n        focus: this.focus.toJSON(options)\n      };\n      return object;\n    }\n  }], [{\n    key: 'create',\n\n    /**\n     * Create a new `Range` with `attrs`.\n     *\n     * @param {Object|Range} attrs\n     * @return {Range}\n     */\n    value: function create() {\n      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (Range.isRange(attrs)) {\n        if (attrs.object === 'range') {\n          return attrs;\n        } else {\n          return Range.fromJSON(Range.createProperties(attrs));\n        }\n      }\n\n      if (isPlainObject(attrs)) {\n        return Range.fromJSON(attrs);\n      }\n\n      throw new Error('`Range.create` only accepts objects or ranges, but you passed it: ' + attrs);\n    }\n    /**\n     * Create a list of `Ranges` from `elements`.\n     *\n     * @param {Array<Range|Object>|List<Range|Object>} elements\n     * @return {List<Range>}\n     */\n\n  }, {\n    key: 'createList',\n    value: function createList() {\n      var elements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (List.isList(elements) || Array.isArray(elements)) {\n        var list = new List(elements.map(Range.create));\n        return list;\n      }\n\n      throw new Error('`Range.createList` only accepts arrays or lists, but you passed it: ' + elements);\n    }\n    /**\n     * Create a dictionary of settable range properties from `attrs`.\n     *\n     * @param {Object|String|Range} attrs\n     * @return {Object}\n     */\n\n  }, {\n    key: 'createProperties',\n    value: function createProperties() {\n      var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (Range.isRange(a)) {\n        return {\n          anchor: Point.createProperties(a.anchor),\n          focus: Point.createProperties(a.focus)\n        };\n      }\n\n      if (isPlainObject(a)) {\n        var p = {};\n        if ('anchor' in a) p.anchor = Point.create(a.anchor);\n        if ('focus' in a) p.focus = Point.create(a.focus);\n        return p;\n      }\n\n      throw new Error('`Range.createProperties` only accepts objects, decorations, ranges or selections, but you passed it: ' + a);\n    }\n    /**\n     * Create a `Range` from a JSON `object`.\n     *\n     * @param {Object} object\n     * @return {Range}\n     */\n\n  }, {\n    key: 'fromJSON',\n    value: function fromJSON(object) {\n      var anchor = object.anchor,\n          focus = object.focus;\n      var range = new Range({\n        anchor: Point.fromJSON(anchor || {}),\n        focus: Point.fromJSON(focus || {})\n      });\n      return range;\n    }\n    /**\n     * Check if a `value` is a `Range`, or is range-like.\n     *\n     * @param {Any} value\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'isRange',\n    value: function isRange(value) {\n      return isObject('range', value) || Decoration.isDecoration(value) || Selection.isSelection(value);\n    }\n  }]);\n  return Range;\n}(Record(DEFAULTS$8));\n/**\n * Export.\n *\n * @type {Range}\n */\n\n\nvar DEFAULTS$9 = {\n  anchor: undefined,\n  focus: undefined,\n  isFocused: undefined,\n  marks: undefined\n  /**\n   * Selection.\n   *\n   * @type {Selection}\n   */\n\n};\n\nvar Selection = function (_Record) {\n  inherits(Selection, _Record);\n\n  function Selection() {\n    classCallCheck(this, Selection);\n    return possibleConstructorReturn(this, (Selection.__proto__ || Object.getPrototypeOf(Selection)).apply(this, arguments));\n  }\n\n  createClass(Selection, [{\n    key: 'setIsFocused',\n\n    /**\n     * Set the `isFocused` property to a new `value`.\n     *\n     * @param {Boolean} value\n     * @return {Selection}\n     */\n    value: function setIsFocused(value) {\n      var selection = this.set('isFocused', value);\n      return selection;\n    }\n    /**\n     * Set the `marks` property to a new set of `marks`.\n     *\n     * @param {Set} marks\n     * @return {Selection}\n     */\n\n  }, {\n    key: 'setMarks',\n    value: function setMarks(marks) {\n      var selection = this.set('marks', marks);\n      return selection;\n    }\n    /**\n     * Set new `properties` on the selection.\n     *\n     * @param {Object|Range|Selection} properties\n     * @return {Range}\n     */\n\n  }, {\n    key: 'setProperties',\n    value: function setProperties(properties) {\n      properties = Selection.createProperties(properties);\n      var _properties = properties,\n          anchor = _properties.anchor,\n          focus = _properties.focus,\n          props = objectWithoutProperties(_properties, ['anchor', 'focus']);\n\n      if (anchor) {\n        props.anchor = Point.create(anchor);\n      }\n\n      if (focus) {\n        props.focus = Point.create(focus);\n      }\n\n      var selection = this.merge(props);\n      return selection;\n    }\n    /**\n     * Return a JSON representation of the selection.\n     *\n     * @param {Object} options\n     * @return {Object}\n     */\n\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var object = {\n        object: this.object,\n        anchor: this.anchor.toJSON(options),\n        focus: this.focus.toJSON(options),\n        isFocused: this.isFocused,\n        marks: this.marks == null ? null : this.marks.toArray().map(function (m) {\n          return m.toJSON();\n        })\n      };\n      return object;\n    }\n  }, {\n    key: 'isBlurred',\n\n    /**\n     * Check whether the selection is blurred.\n     *\n     * @return {Boolean}\n     */\n    get: function get$$1() {\n      return !this.isFocused;\n    }\n  }], [{\n    key: 'create',\n\n    /**\n     * Create a new `Selection` with `attrs`.\n     *\n     * @param {Object|Selection} attrs\n     * @return {Selection}\n     */\n    value: function create() {\n      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (Selection.isSelection(attrs)) {\n        return attrs;\n      }\n\n      if (Range.isRange(attrs)) {\n        return Selection.fromJSON(Range.createProperties(attrs));\n      }\n\n      if (isPlainObject(attrs)) {\n        return Selection.fromJSON(attrs);\n      }\n\n      throw new Error('`Selection.create` only accepts objects, ranges or selections, but you passed it: ' + attrs);\n    }\n    /**\n     * Create a dictionary of settable selection properties from `attrs`.\n     *\n     * @param {Object|String|Selection} attrs\n     * @return {Object}\n     */\n\n  }, {\n    key: 'createProperties',\n    value: function createProperties() {\n      var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (Selection.isSelection(a)) {\n        return {\n          anchor: Point.createProperties(a.anchor),\n          focus: Point.createProperties(a.focus),\n          isFocused: a.isFocused,\n          marks: a.marks\n        };\n      }\n\n      if (Range.isRange(a)) {\n        return {\n          anchor: Point.createProperties(a.anchor),\n          focus: Point.createProperties(a.focus)\n        };\n      }\n\n      if (isPlainObject(a)) {\n        var p = {};\n        if ('anchor' in a) p.anchor = Point.create(a.anchor);\n        if ('focus' in a) p.focus = Point.create(a.focus);\n        if ('isFocused' in a) p.isFocused = a.isFocused;\n        if ('marks' in a) p.marks = a.marks == null ? null : Mark.createSet(a.marks);\n        return p;\n      }\n\n      throw new Error('`Selection.createProperties` only accepts objects, ranges or selections, but you passed it: ' + a);\n    }\n    /**\n     * Create a `Selection` from a JSON `object`.\n     *\n     * @param {Object} object\n     * @return {Selection}\n     */\n\n  }, {\n    key: 'fromJSON',\n    value: function fromJSON(object) {\n      var anchor = object.anchor,\n          focus = object.focus,\n          _object$isFocused = object.isFocused,\n          isFocused = _object$isFocused === undefined ? false : _object$isFocused,\n          _object$marks = object.marks,\n          marks = _object$marks === undefined ? null : _object$marks;\n      var selection = new Selection({\n        anchor: Point.fromJSON(anchor || {}),\n        focus: Point.fromJSON(focus || {}),\n        isFocused: isFocused,\n        marks: marks == null ? null : new Set(marks.map(Mark.fromJSON))\n      });\n      return selection;\n    }\n  }]);\n  return Selection;\n}(Record(DEFAULTS$9));\n/**\n * Export.\n *\n * @type {Selection}\n */\n\n\nvar DEFAULTS$10 = {\n  data: undefined,\n  decorations: undefined,\n  document: undefined,\n  selection: undefined\n  /**\n   * Value.\n   *\n   * @type {Value}\n   */\n\n};\n\nvar Value = function (_Record) {\n  inherits(Value, _Record);\n\n  function Value() {\n    classCallCheck(this, Value);\n    return possibleConstructorReturn(this, (Value.__proto__ || Object.getPrototypeOf(Value)).apply(this, arguments));\n  }\n\n  createClass(Value, [{\n    key: 'addMark',\n\n    /**\n     * Add mark to text at `offset` and `length` in node by `path`.\n     *\n     * @param {List|String} path\n     * @param {Number} offset\n     * @param {Number} length\n     * @param {Mark} mark\n     * @return {Value}\n     */\n    value: function addMark(path, offset, length, mark) {\n      var value = this;\n      var _value = value,\n          document = _value.document;\n      document = document.addMark(path, offset, length, mark);\n      value = this.set('document', document);\n      return value;\n    }\n    /**\n     * Insert a `node`.\n     *\n     * @param {List|String} path\n     * @param {Node} node\n     * @return {Value}\n     */\n\n  }, {\n    key: 'insertNode',\n    value: function insertNode(path, node) {\n      var value = this;\n      var _value2 = value,\n          document = _value2.document;\n      document = document.insertNode(path, node);\n      value = value.set('document', document);\n      value = value.mapRanges(function (range) {\n        return range.updatePoints(function (point) {\n          return point.setPath(null);\n        });\n      });\n      return value;\n    }\n    /**\n     * Insert `text` at `offset` in node by `path`.\n     *\n     * @param {List|String} path\n     * @param {Number} offset\n     * @param {String} text\n     * @param {Set} marks\n     * @return {Value}\n     */\n\n  }, {\n    key: 'insertText',\n    value: function insertText(path, offset, text, marks) {\n      var value = this;\n      var _value3 = value,\n          document = _value3.document;\n      var node = document.assertNode(path);\n      document = document.insertText(path, offset, text, marks);\n      value = value.set('document', document);\n      value = value.mapRanges(function (range) {\n        return range.updatePoints(function (point) {\n          return point.key === node.key && point.offset >= offset ? point.setOffset(point.offset + text.length) : point;\n        });\n      });\n      return value;\n    }\n    /**\n     * Merge a node backwards its previous sibling.\n     *\n     * @param {List|Key} path\n     * @return {Value}\n     */\n\n  }, {\n    key: 'mergeNode',\n    value: function mergeNode(path) {\n      var value = this;\n      var _value4 = value,\n          document = _value4.document;\n      var newDocument = document.mergeNode(path);\n      path = document.resolvePath(path);\n      var withPath = PathUtils.decrement(path);\n      var one = document.getNode(withPath);\n      var two = document.getNode(path);\n      value = value.set('document', newDocument);\n      value = value.mapRanges(function (range) {\n        if (two.object === 'text') {\n          var max = one.text.length;\n\n          if (range.anchor.key === two.key) {\n            range = range.moveAnchorTo(one.key, max + range.anchor.offset);\n          }\n\n          if (range.focus.key === two.key) {\n            range = range.moveFocusTo(one.key, max + range.focus.offset);\n          }\n        }\n\n        range = range.updatePoints(function (point) {\n          return point.setPath(null);\n        });\n        return range;\n      });\n      return value;\n    }\n    /**\n     * Move a node by `path` to `newPath`.\n     *\n     * A `newIndex` can be provided when move nodes by `key`, to account for not\n     * being able to have a key for a location in the tree that doesn't exist yet.\n     *\n     * @param {List|Key} path\n     * @param {List|Key} newPath\n     * @param {Number} newIndex\n     * @return {Value}\n     */\n\n  }, {\n    key: 'moveNode',\n    value: function moveNode(path, newPath) {\n      var newIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var value = this;\n      var _value5 = value,\n          document = _value5.document;\n      document = document.moveNode(path, newPath, newIndex);\n      value = value.set('document', document);\n      value = value.mapRanges(function (range) {\n        return range.updatePoints(function (point) {\n          return point.setPath(null);\n        });\n      });\n      return value;\n    }\n    /**\n     * Remove mark from text at `offset` and `length` in node.\n     *\n     * @param {List|String} path\n     * @param {Number} offset\n     * @param {Number} length\n     * @param {Mark} mark\n     * @return {Value}\n     */\n\n  }, {\n    key: 'removeMark',\n    value: function removeMark(path, offset, length, mark) {\n      var value = this;\n      var _value6 = value,\n          document = _value6.document;\n      document = document.removeMark(path, offset, length, mark);\n      value = this.set('document', document);\n      return value;\n    }\n    /**\n     * Remove a node by `path`.\n     *\n     * @param {List|String} path\n     * @return {Value}\n     */\n\n  }, {\n    key: 'removeNode',\n    value: function removeNode(path) {\n      var value = this;\n      var _value7 = value,\n          document = _value7.document;\n      var node = document.assertNode(path);\n      var first = node.object === 'text' ? node : node.getFirstText() || node;\n      var last = node.object === 'text' ? node : node.getLastText() || node;\n      var prev = document.getPreviousText(first.key);\n      var next = document.getNextText(last.key);\n      document = document.removeNode(path);\n      value = value.set('document', document);\n      value = value.mapRanges(function (range) {\n        var _range = range,\n            start = _range.start,\n            end = _range.end;\n\n        if (node.hasNode(start.key)) {\n          range = prev ? range.moveStartTo(prev.key, prev.text.length) : next ? range.moveStartTo(next.key, 0) : range.unset();\n        }\n\n        if (node.hasNode(end.key)) {\n          range = prev ? range.moveEndTo(prev.key, prev.text.length) : next ? range.moveEndTo(next.key, 0) : range.unset();\n        }\n\n        range = range.updatePoints(function (point) {\n          return point.setPath(null);\n        });\n        return range;\n      });\n      return value;\n    }\n    /**\n     * Remove `text` at `offset` in node by `path`.\n     *\n     * @param {List|Key} path\n     * @param {Number} offset\n     * @param {String} text\n     * @return {Value}\n     */\n\n  }, {\n    key: 'removeText',\n    value: function removeText(path, offset, text) {\n      var value = this;\n      var _value8 = value,\n          document = _value8.document;\n      var node = document.assertNode(path);\n      document = document.removeText(path, offset, text);\n      value = value.set('document', document);\n      var length = text.length;\n      var start = offset;\n      var end = offset + length;\n      value = value.mapRanges(function (range) {\n        return range.updatePoints(function (point) {\n          if (point.key !== node.key) {\n            return point;\n          }\n\n          if (point.offset >= end) {\n            return point.setOffset(point.offset - length);\n          }\n\n          if (point.offset > start) {\n            return point.setOffset(start);\n          }\n\n          return point;\n        });\n      });\n      return value;\n    }\n    /**\n     * Set `properties` on a node.\n     *\n     * @param {List|String} path\n     * @param {Object} properties\n     * @return {Value}\n     */\n\n  }, {\n    key: 'setNode',\n    value: function setNode(path, properties) {\n      var value = this;\n      var _value9 = value,\n          document = _value9.document;\n      document = document.setNode(path, properties);\n      value = value.set('document', document);\n      return value;\n    }\n    /**\n     * Set `properties` on `mark` on text at `offset` and `length` in node.\n     *\n     * @param {List|String} path\n     * @param {Number} offset\n     * @param {Number} length\n     * @param {Mark} mark\n     * @param {Object} properties\n     * @return {Value}\n     */\n\n  }, {\n    key: 'setMark',\n    value: function setMark(path, offset, length, mark, properties) {\n      var value = this;\n      var _value10 = value,\n          document = _value10.document;\n      document = document.setMark(path, offset, length, mark, properties);\n      value = value.set('document', document);\n      return value;\n    }\n    /**\n     * Set `properties` on the value.\n     *\n     * @param {Object} properties\n     * @return {Value}\n     */\n\n  }, {\n    key: 'setProperties',\n    value: function setProperties(properties) {\n      var value = this;\n      var _value11 = value,\n          document = _value11.document;\n      var data = properties.data,\n          decorations = properties.decorations;\n      var props = {};\n\n      if (data) {\n        props.data = data;\n      }\n\n      if (decorations) {\n        props.decorations = decorations.map(function (d) {\n          return d.isSet ? d : document.resolveDecoration(d);\n        });\n      }\n\n      value = value.merge(props);\n      return value;\n    }\n    /**\n     * Set `properties` on the selection.\n     *\n     * @param {Value} value\n     * @param {Operation} operation\n     * @return {Value}\n     */\n\n  }, {\n    key: 'setSelection',\n    value: function setSelection(properties) {\n      var value = this;\n      var _value12 = value,\n          document = _value12.document,\n          selection = _value12.selection;\n      var next = selection.setProperties(properties);\n      selection = document.resolveSelection(next);\n      value = value.set('selection', selection);\n      return value;\n    }\n    /**\n     * Split a node by `path` at `position` with optional `properties` to apply\n     * to the newly split node.\n     *\n     * @param {List|String} path\n     * @param {Number} position\n     * @param {Object} properties\n     * @return {Value}\n     */\n\n  }, {\n    key: 'splitNode',\n    value: function splitNode(path, position, properties) {\n      var value = this;\n      var _value13 = value,\n          document = _value13.document;\n      var newDocument = document.splitNode(path, position, properties);\n      var node = document.assertNode(path);\n      value = value.set('document', newDocument);\n      value = value.mapRanges(function (range) {\n        var next = newDocument.getNextText(node.key);\n        var _range2 = range,\n            start = _range2.start,\n            end = _range2.end; // If the start was after the split, move it to the next node.\n\n        if (node.key === start.key && position <= start.offset) {\n          range = range.moveStartTo(next.key, start.offset - position);\n        } // If the end was after the split, move it to the next node.\n\n\n        if (node.key === end.key && position <= end.offset) {\n          range = range.moveEndTo(next.key, end.offset - position);\n        }\n\n        range = range.updatePoints(function (point) {\n          return point.setPath(null);\n        });\n        return range;\n      });\n      return value;\n    }\n    /**\n     * Map all range objects to apply adjustments with an `iterator`.\n     *\n     * @param {Function} iterator\n     * @return {Value}\n     */\n\n  }, {\n    key: 'mapRanges',\n    value: function mapRanges(iterator) {\n      var value = this;\n      var _value14 = value,\n          document = _value14.document,\n          selection = _value14.selection,\n          decorations = _value14.decorations;\n      var sel = selection.isSet ? iterator(selection) : selection;\n      if (!sel) sel = selection.unset();\n      if (sel !== selection) sel = document.createSelection(sel);\n      value = value.set('selection', sel);\n      var decs = decorations.map(function (decoration) {\n        var n = decoration.isSet ? iterator(decoration) : decoration;\n        if (n && n !== decoration) n = document.createDecoration(n);\n        return n;\n      });\n      decs = decs.filter(function (decoration) {\n        return !!decoration;\n      });\n      value = value.set('decorations', decs);\n      return value;\n    }\n    /**\n     * Return a JSON representation of the value.\n     *\n     * @param {Object} options\n     * @return {Object}\n     */\n\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var object = {\n        object: this.object,\n        document: this.document.toJSON(options)\n      };\n\n      if (options.preserveData) {\n        object.data = this.data.toJSON(options);\n      }\n\n      if (options.preserveDecorations) {\n        object.decorations = this.decorations.toArray().map(function (d) {\n          return d.toJSON(options);\n        });\n      }\n\n      if (options.preserveSelection) {\n        object.selection = this.selection.toJSON(options);\n      }\n\n      return object;\n    }\n    /**\n     * Deprecated.\n     */\n\n  }, {\n    key: 'change',\n    value: function change() {\n      invariant(false, 'As of Slate 0.42.0, value object are no longer schema-aware, and the `value.change()` method is no longer available. Use the `editor.change()` method on the new `Editor` controller instead.');\n    }\n  }, {\n    key: 'startBlock',\n\n    /**\n     * Get the current start text node's closest block parent.\n     *\n     * @return {Block}\n     */\n    get: function get$$1() {\n      return this.selection.start.key && this.document.getClosestBlock(this.selection.start.key);\n    }\n    /**\n     * Get the current end text node's closest block parent.\n     *\n     * @return {Block}\n     */\n\n  }, {\n    key: 'endBlock',\n    get: function get$$1() {\n      return this.selection.end.key && this.document.getClosestBlock(this.selection.end.key);\n    }\n    /**\n     * Get the current anchor text node's closest block parent.\n     *\n     * @return {Block}\n     */\n\n  }, {\n    key: 'anchorBlock',\n    get: function get$$1() {\n      return this.selection.anchor.key && this.document.getClosestBlock(this.selection.anchor.key);\n    }\n    /**\n     * Get the current focus text node's closest block parent.\n     *\n     * @return {Block}\n     */\n\n  }, {\n    key: 'focusBlock',\n    get: function get$$1() {\n      return this.selection.focus.key && this.document.getClosestBlock(this.selection.focus.key);\n    }\n    /**\n     * Get the current start text node's closest inline parent.\n     *\n     * @return {Inline}\n     */\n\n  }, {\n    key: 'startInline',\n    get: function get$$1() {\n      return this.selection.start.key && this.document.getClosestInline(this.selection.start.key);\n    }\n    /**\n     * Get the current end text node's closest inline parent.\n     *\n     * @return {Inline}\n     */\n\n  }, {\n    key: 'endInline',\n    get: function get$$1() {\n      return this.selection.end.key && this.document.getClosestInline(this.selection.end.key);\n    }\n    /**\n     * Get the current anchor text node's closest inline parent.\n     *\n     * @return {Inline}\n     */\n\n  }, {\n    key: 'anchorInline',\n    get: function get$$1() {\n      return this.selection.anchor.key && this.document.getClosestInline(this.selection.anchor.key);\n    }\n    /**\n     * Get the current focus text node's closest inline parent.\n     *\n     * @return {Inline}\n     */\n\n  }, {\n    key: 'focusInline',\n    get: function get$$1() {\n      return this.selection.focus.key && this.document.getClosestInline(this.selection.focus.key);\n    }\n    /**\n     * Get the current start text node.\n     *\n     * @return {Text}\n     */\n\n  }, {\n    key: 'startText',\n    get: function get$$1() {\n      return this.selection.start.key && this.document.getDescendant(this.selection.start.key);\n    }\n    /**\n     * Get the current end node.\n     *\n     * @return {Text}\n     */\n\n  }, {\n    key: 'endText',\n    get: function get$$1() {\n      return this.selection.end.key && this.document.getDescendant(this.selection.end.key);\n    }\n    /**\n     * Get the current anchor node.\n     *\n     * @return {Text}\n     */\n\n  }, {\n    key: 'anchorText',\n    get: function get$$1() {\n      return this.selection.anchor.key && this.document.getDescendant(this.selection.anchor.key);\n    }\n    /**\n     * Get the current focus node.\n     *\n     * @return {Text}\n     */\n\n  }, {\n    key: 'focusText',\n    get: function get$$1() {\n      return this.selection.focus.key && this.document.getDescendant(this.selection.focus.key);\n    }\n    /**\n     * Get the next block node.\n     *\n     * @return {Block}\n     */\n\n  }, {\n    key: 'nextBlock',\n    get: function get$$1() {\n      return this.selection.end.key && this.document.getNextBlock(this.selection.end.key);\n    }\n    /**\n     * Get the previous block node.\n     *\n     * @return {Block}\n     */\n\n  }, {\n    key: 'previousBlock',\n    get: function get$$1() {\n      return this.selection.start.key && this.document.getPreviousBlock(this.selection.start.key);\n    }\n    /**\n     * Get the next inline node.\n     *\n     * @return {Inline}\n     */\n\n  }, {\n    key: 'nextInline',\n    get: function get$$1() {\n      return this.selection.end.key && this.document.getNextInline(this.selection.end.key);\n    }\n    /**\n     * Get the previous inline node.\n     *\n     * @return {Inline}\n     */\n\n  }, {\n    key: 'previousInline',\n    get: function get$$1() {\n      return this.selection.start.key && this.document.getPreviousInline(this.selection.start.key);\n    }\n    /**\n     * Get the next text node.\n     *\n     * @return {Text}\n     */\n\n  }, {\n    key: 'nextText',\n    get: function get$$1() {\n      return this.selection.end.key && this.document.getNextText(this.selection.end.key);\n    }\n    /**\n     * Get the previous text node.\n     *\n     * @return {Text}\n     */\n\n  }, {\n    key: 'previousText',\n    get: function get$$1() {\n      return this.selection.start.key && this.document.getPreviousText(this.selection.start.key);\n    }\n    /**\n     * Get the marks of the current selection.\n     *\n     * @return {Set<Mark>}\n     */\n\n  }, {\n    key: 'marks',\n    get: function get$$1() {\n      return this.selection.isUnset ? new Set() : this.selection.marks || this.document.getMarksAtRange(this.selection);\n    }\n    /**\n     * Get the active marks of the current selection.\n     *\n     * @return {Set<Mark>}\n     */\n\n  }, {\n    key: 'activeMarks',\n    get: function get$$1() {\n      return this.selection.isUnset ? new Set() : this.selection.marks || this.document.getActiveMarksAtRange(this.selection);\n    }\n    /**\n     * Get the block nodes in the current selection.\n     *\n     * @return {List<Block>}\n     */\n\n  }, {\n    key: 'blocks',\n    get: function get$$1() {\n      return this.selection.isUnset ? new List() : this.document.getLeafBlocksAtRange(this.selection);\n    }\n    /**\n     * Get the fragment of the current selection.\n     *\n     * @return {Document}\n     */\n\n  }, {\n    key: 'fragment',\n    get: function get$$1() {\n      return this.selection.isUnset ? Document.create() : this.document.getFragmentAtRange(this.selection);\n    }\n    /**\n     * Get the bottom-most inline nodes in the current selection.\n     *\n     * @return {List<Inline>}\n     */\n\n  }, {\n    key: 'inlines',\n    get: function get$$1() {\n      return this.selection.isUnset ? new List() : this.document.getLeafInlinesAtRange(this.selection);\n    }\n    /**\n     * Get the text nodes in the current selection.\n     *\n     * @return {List<Text>}\n     */\n\n  }, {\n    key: 'texts',\n    get: function get$$1() {\n      return this.selection.isUnset ? new List() : this.document.getTextsAtRange(this.selection);\n    }\n  }, {\n    key: 'history',\n    get: function get$$1() {\n      invariant(false, 'As of Slate 0.42.0, the `value.history` model no longer exists, and the history is stored in `value.data` instead using plugins.');\n    }\n  }], [{\n    key: 'create',\n\n    /**\n     * Create a new `Value` with `attrs`.\n     *\n     * @param {Object|Value} attrs\n     * @param {Object} options\n     * @return {Value}\n     */\n    value: function create() {\n      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (Value.isValue(attrs)) {\n        return attrs;\n      }\n\n      if (isPlainObject(attrs)) {\n        return Value.fromJSON(attrs, options);\n      }\n\n      throw new Error('`Value.create` only accepts objects or values, but you passed it: ' + attrs);\n    }\n    /**\n     * Create a dictionary of settable value properties from `attrs`.\n     *\n     * @param {Object|Value} attrs\n     * @return {Object}\n     */\n\n  }, {\n    key: 'createProperties',\n    value: function createProperties() {\n      var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (Value.isValue(a)) {\n        return {\n          data: a.data,\n          decorations: a.decorations\n        };\n      }\n\n      if (isPlainObject(a)) {\n        var p = {};\n        if ('data' in a) p.data = Data.create(a.data);\n        if ('decorations' in a) p.decorations = Decoration.createList(a.decorations);\n        return p;\n      }\n\n      throw new Error('`Value.createProperties` only accepts objects or values, but you passed it: ' + a);\n    }\n    /**\n     * Create a `Value` from a JSON `object`.\n     *\n     * @param {Object} object\n     * @param {Object} options\n     *   @property {Boolean} normalize\n     *   @property {Array} plugins\n     * @return {Value}\n     */\n\n  }, {\n    key: 'fromJSON',\n    value: function fromJSON(object) {\n      var _object$data = object.data,\n          data = _object$data === undefined ? {} : _object$data,\n          _object$decorations = object.decorations,\n          decorations = _object$decorations === undefined ? [] : _object$decorations,\n          _object$document = object.document,\n          document = _object$document === undefined ? {} : _object$document,\n          _object$selection = object.selection,\n          selection = _object$selection === undefined ? {} : _object$selection;\n      data = Data.fromJSON(data);\n      document = Document.fromJSON(document);\n      selection = document.createSelection(selection);\n      decorations = List(decorations.map(function (d) {\n        return Decoration.fromJSON(d);\n      }));\n\n      if (selection.isUnset) {\n        var text = document.getFirstText();\n        if (text) selection = selection.moveToStartOfNode(text);\n        selection = document.createSelection(selection);\n      }\n\n      var value = new Value({\n        data: data,\n        decorations: decorations,\n        document: document,\n        selection: selection\n      });\n      return value;\n    }\n  }]);\n  return Value;\n}(Record(DEFAULTS$10));\n/**\n * Export.\n */\n\n\nvar debug = Debug('slate:operation:apply');\n/**\n * Apply an `op` to a `value`.\n *\n * @param {Value} value\n * @param {Object|Operation} op\n * @return {Value} value\n */\n\nfunction applyOperation(value, op) {\n  op = Operation.create(op);\n  var _op = op,\n      type = _op.type;\n  debug(type, op);\n\n  switch (type) {\n    case 'add_mark':\n      {\n        var _op2 = op,\n            path = _op2.path,\n            offset = _op2.offset,\n            length = _op2.length,\n            mark = _op2.mark;\n        var next = value.addMark(path, offset, length, mark);\n        return next;\n      }\n\n    case 'insert_node':\n      {\n        var _op3 = op,\n            _path = _op3.path,\n            node = _op3.node;\n\n        var _next = value.insertNode(_path, node);\n\n        return _next;\n      }\n\n    case 'insert_text':\n      {\n        var _op4 = op,\n            _path2 = _op4.path,\n            _offset = _op4.offset,\n            text = _op4.text,\n            marks = _op4.marks;\n\n        var _next2 = value.insertText(_path2, _offset, text, marks);\n\n        return _next2;\n      }\n\n    case 'merge_node':\n      {\n        var _op5 = op,\n            _path3 = _op5.path;\n\n        var _next3 = value.mergeNode(_path3);\n\n        return _next3;\n      }\n\n    case 'move_node':\n      {\n        var _op6 = op,\n            _path4 = _op6.path,\n            newPath = _op6.newPath;\n\n        if (PathUtils.isEqual(_path4, newPath)) {\n          return value;\n        }\n\n        var _next4 = value.moveNode(_path4, newPath);\n\n        return _next4;\n      }\n\n    case 'remove_mark':\n      {\n        var _op7 = op,\n            _path5 = _op7.path,\n            _offset2 = _op7.offset,\n            _length = _op7.length,\n            _mark = _op7.mark;\n\n        var _next5 = value.removeMark(_path5, _offset2, _length, _mark);\n\n        return _next5;\n      }\n\n    case 'remove_node':\n      {\n        var _op8 = op,\n            _path6 = _op8.path;\n\n        var _next6 = value.removeNode(_path6);\n\n        return _next6;\n      }\n\n    case 'remove_text':\n      {\n        var _op9 = op,\n            _path7 = _op9.path,\n            _offset3 = _op9.offset,\n            _text = _op9.text;\n\n        var _next7 = value.removeText(_path7, _offset3, _text);\n\n        return _next7;\n      }\n\n    case 'set_mark':\n      {\n        var _op10 = op,\n            _path8 = _op10.path,\n            _offset4 = _op10.offset,\n            _length2 = _op10.length,\n            properties = _op10.properties,\n            newProperties = _op10.newProperties;\n\n        var _next8 = value.setMark(_path8, _offset4, _length2, properties, newProperties);\n\n        return _next8;\n      }\n\n    case 'set_node':\n      {\n        var _op11 = op,\n            _path9 = _op11.path,\n            _newProperties = _op11.newProperties;\n\n        var _next9 = value.setNode(_path9, _newProperties);\n\n        return _next9;\n      }\n\n    case 'set_selection':\n      {\n        var _op12 = op,\n            _newProperties2 = _op12.newProperties;\n\n        var _next10 = value.setSelection(_newProperties2);\n\n        return _next10;\n      }\n\n    case 'set_value':\n      {\n        var _op13 = op,\n            _newProperties3 = _op13.newProperties;\n\n        var _next11 = value.setProperties(_newProperties3);\n\n        return _next11;\n      }\n\n    case 'split_node':\n      {\n        var _op14 = op,\n            _path10 = _op14.path,\n            position = _op14.position,\n            _properties = _op14.properties;\n\n        var _next12 = value.splitNode(_path10, position, _properties);\n\n        return _next12;\n      }\n\n    default:\n      {\n        throw new Error('Unknown operation type: \"' + type + '\".');\n      }\n  }\n}\n/**\n * Export.\n *\n * @type {Function}\n */\n\n\nvar debug$1 = Debug('slate:operation:invert');\n/**\n * Invert an `op`.\n *\n * @param {Object} op\n * @return {Object}\n */\n\nfunction invertOperation(op) {\n  op = Operation.create(op);\n  var _op = op,\n      type = _op.type;\n  debug$1(type, op);\n\n  switch (type) {\n    case 'insert_node':\n      {\n        var inverse = op.set('type', 'remove_node');\n        return inverse;\n      }\n\n    case 'remove_node':\n      {\n        var _inverse = op.set('type', 'insert_node');\n\n        return _inverse;\n      }\n\n    case 'move_node':\n      {\n        var _op2 = op,\n            newPath = _op2.newPath,\n            path = _op2.path;\n\n        if (PathUtils.isEqual(newPath, path)) {\n          return op;\n        } // Get the true path that the moved node ended up at\n\n\n        var inversePath = PathUtils.transform(path, op).first(); // Get the true path we are trying to move back to\n        // We transform the right-sibling of the path\n        // This will end up at the operation.path most of the time\n        // But if the newPath is a left-sibling or left-ancestor-sibling, this will account for it\n\n        var transformedSibling = PathUtils.transform(PathUtils.increment(path), op).first();\n\n        var _inverse2 = op.set('path', inversePath).set('newPath', transformedSibling);\n\n        return _inverse2;\n      }\n\n    case 'merge_node':\n      {\n        var _op3 = op,\n            _path = _op3.path;\n\n        var _inversePath = PathUtils.decrement(_path);\n\n        var _inverse3 = op.set('type', 'split_node').set('path', _inversePath);\n\n        return _inverse3;\n      }\n\n    case 'split_node':\n      {\n        var _op4 = op,\n            _path2 = _op4.path;\n\n        var _inversePath2 = PathUtils.increment(_path2);\n\n        var _inverse4 = op.set('type', 'merge_node').set('path', _inversePath2);\n\n        return _inverse4;\n      }\n\n    case 'set_node':\n    case 'set_value':\n    case 'set_selection':\n    case 'set_mark':\n      {\n        var _op5 = op,\n            properties = _op5.properties,\n            newProperties = _op5.newProperties;\n\n        var _inverse5 = op.set('properties', newProperties).set('newProperties', properties);\n\n        return _inverse5;\n      }\n\n    case 'insert_text':\n      {\n        var _inverse6 = op.set('type', 'remove_text');\n\n        return _inverse6;\n      }\n\n    case 'remove_text':\n      {\n        var _inverse7 = op.set('type', 'insert_text');\n\n        return _inverse7;\n      }\n\n    case 'add_mark':\n      {\n        var _inverse8 = op.set('type', 'remove_mark');\n\n        return _inverse8;\n      }\n\n    case 'remove_mark':\n      {\n        var _inverse9 = op.set('type', 'add_mark');\n\n        return _inverse9;\n      }\n\n    default:\n      {\n        throw new Error('Unknown operation type: \"' + type + '\".');\n      }\n  }\n}\n/**\n * Export.\n *\n * @type {Function}\n */\n\n\nvar OPERATION_ATTRIBUTES = {\n  add_mark: ['path', 'offset', 'length', 'mark', 'data'],\n  insert_node: ['path', 'node', 'data'],\n  insert_text: ['path', 'offset', 'text', 'marks', 'data'],\n  merge_node: ['path', 'position', 'properties', 'target', 'data'],\n  move_node: ['path', 'newPath', 'data'],\n  remove_mark: ['path', 'offset', 'length', 'mark', 'data'],\n  remove_node: ['path', 'node', 'data'],\n  remove_text: ['path', 'offset', 'text', 'marks', 'data'],\n  set_mark: ['path', 'offset', 'length', 'properties', 'newProperties', 'data'],\n  set_node: ['path', 'properties', 'newProperties', 'data'],\n  set_selection: ['properties', 'newProperties', 'data'],\n  set_value: ['properties', 'newProperties', 'data'],\n  split_node: ['path', 'position', 'properties', 'target', 'data']\n  /**\n   * Default properties.\n   *\n   * @type {Object}\n   */\n\n};\nvar DEFAULTS$11 = {\n  length: undefined,\n  mark: undefined,\n  marks: undefined,\n  newPath: undefined,\n  node: undefined,\n  offset: undefined,\n  path: undefined,\n  position: undefined,\n  properties: undefined,\n  newProperties: undefined,\n  target: undefined,\n  text: undefined,\n  type: undefined,\n  data: undefined\n  /**\n   * Operation.\n   *\n   * @type {Operation}\n   */\n\n};\n\nvar Operation = function (_Record) {\n  inherits(Operation, _Record);\n\n  function Operation() {\n    classCallCheck(this, Operation);\n    return possibleConstructorReturn(this, (Operation.__proto__ || Object.getPrototypeOf(Operation)).apply(this, arguments));\n  }\n\n  createClass(Operation, [{\n    key: 'apply',\n\n    /**\n     * Apply the operation to a `value`.\n     *\n     * @param {Value} value\n     * @return {Value}\n     */\n    value: function apply(value) {\n      var next = applyOperation(value, this);\n      return next;\n    }\n    /**\n     * Invert the operation.\n     *\n     * @return {Operation}\n     */\n\n  }, {\n    key: 'invert',\n    value: function invert() {\n      var inverted = invertOperation(this);\n      return inverted;\n    }\n    /**\n     * Return a JSON representation of the operation.\n     *\n     * @param {Object} options\n     * @return {Object}\n     */\n\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      var object = this.object,\n          type = this.type;\n      var json = {\n        object: object,\n        type: type\n      };\n      var ATTRIBUTES = OPERATION_ATTRIBUTES[type];\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = ATTRIBUTES[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var key = _step.value;\n          var value = this[key];\n\n          if (key === 'mark' || key === 'marks' || key === 'node' || key === 'path' || key === 'newPath') {\n            value = value.toJSON();\n          }\n\n          if (key === 'properties' && type === 'merge_node') {\n            var v = {};\n            if ('data' in value) v.data = value.data.toJS();\n            if ('type' in value) v.type = value.type;\n            value = v;\n          }\n\n          if ((key === 'properties' || key === 'newProperties') && type === 'set_mark') {\n            var _v = {};\n            if ('data' in value) _v.data = value.data.toJS();\n            if ('type' in value) _v.type = value.type;\n            value = _v;\n          }\n\n          if ((key === 'properties' || key === 'newProperties') && type === 'set_node') {\n            var _v2 = {};\n            if ('data' in value) _v2.data = value.data.toJS();\n            if ('type' in value) _v2.type = value.type;\n            value = _v2;\n          }\n\n          if ((key === 'properties' || key === 'newProperties') && type === 'set_selection') {\n            var _v3 = {};\n            if ('anchor' in value) _v3.anchor = value.anchor.toJSON();\n            if ('focus' in value) _v3.focus = value.focus.toJSON();\n            if ('isFocused' in value) _v3.isFocused = value.isFocused;\n            if ('marks' in value) _v3.marks = value.marks && value.marks.toJSON();\n            value = _v3;\n          }\n\n          if ((key === 'properties' || key === 'newProperties') && type === 'set_value') {\n            var _v4 = {};\n            if ('data' in value) _v4.data = value.data.toJS();\n            if ('decorations' in value) _v4.decorations = value.decorations.toJS();\n            value = _v4;\n          }\n\n          if (key === 'properties' && type === 'split_node') {\n            var _v5 = {};\n            if ('data' in value) _v5.data = value.data.toJS();\n            if ('type' in value) _v5.type = value.type;\n            value = _v5;\n          }\n\n          if (key === 'data') {\n            value = value.toJSON();\n          }\n\n          json[key] = value;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return json;\n    }\n  }], [{\n    key: 'create',\n\n    /**\n     * Create a new `Operation` with `attrs`.\n     *\n     * @param {Object|Array|List|String|Operation} attrs\n     * @return {Operation}\n     */\n    value: function create() {\n      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (Operation.isOperation(attrs)) {\n        return attrs;\n      }\n\n      if (isPlainObject(attrs)) {\n        return Operation.fromJSON(attrs);\n      }\n\n      throw new Error('`Operation.create` only accepts objects or operations, but you passed it: ' + attrs);\n    }\n    /**\n     * Create a list of `Operations` from `elements`.\n     *\n     * @param {Array<Operation|Object>|List<Operation|Object>} elements\n     * @return {List<Operation>}\n     */\n\n  }, {\n    key: 'createList',\n    value: function createList() {\n      var elements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n      if (List.isList(elements) || Array.isArray(elements)) {\n        var list = new List(elements.map(Operation.create));\n        return list;\n      }\n\n      throw new Error('`Operation.createList` only accepts arrays or lists, but you passed it: ' + elements);\n    }\n    /**\n     * Create a `Operation` from a JSON `object`.\n     *\n     * @param {Object|Operation} object\n     * @return {Operation}\n     */\n\n  }, {\n    key: 'fromJSON',\n    value: function fromJSON(object) {\n      if (Operation.isOperation(object)) {\n        return object;\n      }\n\n      var type = object.type;\n      var ATTRIBUTES = OPERATION_ATTRIBUTES[type];\n      var attrs = {\n        type: type\n      };\n\n      if (!ATTRIBUTES) {\n        throw new Error('`Operation.fromJSON` was passed an unrecognized operation type: \"' + type + '\"');\n      }\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = ATTRIBUTES[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var key = _step2.value;\n          var v = object[key]; // Default `data` to an empty object.\n\n          if (key === 'data' && v === undefined) {\n            v = {};\n          }\n\n          if (v === undefined) {\n            throw new Error('`Operation.fromJSON` was passed a \"' + type + '\" operation without the required \"' + key + '\" attribute.');\n          }\n\n          if (key === 'path' || key === 'newPath') {\n            v = PathUtils.create(v);\n          }\n\n          if (key === 'mark') {\n            v = Mark.create(v);\n          }\n\n          if (key === 'marks' && v != null) {\n            v = Mark.createSet(v);\n          }\n\n          if (key === 'node') {\n            v = Node.create(v);\n          }\n\n          if (key === 'properties' && type === 'merge_node') {\n            v = Node.createProperties(v);\n          }\n\n          if ((key === 'properties' || key === 'newProperties') && type === 'set_mark') {\n            v = Mark.createProperties(v);\n          }\n\n          if ((key === 'properties' || key === 'newProperties') && type === 'set_node') {\n            v = Node.createProperties(v);\n          }\n\n          if ((key === 'properties' || key === 'newProperties') && type === 'set_selection') {\n            v = Selection.createProperties(v);\n          }\n\n          if ((key === 'properties' || key === 'newProperties') && type === 'set_value') {\n            v = Value.createProperties(v);\n          }\n\n          if (key === 'properties' && type === 'split_node') {\n            v = Node.createProperties(v);\n          }\n\n          if (key === 'data') {\n            v = Map(v);\n          }\n\n          attrs[key] = v;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      var node = new Operation(attrs);\n      return node;\n    }\n    /**\n     * Check if `any` is a list of operations.\n     *\n     * @param {Any} any\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'isOperationList',\n    value: function isOperationList(any) {\n      return List.isList(any) && any.every(function (item) {\n        return Operation.isOperation(item);\n      });\n    }\n  }]);\n  return Operation;\n}(Record(DEFAULTS$11));\n/**\n * Export.\n *\n * @type {Operation}\n */\n\n\nvar DEFAULTS$12 = {\n  operations: undefined,\n  value: undefined\n  /**\n   * Change.\n   *\n   * @type {Change}\n   */\n\n};\n\nvar Change = function (_Record) {\n  inherits(Change, _Record);\n\n  function Change() {\n    classCallCheck(this, Change);\n    return possibleConstructorReturn(this, (Change.__proto__ || Object.getPrototypeOf(Change)).apply(this, arguments));\n  }\n\n  createClass(Change, [{\n    key: 'toJSON',\n\n    /**\n     * Return a JSON representation of the change.\n     *\n     * @param {Object} options\n     * @return {Object}\n     */\n    value: function toJSON() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var object = {\n        object: this.object,\n        value: this.value.toJSON(options),\n        operations: this.operations.toArray().map(function (o) {\n          return o.toJSON(options);\n        })\n      };\n      return object;\n    }\n  }], [{\n    key: 'create',\n\n    /**\n     * Create a new `Change` with `attrs`.\n     *\n     * @param {Object|Change} attrs\n     * @return {Change}\n     */\n    value: function create() {\n      var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      if (Change.isChange(attrs)) {\n        return attrs;\n      }\n\n      if (isPlainObject(attrs)) {\n        return Change.fromJSON(attrs);\n      }\n\n      throw new Error('`Change.create` only accepts objects or changes, but you passed it: ' + attrs);\n    }\n    /**\n     * Create a `Change` from a JSON `object`.\n     *\n     * @param {Object} object\n     * @return {Change}\n     */\n\n  }, {\n    key: 'fromJSON',\n    value: function fromJSON(object) {\n      var value = object.value,\n          _object$operations = object.operations,\n          operations = _object$operations === undefined ? [] : _object$operations;\n      var change = new Change({\n        value: Value.create(value),\n        operations: Operation.createList(operations)\n      });\n      return change;\n    }\n  }]);\n  return Change;\n}(Record(DEFAULTS$12));\n/**\n * Export.\n *\n * @type {Change}\n */\n\n/**\n * A plugin that adds a set of commands to the editor.\n *\n * @param {Object} commands\n * @return {Object}\n */\n\n\nfunction CommandsPlugin() {\n  var commands = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  /**\n   * On command, if it exists in our list of commands, call it.\n   *\n   * @param {Object} command\n   * @param {Editor} editor\n   * @param {Function} next\n   */\n\n  function onCommand(command, editor, next) {\n    var type = command.type,\n        args = command.args;\n    var fn = commands[type];\n    if (!fn) return next();\n    editor.command.apply(editor, [fn].concat(toConsumableArray(args)));\n  }\n  /**\n   * On construct, register all the commands.\n   *\n   * @param {Editor} editor\n   * @param {Function} next\n   */\n\n\n  function onConstruct(editor, next) {\n    for (var command in commands) {\n      editor.registerCommand(command);\n    }\n\n    return next();\n  }\n  /**\n   * Return the plugin.\n   *\n   * @type {Object}\n   */\n\n\n  return {\n    onCommand: onCommand,\n    onConstruct: onConstruct\n  };\n}\n/**\n * Export.\n *\n * @type {Object}\n */\n\n\nvar SURROGATE_START = 0xd800;\nvar SURROGATE_END = 0xdfff;\n/**\n * A regex to match space characters.\n *\n * @type {RegExp}\n */\n\nvar SPACE = /\\s/;\n/**\n * A regex to match chameleon characters, that count as word characters as long\n * as they are inside of a word.\n *\n * @type {RegExp}\n */\n\nvar CHAMELEON = /['\\u2018\\u2019]/;\n/**\n * A regex that matches punctuation.\n *\n * @type {RegExp}\n */\n\nvar PUNCTUATION = /[\\u0021-\\u0023\\u0025-\\u002A\\u002C-\\u002F\\u003A\\u003B\\u003F\\u0040\\u005B-\\u005D\\u005F\\u007B\\u007D\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E3B\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/;\n/**\n * Is a character `code` in a surrogate character.\n *\n * @param {Number} code\n * @return {Boolean}\n */\n\nfunction isSurrogate(code) {\n  return SURROGATE_START <= code && code <= SURROGATE_END;\n}\n/**\n * Is a character a word character? Needs the `remaining` characters too.\n *\n * @param {String} char\n * @param {String|Void} remaining\n * @return {Boolean}\n */\n\n\nfunction isWord(char, remaining) {\n  if (SPACE.test(char)) return false; // If it's a chameleon character, recurse to see if the next one is or not.\n\n  if (CHAMELEON.test(char)) {\n    var next = remaining.charAt(0);\n    var length = getCharLength(next);\n    next = remaining.slice(0, length);\n    var rest = remaining.slice(length);\n    if (isWord(next, rest)) return true;\n  }\n\n  if (PUNCTUATION.test(char)) return false;\n  return true;\n}\n/**\n * Get the length of a `character`.\n *\n * @param {String} char\n * @return {Number}\n */\n\n\nfunction getCharLength(char) {\n  return isSurrogate(char.charCodeAt(0)) ? 2 : 1;\n}\n/**\n * Get the offset to the end of the first character in `text`.\n *\n * @param {String} text\n * @return {Number}\n */\n\n\nfunction getCharOffset(text) {\n  var char = text.charAt(0);\n  return getCharLength(char);\n}\n/**\n * Get the offset to the end of the character before an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\n\nfunction getCharOffsetBackward(text, offset) {\n  text = text.slice(0, offset);\n  text = reverse(text);\n  return getCharOffset(text);\n}\n/**\n * Get the offset to the end of the character after an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\n\nfunction getCharOffsetForward(text, offset) {\n  text = text.slice(offset);\n  return getCharOffset(text);\n}\n/**\n * Get the offset to the end of the first word in `text`.\n *\n * @param {String} text\n * @return {Number}\n */\n\n\nfunction getWordOffset(text) {\n  var length = 0;\n  var i = 0;\n  var started = false;\n  var char = void 0;\n\n  while (char = text.charAt(i)) {\n    var l = getCharLength(char);\n    char = text.slice(i, i + l);\n    var rest = text.slice(i + l);\n\n    if (isWord(char, rest)) {\n      started = true;\n      length += l;\n    } else if (!started) {\n      length += l;\n    } else {\n      break;\n    }\n\n    i += l;\n  }\n\n  return length;\n}\n/**\n * Get the offset to the end of the word before an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\n\nfunction getWordOffsetBackward(text, offset) {\n  text = text.slice(0, offset);\n  text = reverse(text);\n  var o = getWordOffset(text);\n  return o;\n}\n/**\n * Get the offset to the end of the word after an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\n\nfunction getWordOffsetForward(text, offset) {\n  text = text.slice(offset);\n  var o = getWordOffset(text);\n  return o;\n}\n/**\n * Export.\n *\n * @type {Object}\n */\n\n\nvar TextUtils = {\n  getCharLength: getCharLength,\n  getCharOffset: getCharOffset,\n  getCharOffsetBackward: getCharOffsetBackward,\n  getCharOffsetForward: getCharOffsetForward,\n  getWordOffset: getWordOffset,\n  getWordOffsetBackward: getWordOffsetBackward,\n  getWordOffsetForward: getWordOffsetForward,\n  isSurrogate: isSurrogate,\n  isWord: isWord\n};\n\nfunction deleteExpandedAtRange(editor, range) {\n  if (range.isExpanded) {\n    editor.deleteAtRange(range);\n  }\n\n  var value = editor.value;\n  var document = value.document;\n  var _range = range,\n      start = _range.start,\n      end = _range.end;\n\n  if (document.hasDescendant(start.key)) {\n    range = range.moveToStart();\n  } else {\n    range = range.moveTo(end.key, 0).normalize(document);\n  }\n\n  return range;\n}\n/**\n * Commands.\n *\n * @type {Object}\n */\n\n\nvar Commands$1 = {};\n/**\n * Add a new `mark` to the characters at `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Mixed} mark\n */\n\nCommands$1.addMarkAtRange = function (editor, range, mark) {\n  if (range.isCollapsed) return;\n  var value = editor.value;\n  var document = value.document;\n  var start = range.start,\n      end = range.end;\n  var texts = document.getTextsAtRange(range);\n  editor.withoutNormalizing(function () {\n    texts.forEach(function (node) {\n      var key = node.key;\n      var index = 0;\n      var length = node.text.length;\n      if (key === start.key) index = start.offset;\n      if (key === end.key) length = end.offset;\n      if (key === start.key && key === end.key) length = end.offset - start.offset;\n      editor.addMarkByKey(key, index, length, mark);\n    });\n  });\n};\n/**\n * Add a list of `marks` to the characters at `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Array<Mixed>} mark\n */\n\n\nCommands$1.addMarksAtRange = function (editor, range, marks) {\n  marks.forEach(function (mark) {\n    return editor.addMarkAtRange(range, mark);\n  });\n};\n/**\n * Delete everything in a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n */\n\n\nCommands$1.deleteAtRange = function (editor, range) {\n  // Snapshot the selection, which creates an extra undo save point, so that\n  // when you undo a delete, the expanded selection will be retained.\n  editor.snapshotSelection();\n  var value = editor.value;\n  var start = range.start,\n      end = range.end;\n  var startKey = start.key;\n  var startOffset = start.offset;\n  var endKey = end.key;\n  var endOffset = end.offset;\n  var document = value.document;\n  var isStartVoid = document.hasVoidParent(startKey, editor);\n  var isEndVoid = document.hasVoidParent(endKey, editor);\n  var startBlock = document.getClosestBlock(startKey);\n  var endBlock = document.getClosestBlock(endKey); // Check if we have a \"hanging\" selection case where the even though the\n  // selection extends into the start of the end node, we actually want to\n  // ignore that for UX reasons.\n\n  var isHanging = startOffset === 0 && endOffset === 0 && isStartVoid === false && startKey === startBlock.getFirstText().key && endKey === endBlock.getFirstText().key; // If it's a hanging selection, nudge it back to end in the previous text.\n\n  if (isHanging && isEndVoid) {\n    var prevText = document.getPreviousText(endKey);\n    endKey = prevText.key;\n    endOffset = prevText.text.length;\n    isEndVoid = document.hasVoidParent(endKey, editor);\n  }\n\n  editor.withoutNormalizing(function () {\n    // If the start node is inside a void node, remove the void node and update\n    // the starting point to be right after it, continuously until the start point\n    // is not a void, or until the entire range is handled.\n    while (isStartVoid) {\n      var startVoid = document.getClosestVoid(startKey, editor);\n      var nextText = document.getNextText(startKey);\n      editor.removeNodeByKey(startVoid.key); // If the start and end keys are the same, we're done.\n\n      if (startKey === endKey) return; // If there is no next text node, we're done.\n\n      if (!nextText) return; // Continue...\n\n      document = editor.value.document;\n      startKey = nextText.key;\n      startOffset = 0;\n      isStartVoid = document.hasVoidParent(startKey, editor);\n    } // If the end node is inside a void node, do the same thing but backwards. But\n    // we don't need any aborting checks because if we've gotten this far there\n    // must be a non-void node that will exit the loop.\n\n\n    while (isEndVoid) {\n      var endVoid = document.getClosestVoid(endKey, editor);\n\n      var _prevText = document.getPreviousText(endKey);\n\n      editor.removeNodeByKey(endVoid.key); // Continue...\n\n      document = editor.value.document;\n      endKey = _prevText.key;\n      endOffset = _prevText.text.length;\n      isEndVoid = document.hasVoidParent(endKey, editor);\n    } // If the start and end key are the same, and it was a hanging selection, we\n    // can just remove the entire block.\n\n\n    if (startKey === endKey && isHanging) {\n      editor.removeNodeByKey(startBlock.key);\n      return;\n    } else if (startKey === endKey) {\n      // Otherwise, if it wasn't hanging, we're inside a single text node, so we can\n      // simply remove the text in the range.\n      var index = startOffset;\n      var length = endOffset - startOffset;\n      editor.removeTextByKey(startKey, index, length);\n      return;\n    } else {\n      // Otherwise, we need to recursively remove text and nodes inside the start\n      // block after the start offset and inside the end block before the end\n      // offset. Then remove any blocks that are in between the start and end\n      // blocks. Then finally merge the start and end nodes.\n      startBlock = document.getClosestBlock(startKey);\n      endBlock = document.getClosestBlock(endKey);\n      var startText = document.getNode(startKey);\n      var endText = document.getNode(endKey);\n      var startLength = startText.text.length - startOffset;\n      var endLength = endOffset;\n      var ancestor = document.getCommonAncestor(startKey, endKey);\n      var startChild = ancestor.getFurthestAncestor(startKey);\n      var endChild = ancestor.getFurthestAncestor(endKey);\n      var startParent = document.getParent(startBlock.key);\n      var startParentIndex = startParent.nodes.indexOf(startBlock);\n      var endParentIndex = startParent.nodes.indexOf(endBlock);\n      var child = void 0; // Iterate through all of the nodes in the tree after the start text node\n      // but inside the end child, and remove them.\n\n      child = startText;\n\n      while (child.key !== startChild.key) {\n        var parent = document.getParent(child.key);\n\n        var _index = parent.nodes.indexOf(child);\n\n        var afters = parent.nodes.slice(_index + 1);\n        afters.reverse().forEach(function (node) {\n          editor.removeNodeByKey(node.key);\n        });\n        child = parent;\n      } // Remove all of the middle children.\n\n\n      var startChildIndex = ancestor.nodes.indexOf(startChild);\n      var endChildIndex = ancestor.nodes.indexOf(endChild);\n      var middles = ancestor.nodes.slice(startChildIndex + 1, endChildIndex);\n      middles.reverse().forEach(function (node) {\n        editor.removeNodeByKey(node.key);\n      }); // Remove the nodes before the end text node in the tree.\n\n      child = endText;\n\n      while (child.key !== endChild.key) {\n        var _parent = document.getParent(child.key);\n\n        var _index2 = _parent.nodes.indexOf(child);\n\n        var befores = _parent.nodes.slice(0, _index2);\n\n        befores.reverse().forEach(function (node) {\n          editor.removeNodeByKey(node.key);\n        });\n        child = _parent;\n      } // Remove any overlapping text content from the leaf text nodes.\n\n\n      if (startLength !== 0) {\n        editor.removeTextByKey(startKey, startOffset, startLength);\n      }\n\n      if (endLength !== 0) {\n        editor.removeTextByKey(endKey, 0, endOffset);\n      } // If the start and end blocks aren't the same, move and merge the end block\n      // into the start block.\n\n\n      if (startBlock.key !== endBlock.key) {\n        document = editor.value.document;\n        var lonely = document.getFurthestOnlyChildAncestor(endBlock.key); // Move the end block to be right after the start block.\n\n        if (endParentIndex !== startParentIndex + 1) {\n          editor.moveNodeByKey(endBlock.key, startParent.key, startParentIndex + 1);\n        } // If the selection is hanging, just remove the start block, otherwise\n        // merge the end block into it.\n\n\n        if (isHanging) {\n          editor.removeNodeByKey(startBlock.key);\n        } else {\n          editor.mergeNodeByKey(endBlock.key);\n        } // If nested empty blocks are left over above the end block, remove them.\n\n\n        if (lonely) {\n          editor.removeNodeByKey(lonely.key);\n        }\n      }\n    }\n  });\n};\n/**\n * Delete backward `n` characters at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Number} n (optional)\n */\n\n\nCommands$1.deleteBackwardAtRange = function (editor, range) {\n  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (n === 0) return;\n  var value = editor.value;\n  var document = value.document;\n  var _range2 = range,\n      start = _range2.start,\n      focus = _range2.focus; // If the range is expanded, perform a regular delete instead.\n\n  if (range.isExpanded) {\n    editor.deleteAtRange(range);\n    return;\n  }\n\n  var voidParent = document.getClosestVoid(start.key, editor); // If there is a void parent, delete it.\n\n  if (voidParent) {\n    editor.removeNodeByKey(voidParent.key);\n    return;\n  } // If the range is at the start of the document, abort.\n\n\n  if (start.isAtStartOfNode(document)) {\n    return;\n  }\n\n  var block = document.getClosestBlock(start.key); // PERF: If the closest block is empty, remove it. This is just a shortcut,\n  // since merging it would result in the same outcome.\n\n  if (document.nodes.size !== 1 && block && block.text === '' && block.nodes.size === 1) {\n    editor.removeNodeByKey(block.key);\n    return;\n  } // If the range is at the start of the text node, we need to figure out what\n  // is behind it to know how to delete...\n\n\n  var text = document.getDescendant(start.key);\n\n  if (start.isAtStartOfNode(text)) {\n    var prev = document.getPreviousText(text.key);\n    var inline = document.getClosestInline(text.key); // If the range is at the start of the inline node, and previous text node\n    // is empty, take the text node before that, or \"prevBlock\" would be the\n    // same node as \"block\"\n\n    if (inline && prev.text === '') {\n      prev = document.getPreviousText(prev.key);\n    }\n\n    var prevBlock = document.getClosestBlock(prev.key);\n    var prevVoid = document.getClosestVoid(prev.key, editor); // If the previous text node has a void parent, remove it.\n\n    if (prevVoid) {\n      editor.removeNodeByKey(prevVoid.key);\n      return;\n    } // If we're deleting by one character and the previous text node is not\n    // inside the current block, we need to merge the two blocks together.\n\n\n    if (n === 1 && prevBlock !== block) {\n      range = range.moveAnchorTo(prev.key, prev.text.length);\n      editor.deleteAtRange(range);\n      return;\n    }\n  } // If the focus offset is farther than the number of characters to delete,\n  // just remove the characters backwards inside the current node.\n\n\n  if (n < focus.offset) {\n    range = range.moveFocusBackward(n);\n    editor.deleteAtRange(range);\n    return;\n  } // Otherwise, we need to see how many nodes backwards to go.\n\n\n  var node = text;\n  var offset = 0;\n  var traversed = focus.offset;\n\n  while (n > traversed) {\n    node = document.getPreviousText(node.key);\n    var next = traversed + node.text.length;\n\n    if (n <= next) {\n      offset = next - n;\n      break;\n    } else {\n      traversed = next;\n    }\n  }\n\n  range = range.moveAnchorTo(node.key, offset);\n  editor.deleteAtRange(range);\n};\n/**\n * Delete backward until the character boundary at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n */\n\n\nCommands$1.deleteCharBackwardAtRange = function (editor, range) {\n  if (range.isExpanded) {\n    editor.deleteAtRange(range);\n    return;\n  }\n\n  var value = editor.value;\n  var document = value.document;\n  var start = range.start;\n  var startBlock = document.getClosestBlock(start.key);\n  var offset = startBlock.getOffset(start.key);\n  var o = offset + start.offset;\n  var text = startBlock.text;\n  var n = TextUtils.getCharOffsetBackward(text, o);\n  editor.deleteBackwardAtRange(range, n);\n};\n/**\n * Delete forward until the character boundary at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n */\n\n\nCommands$1.deleteCharForwardAtRange = function (editor, range) {\n  if (range.isExpanded) {\n    editor.deleteAtRange(range);\n    return;\n  }\n\n  var value = editor.value;\n  var document = value.document;\n  var start = range.start;\n  var startBlock = document.getClosestBlock(start.key);\n  var offset = startBlock.getOffset(start.key);\n  var o = offset + start.offset;\n  var text = startBlock.text;\n  var n = TextUtils.getCharOffsetForward(text, o);\n  editor.deleteForwardAtRange(range, n);\n};\n/**\n * Delete forward `n` characters at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Number} n (optional)\n */\n\n\nCommands$1.deleteForwardAtRange = function (editor, range) {\n  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (n === 0) return;\n  var value = editor.value;\n  var document = value.document;\n  var _range3 = range,\n      start = _range3.start,\n      focus = _range3.focus; // If the range is expanded, perform a regular delete instead.\n\n  if (range.isExpanded) {\n    editor.deleteAtRange(range);\n    return;\n  }\n\n  var voidParent = document.getClosestVoid(start.key, editor); // If the node has a void parent, delete it.\n\n  if (voidParent) {\n    editor.removeNodeByKey(voidParent.key);\n    return;\n  }\n\n  var block = document.getClosestBlock(start.key); // If the closest is not void, but empty, remove it\n\n  if (block && !editor.isVoid(block) && block.text === '' && document.nodes.size !== 1) {\n    var nextBlock = document.getNextBlock(block.key);\n    editor.removeNodeByKey(block.key);\n\n    if (nextBlock && nextBlock.key) {\n      editor.moveToStartOfNode(nextBlock);\n    }\n\n    return;\n  } // If the range is at the start of the document, abort.\n\n\n  if (start.isAtEndOfNode(document)) {\n    return;\n  } // If the range is at the start of the text node, we need to figure out what\n  // is behind it to know how to delete...\n\n\n  var text = document.getDescendant(start.key);\n\n  if (start.isAtEndOfNode(text)) {\n    var next = document.getNextText(text.key);\n\n    var _nextBlock = document.getClosestBlock(next.key);\n\n    var nextVoid = document.getClosestVoid(next.key, editor); // If the next text node has a void parent, remove it.\n\n    if (nextVoid) {\n      editor.removeNodeByKey(nextVoid.key);\n      return;\n    } // If we're deleting by one character and the previous text node is not\n    // inside the current block, we need to merge the two blocks together.\n\n\n    if (n === 1 && _nextBlock !== block) {\n      range = range.moveFocusTo(next.key, 0);\n      editor.deleteAtRange(range);\n      return;\n    }\n  } // If the remaining characters to the end of the node is greater than or equal\n  // to the number of characters to delete, just remove the characters forwards\n  // inside the current node.\n\n\n  if (n <= text.text.length - focus.offset) {\n    range = range.moveFocusForward(n);\n    editor.deleteAtRange(range);\n    return;\n  } // Otherwise, we need to see how many nodes forwards to go.\n\n\n  var node = text;\n  var offset = focus.offset;\n  var traversed = text.text.length - focus.offset;\n\n  while (n > traversed) {\n    node = document.getNextText(node.key);\n\n    var _next = traversed + node.text.length;\n\n    if (n <= _next) {\n      offset = n - traversed;\n      break;\n    } else {\n      traversed = _next;\n    }\n  }\n\n  range = range.moveFocusTo(node.key, offset);\n  editor.deleteAtRange(range);\n};\n/**\n * Delete backward until the line boundary at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n */\n\n\nCommands$1.deleteLineBackwardAtRange = function (editor, range) {\n  if (range.isExpanded) {\n    editor.deleteAtRange(range);\n    return;\n  }\n\n  var value = editor.value;\n  var document = value.document;\n  var start = range.start;\n  var startBlock = document.getClosestBlock(start.key);\n  var offset = startBlock.getOffset(start.key);\n  var o = offset + start.offset;\n  editor.deleteBackwardAtRange(range, o);\n};\n/**\n * Delete forward until the line boundary at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n */\n\n\nCommands$1.deleteLineForwardAtRange = function (editor, range) {\n  if (range.isExpanded) {\n    editor.deleteAtRange(range);\n    return;\n  }\n\n  var value = editor.value;\n  var document = value.document;\n  var start = range.start;\n  var startBlock = document.getClosestBlock(start.key);\n  var offset = startBlock.getOffset(start.key);\n  var o = offset + start.offset;\n  editor.deleteForwardAtRange(range, startBlock.text.length - o);\n};\n/**\n * Delete backward until the word boundary at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n */\n\n\nCommands$1.deleteWordBackwardAtRange = function (editor, range) {\n  if (range.isExpanded) {\n    editor.deleteAtRange(range);\n    return;\n  }\n\n  var value = editor.value;\n  var document = value.document;\n  var start = range.start;\n  var startBlock = document.getClosestBlock(start.key);\n  var offset = startBlock.getOffset(start.key);\n  var o = offset + start.offset;\n  var text = startBlock.text;\n  var n = o === 0 ? 1 : TextUtils.getWordOffsetBackward(text, o);\n  editor.deleteBackwardAtRange(range, n);\n};\n/**\n * Delete forward until the word boundary at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n */\n\n\nCommands$1.deleteWordForwardAtRange = function (editor, range) {\n  if (range.isExpanded) {\n    editor.deleteAtRange(range);\n    return;\n  }\n\n  var value = editor.value;\n  var document = value.document;\n  var start = range.start;\n  var startBlock = document.getClosestBlock(start.key);\n  var offset = startBlock.getOffset(start.key);\n  var o = offset + start.offset;\n  var text = startBlock.text;\n  var wordOffset = TextUtils.getWordOffsetForward(text, o);\n  var n = wordOffset === 0 ? 1 : wordOffset;\n  editor.deleteForwardAtRange(range, n);\n};\n/**\n * Insert a `block` node at `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Block|String|Object} block\n */\n\n\nCommands$1.insertBlockAtRange = function (editor, range, block) {\n  range = deleteExpandedAtRange(editor, range);\n  block = Block.create(block);\n  var value = editor.value;\n  var document = value.document;\n  var _range4 = range,\n      start = _range4.start;\n  var startKey = start.key;\n  var startOffset = start.offset;\n  var startBlock = document.getClosestBlock(startKey);\n  var startInline = document.getClosestInline(startKey);\n  var parent = document.getParent(startBlock.key);\n  var index = parent.nodes.indexOf(startBlock);\n\n  if (editor.isVoid(startBlock)) {\n    var extra = start.isAtEndOfNode(startBlock) ? 1 : 0;\n    editor.insertNodeByKey(parent.key, index + extra, block);\n  } else if (!startInline && startBlock.text === '') {\n    editor.insertNodeByKey(parent.key, index + 1, block);\n  } else if (start.isAtStartOfNode(startBlock)) {\n    editor.insertNodeByKey(parent.key, index, block);\n  } else if (start.isAtEndOfNode(startBlock)) {\n    editor.insertNodeByKey(parent.key, index + 1, block);\n  } else {\n    if (startInline && editor.isVoid(startInline)) {\n      var atEnd = start.isAtEndOfNode(startInline);\n      var siblingText = atEnd ? document.getNextText(startKey) : document.getPreviousText(startKey);\n      var splitRange = atEnd ? range.moveToStartOfNode(siblingText) : range.moveToEndOfNode(siblingText);\n      startKey = splitRange.start.key;\n      startOffset = splitRange.start.offset;\n    }\n\n    editor.withoutNormalizing(function () {\n      editor.splitDescendantsByKey(startBlock.key, startKey, startOffset);\n      editor.insertNodeByKey(parent.key, index + 1, block);\n    });\n  }\n};\n/**\n * Insert a `fragment` at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Document} fragment\n */\n\n\nCommands$1.insertFragmentAtRange = function (editor, range, fragment) {\n  editor.withoutNormalizing(function () {\n    range = deleteExpandedAtRange(editor, range); // If the fragment is empty, there's nothing to do after deleting.\n\n    if (!fragment.nodes.size) return; // Regenerate the keys for all of the fragments nodes, so that they're\n    // guaranteed not to collide with the existing keys in the document. Otherwise\n    // they will be rengerated automatically and we won't have an easy way to\n    // reference them.\n\n    fragment = fragment.mapDescendants(function (child) {\n      return child.regenerateKey();\n    }); // Calculate a few things...\n\n    var _range5 = range,\n        start = _range5.start;\n    var value = editor.value;\n    var document = value.document;\n    var startText = document.getDescendant(start.key);\n    var startBlock = document.getClosestBlock(startText.key);\n    var startChild = startBlock.getFurthestAncestor(startText.key);\n    var isAtStart = start.isAtStartOfNode(startBlock);\n    var parent = document.getParent(startBlock.key);\n    var index = parent.nodes.indexOf(startBlock);\n    var blocks = fragment.getBlocks();\n    var firstChild = fragment.nodes.first();\n    var lastChild = fragment.nodes.last();\n    var firstBlock = blocks.first();\n    var lastBlock = blocks.last();\n    var insertionNode = findInsertionNode(fragment, document, startBlock.key); // If the fragment only contains a void block, use `insertBlock` instead.\n\n    if (firstBlock === lastBlock && editor.isVoid(firstBlock)) {\n      editor.insertBlockAtRange(range, firstBlock);\n      return;\n    } // If inserting the entire fragment and it starts or ends with a single\n    // nested block, e.g. a table, we do not merge it with existing blocks.\n\n\n    if (insertionNode === fragment && (firstChild.hasBlockChildren() || lastChild.hasBlockChildren())) {\n      fragment.nodes.reverse().forEach(function (node) {\n        editor.insertBlockAtRange(range, node);\n      });\n      return;\n    } // If the first and last block aren't the same, we need to insert all of the\n    // nodes after the insertion node's first block at the index.\n\n\n    if (firstBlock !== lastBlock) {\n      var lonelyParent = insertionNode.getFurthest(firstBlock.key, function (p) {\n        return p.nodes.size === 1;\n      });\n      var lonelyChild = lonelyParent || firstBlock;\n      var startIndex = parent.nodes.indexOf(startBlock);\n      var excludingLonelyChild = insertionNode.removeNode(lonelyChild.key);\n      excludingLonelyChild.nodes.forEach(function (node, i) {\n        var newIndex = startIndex + i + 1;\n        editor.insertNodeByKey(parent.key, newIndex, node);\n      });\n    } // Check if we need to split the node.\n\n\n    if (start.offset !== 0) {\n      editor.splitDescendantsByKey(startChild.key, start.key, start.offset);\n    } // Update our variables with the new value.\n\n\n    document = editor.value.document;\n    startText = document.getDescendant(start.key);\n    startBlock = document.getClosestBlock(start.key);\n    startChild = startBlock.getFurthestAncestor(startText.key); // If the first and last block aren't the same, we need to move any of the\n    // starting block's children after the split into the last block of the\n    // fragment, which has already been inserted.\n\n    if (firstBlock !== lastBlock) {\n      var nextChild = isAtStart ? startChild : startBlock.getNextSibling(startChild.key);\n      var nextNodes = nextChild ? startBlock.nodes.skipUntil(function (n) {\n        return n.key === nextChild.key;\n      }) : List();\n      var lastIndex = lastBlock.nodes.size;\n      nextNodes.forEach(function (node, i) {\n        var newIndex = lastIndex + i;\n        editor.moveNodeByKey(node.key, lastBlock.key, newIndex);\n      });\n    } // If the starting block is empty, we replace it entirely with the first block\n    // of the fragment, since this leads to a more expected behavior for the user.\n\n\n    if (!editor.isVoid(startBlock) && startBlock.text === '' && !startBlock.findDescendant(function (n) {\n      return editor.isVoid(n);\n    })) {\n      editor.removeNodeByKey(startBlock.key);\n      editor.insertNodeByKey(parent.key, index, firstBlock);\n    } else {\n      // Otherwise, we maintain the starting block, and insert all of the first\n      // block's inline nodes into it at the split point.\n      var inlineChild = startBlock.getFurthestAncestor(startText.key);\n      var inlineIndex = startBlock.nodes.indexOf(inlineChild);\n      firstBlock.nodes.forEach(function (inline, i) {\n        var o = start.offset === 0 ? 0 : 1;\n        var newIndex = inlineIndex + i + o;\n        editor.insertNodeByKey(startBlock.key, newIndex, inline);\n      });\n    }\n  });\n};\n\nvar findInsertionNode = function findInsertionNode(fragment, document, startKey) {\n  var hasSingleNode = function hasSingleNode(object) {\n    if (!object || object.object === 'text') return;\n    return object.nodes.size === 1;\n  };\n\n  var firstNode = function firstNode(object) {\n    return object && object.nodes.first();\n  };\n\n  var node = fragment;\n\n  if (hasSingleNode(fragment)) {\n    var fragmentInner = firstNode(fragment);\n\n    var matches = function matches(documentNode) {\n      return documentNode.type === fragmentInner.type;\n    };\n\n    var documentInner = document.getFurthest(startKey, matches);\n    if (documentInner === document.getParent(startKey)) node = fragmentInner;\n\n    while (hasSingleNode(fragmentInner) && hasSingleNode(documentInner)) {\n      fragmentInner = firstNode(fragmentInner);\n      documentInner = firstNode(documentInner);\n\n      if (fragmentInner.type === documentInner.type) {\n        node = fragmentInner;\n      } else {\n        break;\n      }\n    }\n  }\n\n  return node;\n};\n/**\n * Insert an `inline` node at `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Inline|String|Object} inline\n */\n\n\nCommands$1.insertInlineAtRange = function (editor, range, inline) {\n  inline = Inline.create(inline);\n  editor.withoutNormalizing(function () {\n    range = deleteExpandedAtRange(editor, range);\n    var value = editor.value;\n    var document = value.document;\n    var _range6 = range,\n        start = _range6.start;\n    var parent = document.getParent(start.key);\n    var startText = document.assertDescendant(start.key);\n    var index = parent.nodes.indexOf(startText);\n    if (editor.isVoid(parent)) return;\n    editor.splitNodeByKey(start.key, start.offset);\n    editor.insertNodeByKey(parent.key, index + 1, inline);\n  });\n};\n/**\n * Insert `text` at a `range`, with optional `marks`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n */\n\n\nCommands$1.insertTextAtRange = function (editor, range, text, marks) {\n  range = deleteExpandedAtRange(editor, range);\n  var value = editor.value;\n  var document = value.document;\n  var _range7 = range,\n      start = _range7.start;\n  var offset = start.offset;\n  var parent = document.getParent(start.key);\n\n  if (editor.isVoid(parent)) {\n    return;\n  }\n\n  editor.insertTextByKey(start.key, offset, text, marks);\n};\n/**\n * Remove an existing `mark` to the characters at `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Mark|String} mark (optional)\n */\n\n\nCommands$1.removeMarkAtRange = function (editor, range, mark) {\n  if (range.isCollapsed) return;\n  var value = editor.value;\n  var document = value.document;\n  var texts = document.getTextsAtRange(range);\n  var start = range.start,\n      end = range.end;\n  editor.withoutNormalizing(function () {\n    texts.forEach(function (node) {\n      var key = node.key;\n      var index = 0;\n      var length = node.text.length;\n      if (key === start.key) index = start.offset;\n      if (key === end.key) length = end.offset;\n      if (key === start.key && key === end.key) length = end.offset - start.offset;\n      editor.removeMarkByKey(key, index, length, mark);\n    });\n  });\n};\n/**\n * Set the `properties` of block nodes in a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Object|String} properties\n */\n\n\nCommands$1.setBlocksAtRange = function (editor, range, properties) {\n  var value = editor.value;\n  var document = value.document;\n  var blocks = document.getLeafBlocksAtRange(range);\n  var start = range.start,\n      end = range.end,\n      isCollapsed = range.isCollapsed;\n  var isStartVoid = document.hasVoidParent(start.key, editor);\n  var startBlock = document.getClosestBlock(start.key);\n  var endBlock = document.getClosestBlock(end.key); // Check if we have a \"hanging\" selection case where the even though the\n  // selection extends into the start of the end node, we actually want to\n  // ignore that for UX reasons.\n\n  var isHanging = isCollapsed === false && start.offset === 0 && end.offset === 0 && isStartVoid === false && start.key === startBlock.getFirstText().key && end.key === endBlock.getFirstText().key; // If it's a hanging selection, ignore the last block.\n\n  var sets = isHanging ? blocks.slice(0, -1) : blocks;\n  editor.withoutNormalizing(function () {\n    sets.forEach(function (block) {\n      editor.setNodeByKey(block.key, properties);\n    });\n  });\n};\n/**\n * Set the `properties` of inline nodes in a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Object|String} properties\n */\n\n\nCommands$1.setInlinesAtRange = function (editor, range, properties) {\n  var value = editor.value;\n  var document = value.document;\n  var inlines = document.getLeafInlinesAtRange(range);\n  editor.withoutNormalizing(function () {\n    inlines.forEach(function (inline) {\n      editor.setNodeByKey(inline.key, properties);\n    });\n  });\n};\n/**\n * Split the block nodes at a `range`, to optional `height`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Number} height (optional)\n */\n\n\nCommands$1.splitBlockAtRange = function (editor, range) {\n  var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  range = deleteExpandedAtRange(editor, range);\n  var _range8 = range,\n      start = _range8.start,\n      end = _range8.end;\n  var value = editor.value;\n  var _value = value,\n      document = _value.document;\n  var node = document.assertDescendant(start.key);\n  var parent = document.getClosestBlock(node.key);\n  var h = 0;\n\n  while (parent && parent.object === 'block' && h < height) {\n    node = parent;\n    parent = document.getClosestBlock(parent.key);\n    h++;\n  }\n\n  editor.withoutNormalizing(function () {\n    editor.splitDescendantsByKey(node.key, start.key, start.offset);\n    value = editor.value;\n    document = value.document;\n\n    if (range.isExpanded) {\n      if (range.isBackward) range = range.flip();\n      var nextBlock = document.getNextBlock(node.key);\n      range = range.moveAnchorToStartOfNode(nextBlock);\n      range = range.setFocus(range.focus.setPath(null));\n\n      if (start.key === end.key) {\n        range = range.moveFocusTo(range.anchor.key, end.offset - start.offset);\n      }\n\n      range = document.resolveRange(range);\n      editor.deleteAtRange(range);\n    }\n  });\n};\n/**\n * Split the inline nodes at a `range`, to optional `height`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Number} height (optional)\n */\n\n\nCommands$1.splitInlineAtRange = function (editor, range) {\n  var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;\n  range = deleteExpandedAtRange(editor, range);\n  var _range9 = range,\n      start = _range9.start;\n  var value = editor.value;\n  var document = value.document;\n  var node = document.assertDescendant(start.key);\n  var parent = document.getClosestInline(node.key);\n  var h = 0;\n\n  while (parent && parent.object === 'inline' && h < height) {\n    node = parent;\n    parent = document.getClosestInline(parent.key);\n    h++;\n  }\n\n  editor.splitDescendantsByKey(node.key, start.key, start.offset);\n};\n/**\n * Add or remove a `mark` from the characters at `range`, depending on whether\n * it's already there.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Mixed} mark\n */\n\n\nCommands$1.toggleMarkAtRange = function (editor, range, mark) {\n  if (range.isCollapsed) return;\n  mark = Mark.create(mark);\n  var value = editor.value;\n  var document = value.document;\n  var marks = document.getActiveMarksAtRange(range);\n  var exists = marks.some(function (m) {\n    return m.equals(mark);\n  });\n\n  if (exists) {\n    editor.removeMarkAtRange(range, mark);\n  } else {\n    editor.addMarkAtRange(range, mark);\n  }\n};\n/**\n * Unwrap all of the block nodes in a `range` from a block with `properties`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {String|Object} properties\n */\n\n\nCommands$1.unwrapBlockAtRange = function (editor, range, properties) {\n  properties = Node.createProperties(properties);\n  var value = editor.value;\n  var document = value.document;\n  var blocks = document.getLeafBlocksAtRange(range);\n  var wrappers = blocks.map(function (block) {\n    return document.getClosest(block.key, function (parent) {\n      if (parent.object !== 'block') return false;\n      if (properties.type != null && parent.type !== properties.type) return false;\n      if (properties.data != null && !parent.data.isSuperset(properties.data)) return false;\n      return true;\n    });\n  }).filter(function (exists) {\n    return exists;\n  }).toOrderedSet().toList();\n  editor.withoutNormalizing(function () {\n    wrappers.forEach(function (block) {\n      var first = block.nodes.first();\n      var last = block.nodes.last();\n      var parent = editor.value.document.getParent(block.key);\n      var index = parent.nodes.indexOf(block);\n      var children = block.nodes.filter(function (child) {\n        return blocks.some(function (b) {\n          return child === b || child.hasDescendant(b.key);\n        });\n      });\n      var firstMatch = children.first();\n      var lastMatch = children.last();\n\n      if (first === firstMatch && last === lastMatch) {\n        block.nodes.forEach(function (child, i) {\n          editor.moveNodeByKey(child.key, parent.key, index + i);\n        });\n        editor.removeNodeByKey(block.key);\n      } else if (last === lastMatch) {\n        block.nodes.skipUntil(function (n) {\n          return n === firstMatch;\n        }).forEach(function (child, i) {\n          editor.moveNodeByKey(child.key, parent.key, index + 1 + i);\n        });\n      } else if (first === firstMatch) {\n        block.nodes.takeUntil(function (n) {\n          return n === lastMatch;\n        }).push(lastMatch).forEach(function (child, i) {\n          editor.moveNodeByKey(child.key, parent.key, index + i);\n        });\n      } else {\n        var firstText = firstMatch.getFirstText();\n        editor.splitDescendantsByKey(block.key, firstText.key, 0);\n        document = editor.value.document;\n        children.forEach(function (child, i) {\n          if (i === 0) {\n            var extra = child;\n            child = document.getNextBlock(child.key);\n            editor.removeNodeByKey(extra.key);\n          }\n\n          editor.moveNodeByKey(child.key, parent.key, index + 1 + i);\n        });\n      }\n    });\n  });\n};\n/**\n * Unwrap the inline nodes in a `range` from an inline with `properties`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {String|Object} properties\n */\n\n\nCommands$1.unwrapInlineAtRange = function (editor, range, properties) {\n  properties = Node.createProperties(properties);\n  var value = editor.value;\n  var document = value.document;\n  var texts = document.getTextsAtRange(range);\n  var inlines = texts.map(function (text) {\n    return document.getClosest(text.key, function (parent) {\n      if (parent.object !== 'inline') return false;\n      if (properties.type != null && parent.type !== properties.type) return false;\n      if (properties.data != null && !parent.data.isSuperset(properties.data)) return false;\n      return true;\n    });\n  }).filter(function (exists) {\n    return exists;\n  }).toOrderedSet().toList();\n  editor.withoutNormalizing(function () {\n    inlines.forEach(function (inline) {\n      var parent = editor.value.document.getParent(inline.key);\n      var index = parent.nodes.indexOf(inline);\n      inline.nodes.forEach(function (child, i) {\n        editor.moveNodeByKey(child.key, parent.key, index + i);\n      });\n      editor.removeNodeByKey(inline.key);\n    });\n  });\n};\n/**\n * Wrap all of the blocks in a `range` in a new `block`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Block|Object|String} block\n */\n\n\nCommands$1.wrapBlockAtRange = function (editor, range, block) {\n  block = Block.create(block);\n  block = block.set('nodes', block.nodes.clear());\n  var value = editor.value;\n  var document = value.document;\n  var blocks = document.getLeafBlocksAtRange(range);\n  var firstblock = blocks.first();\n  var lastblock = blocks.last();\n  var parent = void 0,\n      siblings = void 0,\n      index = void 0; // If there is only one block in the selection then we know the parent and\n  // siblings.\n\n  if (blocks.length === 1) {\n    parent = document.getParent(firstblock.key);\n    siblings = blocks;\n  } else {\n    // Determine closest shared parent to all blocks in selection.\n    parent = document.getClosest(firstblock.key, function (p1) {\n      return !!document.getClosest(lastblock.key, function (p2) {\n        return p1 === p2;\n      });\n    });\n  } // If no shared parent could be found then the parent is the document.\n\n\n  if (parent == null) parent = document; // Create a list of direct children siblings of parent that fall in the\n  // selection.\n\n  if (siblings == null) {\n    var indexes = parent.nodes.reduce(function (ind, node, i) {\n      if (node === firstblock || node.hasDescendant(firstblock.key)) ind[0] = i;\n      if (node === lastblock || node.hasDescendant(lastblock.key)) ind[1] = i;\n      return ind;\n    }, []);\n    index = indexes[0];\n    siblings = parent.nodes.slice(indexes[0], indexes[1] + 1);\n  } // Get the index to place the new wrapped node at.\n\n\n  if (index == null) {\n    index = parent.nodes.indexOf(siblings.first());\n  }\n\n  editor.withoutNormalizing(function () {\n    // Inject the new block node into the parent.\n    editor.insertNodeByKey(parent.key, index, block); // Move the sibling nodes into the new block node.\n\n    siblings.forEach(function (node, i) {\n      editor.moveNodeByKey(node.key, block.key, i);\n    });\n  });\n};\n/**\n * Wrap the text and inlines in a `range` in a new `inline`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Inline|Object|String} inline\n */\n\n\nCommands$1.wrapInlineAtRange = function (editor, range, inline) {\n  var value = editor.value;\n  var document = value.document;\n  var start = range.start,\n      end = range.end;\n\n  if (range.isCollapsed) {\n    // Wrapping an inline void\n    var inlineParent = document.getClosestInline(start.key);\n\n    if (!inlineParent) {\n      return;\n    }\n\n    if (!editor.isVoid(inlineParent)) {\n      return;\n    }\n\n    return editor.wrapInlineByKey(inlineParent.key, inline);\n  }\n\n  inline = Inline.create(inline);\n  inline = inline.set('nodes', inline.nodes.clear());\n  var blocks = document.getLeafBlocksAtRange(range);\n  var startBlock = document.getClosestBlock(start.key);\n  var endBlock = document.getClosestBlock(end.key);\n  var startInline = document.getClosestInline(start.key);\n  var endInline = document.getClosestInline(end.key);\n  var startChild = startBlock.getFurthestAncestor(start.key);\n  var endChild = endBlock.getFurthestAncestor(end.key);\n  editor.withoutNormalizing(function () {\n    if (!startInline || startInline !== endInline) {\n      editor.splitDescendantsByKey(endChild.key, end.key, end.offset);\n      editor.splitDescendantsByKey(startChild.key, start.key, start.offset);\n    }\n\n    document = editor.value.document;\n    startBlock = document.getDescendant(startBlock.key);\n    endBlock = document.getDescendant(endBlock.key);\n    startChild = startBlock.getFurthestAncestor(start.key);\n    endChild = endBlock.getFurthestAncestor(end.key);\n    var startIndex = startBlock.nodes.indexOf(startChild);\n    var endIndex = endBlock.nodes.indexOf(endChild);\n\n    if (startInline && startInline === endInline) {\n      var text = startBlock.getTextsAtRange(range).get(0).splitText(start.offset)[1].splitText(end.offset - start.offset)[0];\n      inline = inline.set('nodes', List([text]));\n      editor.insertInlineAtRange(range, inline);\n      var inlinekey = inline.getFirstText().key;\n      var rng = {\n        anchor: {\n          key: inlinekey,\n          offset: 0\n        },\n        focus: {\n          key: inlinekey,\n          offset: end.offset - start.offset\n        },\n        isFocused: true\n      };\n      editor.select(rng);\n    } else if (startBlock === endBlock) {\n      document = editor.value.document;\n      startBlock = document.getClosestBlock(start.key);\n      startChild = startBlock.getFurthestAncestor(start.key);\n      var startInner = document.getNextSibling(startChild.key);\n      var startInnerIndex = startBlock.nodes.indexOf(startInner);\n      var endInner = start.key === end.key ? startInner : startBlock.getFurthestAncestor(end.key);\n      var inlines = startBlock.nodes.skipUntil(function (n) {\n        return n === startInner;\n      }).takeUntil(function (n) {\n        return n === endInner;\n      }).push(endInner);\n      var node = inline.regenerateKey();\n      editor.insertNodeByKey(startBlock.key, startInnerIndex, node);\n      inlines.forEach(function (child, i) {\n        editor.moveNodeByKey(child.key, node.key, i);\n      });\n    } else {\n      var startInlines = startBlock.nodes.slice(startIndex + 1);\n      var endInlines = endBlock.nodes.slice(0, endIndex + 1);\n      var startNode = inline.regenerateKey();\n      var endNode = inline.regenerateKey();\n      editor.insertNodeByKey(startBlock.key, startIndex + 1, startNode);\n      editor.insertNodeByKey(endBlock.key, endIndex, endNode);\n      startInlines.forEach(function (child, i) {\n        editor.moveNodeByKey(child.key, startNode.key, i);\n      });\n      endInlines.forEach(function (child, i) {\n        editor.moveNodeByKey(child.key, endNode.key, i);\n      });\n      blocks.slice(1, -1).forEach(function (block) {\n        var node = inline.regenerateKey();\n        editor.insertNodeByKey(block.key, 0, node);\n        block.nodes.forEach(function (child, i) {\n          editor.moveNodeByKey(child.key, node.key, i);\n        });\n      });\n    }\n  });\n};\n/**\n * Wrap the text in a `range` in a prefix/suffix.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {String} prefix\n * @param {String} suffix (optional)\n */\n\n\nCommands$1.wrapTextAtRange = function (editor, range, prefix) {\n  var suffix = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : prefix;\n  var start = range.start,\n      end = range.end;\n  var startRange = range.moveToStart();\n  var endRange = range.moveToEnd();\n\n  if (start.key === end.key) {\n    endRange = endRange.moveForward(prefix.length);\n  }\n\n  editor.withoutNormalizing(function () {\n    editor.insertTextAtRange(startRange, prefix, []);\n    editor.insertTextAtRange(endRange, suffix, []);\n  });\n};\n/**\n * Export.\n *\n * @type {Object}\n */\n\n\nvar Commands$2 = {};\n/**\n * Add mark to text at `offset` and `length` in node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} offset\n * @param {Number} length\n * @param {Mixed} mark\n */\n\nCommands$2.addMarkByPath = function (editor, path, offset, length, mark) {\n  mark = Mark.create(mark);\n  var value = editor.value;\n  var document = value.document;\n  var node = document.assertNode(path);\n  var leaves = node.getLeaves();\n  var operations = [];\n  var bx = offset;\n  var by = offset + length;\n  var o = 0;\n  leaves.forEach(function (leaf) {\n    var ax = o;\n    var ay = ax + leaf.text.length;\n    o += leaf.text.length; // If the leaf doesn't overlap with the operation, continue on.\n\n    if (ay < bx || by < ax) return; // If the leaf already has the mark, continue on.\n\n    if (leaf.marks.has(mark)) return; // Otherwise, determine which offset and characters overlap.\n\n    var start = Math.max(ax, bx);\n    var end = Math.min(ay, by);\n    operations.push({\n      type: 'add_mark',\n      path: path,\n      offset: start,\n      length: end - start,\n      mark: mark\n    });\n  });\n  operations.forEach(function (op) {\n    return editor.applyOperation(op);\n  });\n};\n/**\n * Insert a `fragment` at `index` in a node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} index\n * @param {Fragment} fragment\n */\n\n\nCommands$2.insertFragmentByPath = function (editor, path, index, fragment) {\n  fragment.nodes.forEach(function (node, i) {\n    editor.insertNodeByPath(path, index + i, node);\n  });\n};\n/**\n * Insert a `node` at `index` in a node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} index\n * @param {Node} node\n */\n\n\nCommands$2.insertNodeByPath = function (editor, path, index, node) {\n  editor.applyOperation({\n    type: 'insert_node',\n    path: path.concat(index),\n    node: node\n  });\n};\n/**\n * Insert `text` at `offset` in node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} offset\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n */\n\n\nCommands$2.insertTextByPath = function (editor, path, offset, text, marks) {\n  var value = editor.value;\n  var decorations = value.decorations,\n      document = value.document;\n  var node = document.assertNode(path);\n  marks = marks || node.getMarksAtIndex(offset);\n  var updated = false;\n  var key = node.key;\n  var decs = decorations.filter(function (dec) {\n    var start = dec.start,\n        end = dec.end,\n        mark = dec.mark;\n    var isAtomic = editor.isAtomic(mark);\n    if (!isAtomic) return true;\n    if (start.key !== key) return true;\n\n    if (start.offset < offset && (end.key !== key || end.offset > offset)) {\n      updated = true;\n      return false;\n    }\n\n    return true;\n  });\n\n  if (updated) {\n    editor.setDecorations(decs);\n  }\n\n  editor.applyOperation({\n    type: 'insert_text',\n    path: path,\n    offset: offset,\n    text: text,\n    marks: marks\n  });\n};\n/**\n * Merge a node by `path` with the previous node.\n *\n * @param {Editor} editor\n * @param {Array} path\n */\n\n\nCommands$2.mergeNodeByPath = function (editor, path) {\n  var value = editor.value;\n  var document = value.document;\n  var original = document.getDescendant(path);\n  var previous = document.getPreviousSibling(path);\n\n  if (!previous) {\n    throw new Error('Unable to merge node with path \"' + path + '\", because it has no previous sibling.');\n  }\n\n  var position = previous.object === 'text' ? previous.text.length : previous.nodes.size;\n  editor.applyOperation({\n    type: 'merge_node',\n    path: path,\n    position: position,\n    // for undos to succeed we only need the type and data because\n    // these are the only properties that get changed in the merge operation\n    properties: {\n      type: original.type,\n      data: original.data\n    },\n    target: null\n  });\n};\n/**\n * Move a node by `path` to a new parent by `newParentPath` and `newIndex`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {String} newParentPath\n * @param {Number} newIndex\n */\n\n\nCommands$2.moveNodeByPath = function (editor, path, newParentPath, newIndex) {\n  // If the operation path and newParentPath are the same,\n  // this should be considered a NOOP\n  if (PathUtils.isEqual(path, newParentPath)) {\n    return editor;\n  }\n\n  var newPath = newParentPath.concat(newIndex);\n\n  if (PathUtils.isEqual(path, newPath)) {\n    return editor;\n  }\n\n  editor.applyOperation({\n    type: 'move_node',\n    path: path,\n    newPath: newPath\n  });\n};\n/**\n * Remove mark from text at `offset` and `length` in node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} offset\n * @param {Number} length\n * @param {Mark} mark\n */\n\n\nCommands$2.removeMarkByPath = function (editor, path, offset, length, mark) {\n  mark = Mark.create(mark);\n  var value = editor.value;\n  var document = value.document;\n  var node = document.assertNode(path);\n  var leaves = node.getLeaves();\n  var operations = [];\n  var bx = offset;\n  var by = offset + length;\n  var o = 0;\n  leaves.forEach(function (leaf) {\n    var ax = o;\n    var ay = ax + leaf.text.length;\n    o += leaf.text.length; // If the leaf doesn't overlap with the operation, continue on.\n\n    if (ay < bx || by < ax) return; // If the leaf already has the mark, continue on.\n\n    if (!leaf.marks.has(mark)) return; // Otherwise, determine which offset and characters overlap.\n\n    var start = Math.max(ax, bx);\n    var end = Math.min(ay, by);\n    operations.push({\n      type: 'remove_mark',\n      path: path,\n      offset: start,\n      length: end - start,\n      mark: mark\n    });\n  });\n  operations.forEach(function (op) {\n    return editor.applyOperation(op);\n  });\n};\n/**\n * Remove all `marks` from node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n */\n\n\nCommands$2.removeAllMarksByPath = function (editor, path) {\n  var state = editor.state;\n  var document = state.document;\n  var node = document.assertNode(path);\n  var texts = node.object === 'text' ? [node] : node.getTextsAsArray();\n  texts.forEach(function (text) {\n    text.getMarksAsArray().forEach(function (mark) {\n      editor.removeMarkByKey(text.key, 0, text.text.length, mark);\n    });\n  });\n};\n/**\n * Remove a node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n */\n\n\nCommands$2.removeNodeByPath = function (editor, path) {\n  var value = editor.value;\n  var document = value.document;\n  var node = document.assertNode(path);\n  editor.applyOperation({\n    type: 'remove_node',\n    path: path,\n    node: node\n  });\n};\n/**\n * Remove text at `offset` and `length` in node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} offset\n * @param {Number} length\n */\n\n\nCommands$2.removeTextByPath = function (editor, path, offset, length) {\n  var value = editor.value;\n  var decorations = value.decorations,\n      document = value.document;\n  var node = document.assertNode(path);\n  var leaves = node.getLeaves();\n  var text = node.text;\n  var updated = false;\n  var key = node.key;\n  var from = offset;\n  var to = offset + length;\n  var decs = decorations.filter(function (dec) {\n    var start = dec.start,\n        end = dec.end,\n        mark = dec.mark;\n    var isAtomic = editor.isAtomic(mark);\n    if (!isAtomic) return true;\n    if (start.key !== key) return true;\n\n    if (start.offset < from && (end.key !== key || end.offset > from)) {\n      updated = true;\n      return false;\n    }\n\n    if (start.offset < to && (end.key !== key || end.offset > to)) {\n      updated = true;\n      return null;\n    }\n\n    return true;\n  });\n\n  if (updated) {\n    editor.setDecorations(decs);\n  }\n\n  var removals = [];\n  var bx = offset;\n  var by = offset + length;\n  var o = 0;\n  leaves.forEach(function (leaf) {\n    var ax = o;\n    var ay = ax + leaf.text.length;\n    o += leaf.text.length; // If the leaf doesn't overlap with the removal, continue on.\n\n    if (ay < bx || by < ax) return; // Otherwise, determine which offset and characters overlap.\n\n    var start = Math.max(ax, bx);\n    var end = Math.min(ay, by);\n    var string = text.slice(start, end);\n    removals.push({\n      type: 'remove_text',\n      path: path,\n      offset: start,\n      text: string,\n      marks: leaf.marks\n    });\n  }); // Apply in reverse order, so subsequent removals don't impact previous ones.\n\n  removals.reverse().forEach(function (op) {\n    return editor.applyOperation(op);\n  });\n};\n/**\n`* Replace a `node` with another `node`\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Object|Node} node\n */\n\n\nCommands$2.replaceNodeByPath = function (editor, path, newNode) {\n  newNode = Node.create(newNode);\n  var index = path.last();\n  var parentPath = PathUtils.lift(path);\n  editor.withoutNormalizing(function () {\n    editor.removeNodeByPath(path);\n    editor.insertNodeByPath(parentPath, index, newNode);\n  });\n};\n/**\n * Replace A Length of Text with another string or text\n * @param {Editor} editor\n * @param {String} key\n * @param {Number} offset\n * @param {Number} length\n * @param {string} text\n * @param {Set<Mark>} marks (optional)\n */\n\n\nCommands$2.replaceTextByPath = function (editor, path, offset, length, text, marks) {\n  var document = editor.value.document;\n  var node = document.assertNode(path);\n\n  if (length + offset > node.text.length) {\n    length = node.text.length - offset;\n  }\n\n  var range = document.createRange({\n    anchor: {\n      path: path,\n      offset: offset\n    },\n    focus: {\n      path: path,\n      offset: offset + length\n    }\n  });\n  var activeMarks = document.getActiveMarksAtRange(range);\n  editor.withoutNormalizing(function () {\n    editor.removeTextByPath(path, offset, length);\n\n    if (!marks) {\n      // Do not use mark at index when marks and activeMarks are both empty\n      marks = activeMarks ? activeMarks : [];\n    } else if (activeMarks) {\n      // Do not use `has` because we may want to reset marks like font-size with\n      // an updated data;\n      activeMarks = activeMarks.filter(function (activeMark) {\n        return !marks.find(function (m) {\n          return activeMark.type === m.type;\n        });\n      });\n      marks = activeMarks.merge(marks);\n    }\n\n    editor.insertTextByPath(path, offset, text, marks);\n  });\n};\n/**\n * Set `newProperties` on mark on text at `offset` and `length` in node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} offset\n * @param {Number} length\n * @param {Object|Mark} properties\n * @param {Object} newProperties\n */\n\n\nCommands$2.setMarkByPath = function (editor, path, offset, length, properties, newProperties) {\n  // we call Mark.create() here because we need the complete previous mark instance\n  properties = Mark.create(properties);\n  newProperties = Mark.createProperties(newProperties);\n  editor.applyOperation({\n    type: 'set_mark',\n    path: path,\n    offset: offset,\n    length: length,\n    properties: properties,\n    newProperties: newProperties\n  });\n};\n/**\n * Set `properties` on a node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Object|String} newProperties\n */\n\n\nCommands$2.setNodeByPath = function (editor, path, newProperties) {\n  var value = editor.value;\n  var document = value.document;\n  var node = document.assertNode(path);\n  newProperties = Node.createProperties(newProperties);\n  var prevProperties = pick(node, Object.keys(newProperties));\n  editor.applyOperation({\n    type: 'set_node',\n    path: path,\n    properties: prevProperties,\n    newProperties: newProperties\n  });\n};\n/**\n * Insert `text` at `offset` in node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n */\n\n\nCommands$2.setTextByPath = function (editor, path, text, marks) {\n  var value = editor.value;\n  var document = value.document;\n  var node = document.assertNode(path);\n  var end = node.text.length;\n  editor.replaceTextByPath(path, 0, end, text, marks);\n};\n/**\n * Split a node by `path` at `position`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} position\n * @param {Object} options\n */\n\n\nCommands$2.splitNodeByPath = function (editor, path, position) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var _options$target = options.target,\n      target = _options$target === undefined ? null : _options$target;\n  var value = editor.value;\n  var document = value.document;\n  var node = document.getDescendant(path);\n  editor.applyOperation({\n    type: 'split_node',\n    path: path,\n    position: position,\n    target: target,\n    properties: {\n      type: node.type,\n      data: node.data\n    }\n  });\n};\n/**\n * Split a node deeply down the tree by `path`, `textPath` and `textOffset`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Array} textPath\n * @param {Number} textOffset\n */\n\n\nCommands$2.splitDescendantsByPath = function (editor, path, textPath, textOffset) {\n  if (path.equals(textPath)) {\n    editor.splitNodeByPath(textPath, textOffset);\n    return;\n  }\n\n  var value = editor.value;\n  var document = value.document;\n  var node = document.assertNode(path);\n  var text = document.assertNode(textPath);\n  var ancestors = document.getAncestors(textPath);\n  var nodes = ancestors.skipUntil(function (a) {\n    return a.key === node.key;\n  }).reverse().unshift(text);\n  var previous = void 0;\n  var index = void 0;\n  editor.withoutNormalizing(function () {\n    nodes.forEach(function (n) {\n      var prevIndex = index == null ? null : index;\n      index = previous ? n.nodes.indexOf(previous) + 1 : textOffset;\n      previous = n;\n      editor.splitNodeByKey(n.key, index, {\n        target: prevIndex\n      });\n    });\n  });\n};\n/**\n * Unwrap content from an inline parent with `properties`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Object|String} properties\n */\n\n\nCommands$2.unwrapInlineByPath = function (editor, path, properties) {\n  var value = editor.value;\n  var document = value.document,\n      selection = value.selection;\n  var node = document.assertNode(path);\n  var first = node.getFirstText();\n  var last = node.getLastText();\n  var range = selection.moveToRangeOfNode(first, last);\n  editor.unwrapInlineAtRange(range, properties);\n};\n/**\n * Unwrap content from a block parent with `properties`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Object|String} properties\n */\n\n\nCommands$2.unwrapBlockByPath = function (editor, path, properties) {\n  var value = editor.value;\n  var document = value.document,\n      selection = value.selection;\n  var node = document.assertNode(path);\n  var first = node.getFirstText();\n  var last = node.getLastText();\n  var range = selection.moveToRangeOfNode(first, last);\n  editor.unwrapBlockAtRange(range, properties);\n};\n/**\n * Unwrap a single node from its parent.\n *\n * If the node is surrounded with siblings, its parent will be\n * split. If the node is the only child, the parent is removed, and\n * simply replaced by the node itself.  Cannot unwrap a root node.\n *\n * @param {Editor} editor\n * @param {Array} path\n */\n\n\nCommands$2.unwrapNodeByPath = function (editor, path) {\n  var value = editor.value;\n  var document = value.document;\n  document.assertNode(path);\n  var parentPath = PathUtils.lift(path);\n  var parent = document.assertNode(parentPath);\n  var index = path.last();\n  var parentIndex = parentPath.last();\n  var grandPath = PathUtils.lift(parentPath);\n  var isFirst = index === 0;\n  var isLast = index === parent.nodes.size - 1;\n  editor.withoutNormalizing(function () {\n    if (parent.nodes.size === 1) {\n      editor.moveNodeByPath(path, grandPath, parentIndex + 1);\n      editor.removeNodeByPath(parentPath);\n    } else if (isFirst) {\n      editor.moveNodeByPath(path, grandPath, parentIndex);\n    } else if (isLast) {\n      editor.moveNodeByPath(path, grandPath, parentIndex + 1);\n    } else {\n      var updatedPath = PathUtils.increment(path, 1, parentPath.size - 1);\n      updatedPath = updatedPath.set(updatedPath.size - 1, 0);\n      editor.splitNodeByPath(parentPath, index);\n      editor.moveNodeByPath(updatedPath, grandPath, parentIndex + 1);\n    }\n  });\n};\n/**\n * Unwrap all of the children of a node, by removing the node and replacing it\n * with the children in the tree.\n *\n * @param {Editor} editor\n * @param {Array} path\n */\n\n\nCommands$2.unwrapChildrenByPath = function (editor, path) {\n  path = PathUtils.create(path);\n  var value = editor.value;\n  var document = value.document;\n  var node = document.assertNode(path);\n  var parentPath = PathUtils.lift(path);\n  var index = path.last();\n  var nodes = node.nodes;\n  editor.withoutNormalizing(function () {\n    nodes.reverse().forEach(function (child, i) {\n      var childIndex = nodes.size - i - 1;\n      var childPath = path.push(childIndex);\n      editor.moveNodeByPath(childPath, parentPath, index + 1);\n    });\n    editor.removeNodeByPath(path);\n  });\n};\n/**\n * Wrap a node in a block with `properties`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Block|Object|String} block\n */\n\n\nCommands$2.wrapBlockByPath = function (editor, path, block) {\n  block = Block.create(block);\n  block = block.set('nodes', block.nodes.clear());\n  var parentPath = PathUtils.lift(path);\n  var index = path.last();\n  var newPath = PathUtils.increment(path);\n  editor.withoutNormalizing(function () {\n    editor.insertNodeByPath(parentPath, index, block);\n    editor.moveNodeByPath(newPath, path, 0);\n  });\n};\n/**\n * Wrap a node in an inline with `properties`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Block|Object|String} inline\n */\n\n\nCommands$2.wrapInlineByPath = function (editor, path, inline) {\n  inline = Inline.create(inline);\n  inline = inline.set('nodes', inline.nodes.clear());\n  var parentPath = PathUtils.lift(path);\n  var index = path.last();\n  var newPath = PathUtils.increment(path);\n  editor.withoutNormalizing(function () {\n    editor.insertNodeByPath(parentPath, index, inline);\n    editor.moveNodeByPath(newPath, path, 0);\n  });\n};\n/**\n * Wrap a node by `path` with `node`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Node|Object} node\n */\n\n\nCommands$2.wrapNodeByPath = function (editor, path, node) {\n  node = Node.create(node);\n\n  if (node.object === 'block') {\n    editor.wrapBlockByPath(path, node);\n  } else if (node.object === 'inline') {\n    editor.wrapInlineByPath(path, node);\n  }\n};\n/**\n * Mix in `*ByKey` variants.\n */\n\n\nvar COMMANDS = ['addMark', 'insertFragment', 'insertNode', 'insertText', 'mergeNode', 'removeAllMarks', 'removeMark', 'removeNode', 'removeText', 'replaceNode', 'replaceText', 'setMark', 'setNode', 'setText', 'splitNode', 'unwrapBlock', 'unwrapChildren', 'unwrapInline', 'unwrapNode', 'wrapBlock', 'wrapInline', 'wrapNode'];\n\nvar _loop = function _loop(method) {\n  Commands$2[method + 'ByKey'] = function (editor, key) {\n    for (var _len3 = arguments.length, args = Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n      args[_key3 - 2] = arguments[_key3];\n    }\n\n    var value = editor.value;\n    var document = value.document;\n    var path = document.assertPath(key);\n    editor[method + 'ByPath'].apply(editor, [path].concat(args));\n  };\n};\n\nvar _iteratorNormalCompletion = true;\nvar _didIteratorError = false;\nvar _iteratorError = undefined;\n\ntry {\n  for (var _iterator = COMMANDS[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n    var method = _step.value;\n\n    _loop(method);\n  } // Moving nodes takes two keys, so it's slightly different.\n\n} catch (err) {\n  _didIteratorError = true;\n  _iteratorError = err;\n} finally {\n  try {\n    if (!_iteratorNormalCompletion && _iterator.return) {\n      _iterator.return();\n    }\n  } finally {\n    if (_didIteratorError) {\n      throw _iteratorError;\n    }\n  }\n}\n\nCommands$2.moveNodeByKey = function (editor, key, newKey) {\n  for (var _len = arguments.length, args = Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    args[_key - 3] = arguments[_key];\n  }\n\n  var value = editor.value;\n  var document = value.document;\n  var path = document.assertPath(key);\n  var newPath = document.assertPath(newKey);\n  editor.moveNodeByPath.apply(editor, [path, newPath].concat(args));\n}; // Splitting descendants takes two keys, so it's slightly different.\n\n\nCommands$2.splitDescendantsByKey = function (editor, key, textKey) {\n  for (var _len2 = arguments.length, args = Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n    args[_key2 - 3] = arguments[_key2];\n  }\n\n  var value = editor.value;\n  var document = value.document;\n  var path = document.assertPath(key);\n  var textPath = document.assertPath(textKey);\n  editor.splitDescendantsByPath.apply(editor, [path, textPath].concat(args));\n};\n/**\n * Export.\n *\n * @type {Object}\n */\n\n\nvar Commands$3 = {};\n/**\n * Save an `operation` into the history.\n *\n * @param {Editor} editor\n * @param {Object} operation\n */\n\nCommands$3.save = function (editor, operation) {\n  var operations = editor.operations,\n      value = editor.value;\n  var data = value.data;\n  var _editor$tmp = editor.tmp,\n      save = _editor$tmp.save,\n      merge = _editor$tmp.merge;\n  if (save === false) return;\n  var undos = data.get('undos') || List();\n  var lastBatch = undos.last();\n  var lastOperation = lastBatch && lastBatch.last(); // If `merge` is non-commital, and this is not the first operation in a new\n  // editor, then merge, otherwise merge based on the last operation.\n\n  if (merge == null) {\n    if (operations.size !== 0) {\n      merge = true;\n    } else {\n      merge = shouldMerge(operation, lastOperation);\n    }\n  } // If the `merge` flag is true, add the operation to the last batch.\n\n\n  if (merge && lastBatch) {\n    var batch = lastBatch.push(operation);\n    undos = undos.pop();\n    undos = undos.push(batch);\n  } else {\n    // Otherwise, create a new batch with the operation.\n    var _batch = List([operation]);\n\n    undos = undos.push(_batch);\n  } // Constrain the history to 100 entries for memory's sake.\n\n\n  if (undos.size > 100) {\n    undos = undos.takeLast(100);\n  } // Clear the redos and update the history.\n\n\n  editor.withoutSaving(function () {\n    var redos = List();\n    var newData = data.set('undos', undos).set('redos', redos);\n    editor.setData(newData);\n  });\n};\n/**\n * Redo to the next value in the history.\n *\n * @param {Editor} editor\n */\n\n\nCommands$3.redo = function (editor) {\n  var value = editor.value;\n  var data = value.data;\n  var redos = data.get('redos') || List();\n  var undos = data.get('undos') || List();\n  var batch = redos.last();\n  if (!batch) return;\n  editor.withoutSaving(function () {\n    editor.withoutNormalizing(function () {\n      // Replay the batch of operations.\n      batch.forEach(function (op) {\n        var _op = op,\n            type = _op.type,\n            properties = _op.properties; // When the operation mutates the selection, omit its `isFocused` value to\n        // prevent the editor focus from changing during redoing.\n\n        if (type === 'set_selection') {\n          op = op.set('properties', omit(properties, 'isFocused'));\n        }\n\n        editor.applyOperation(op);\n      }); // Shift the next value into the undo stack.\n\n      redos = redos.pop();\n      undos = undos.push(batch);\n      var newData = data.set('undos', undos).set('redos', redos);\n      editor.setData(newData);\n    });\n  });\n};\n/**\n * Undo the previous operations in the history.\n *\n * @param {Editor} editor\n */\n\n\nCommands$3.undo = function (editor) {\n  var value = editor.value;\n  var data = value.data;\n  var redos = data.get('redos') || List();\n  var undos = data.get('undos') || List();\n  var batch = undos.last();\n  if (!batch) return;\n  editor.withoutSaving(function () {\n    editor.withoutNormalizing(function () {\n      // Replay the inverse of the previous operations.\n      batch.slice().reverse().map(function (op) {\n        return op.invert();\n      }).forEach(function (inverse) {\n        var _inverse = inverse,\n            type = _inverse.type,\n            properties = _inverse.properties; // When the operation mutates the selection, omit its `isFocused` value to\n        // prevent the editor focus from changing during undoing.\n\n        if (type === 'set_selection') {\n          inverse = inverse.set('properties', omit(properties, 'isFocused'));\n        }\n\n        editor.applyOperation(inverse);\n      }); // Shift the previous operations into the redo stack.\n\n      redos = redos.push(batch);\n      undos = undos.pop();\n      var newData = data.set('undos', undos).set('redos', redos);\n      editor.setData(newData);\n    });\n  });\n};\n/**\n * Apply a series of changes inside a synchronous `fn`, without merging any of\n * the new operations into previous save point in the history.\n *\n * @param {Editor} editor\n * @param {Function} fn\n */\n\n\nCommands$3.withoutMerging = function (editor, fn) {\n  var value = editor.tmp.merge;\n  editor.tmp.merge = false;\n  fn(editor);\n  editor.tmp.merge = value;\n};\n/**\n * Apply a series of changes inside a synchronous `fn`, without saving any of\n * their operations into the history.\n *\n * @param {Editor} editor\n * @param {Function} fn\n */\n\n\nCommands$3.withoutSaving = function (editor, fn) {\n  var value = editor.tmp.save;\n  editor.tmp.save = false;\n  fn(editor);\n  editor.tmp.save = value;\n};\n/**\n * Check whether to merge a new operation `o` into the previous operation `p`.\n *\n * @param {Object} o\n * @param {Object} p\n * @return {Boolean}\n */\n\n\nfunction shouldMerge(o, p) {\n  if (!p) return false;\n  var merge = o.type === 'set_selection' && p.type === 'set_selection' || o.type === 'insert_text' && p.type === 'insert_text' && o.offset === p.offset + p.text.length && o.path.equals(p.path) || o.type === 'remove_text' && p.type === 'remove_text' && o.offset + o.text.length === p.offset && o.path.equals(p.path);\n  return merge;\n}\n/**\n * Export.\n *\n * @type {Object}\n */\n\n\nvar Commands$4 = {};\n\nCommands$4.blur = function (editor) {\n  editor.select({\n    isFocused: false\n  });\n};\n\nCommands$4.deselect = function (editor) {\n  var range = Selection.create();\n  editor.select(range);\n};\n\nCommands$4.focus = function (editor) {\n  editor.select({\n    isFocused: true\n  });\n};\n\nCommands$4.flip = function (editor) {\n  editor.command(proxy, 'flip');\n};\n\nCommands$4.moveAnchorBackward = function (editor) {\n  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  editor.command.apply(editor, [pointBackward, 'anchor'].concat(args));\n};\n\nCommands$4.moveAnchorWordBackward = function (editor) {\n  for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    args[_key2 - 1] = arguments[_key2];\n  }\n\n  editor.command.apply(editor, [pointWordBackward, 'anchor'].concat(args));\n};\n\nCommands$4.moveAnchorForward = function (editor) {\n  for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    args[_key3 - 1] = arguments[_key3];\n  }\n\n  editor.command.apply(editor, [pointForward, 'anchor'].concat(args));\n};\n\nCommands$4.moveAnchorWordForward = function (editor) {\n  for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n    args[_key4 - 1] = arguments[_key4];\n  }\n\n  editor.command.apply(editor, [pointWordForward, 'anchor'].concat(args));\n};\n\nCommands$4.moveAnchorTo = function (editor) {\n  for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n    args[_key5 - 1] = arguments[_key5];\n  }\n\n  editor.command.apply(editor, [proxy, 'moveAnchorTo'].concat(args));\n};\n\nCommands$4.moveAnchorToEndOfBlock = function (editor) {\n  editor.command(pointEdgeObject, 'anchor', 'end', 'block');\n};\n\nCommands$4.moveAnchorToEndOfInline = function (editor) {\n  editor.command(pointEdgeObject, 'anchor', 'end', 'inline');\n};\n\nCommands$4.moveAnchorToEndOfDocument = function (editor) {\n  editor.moveAnchorToEndOfNode(editor.value.document).moveToAnchor();\n};\n\nCommands$4.moveAnchorToEndOfNextBlock = function (editor) {\n  editor.command(pointEdgeSideObject, 'anchor', 'end', 'next', 'block');\n};\n\nCommands$4.moveAnchorToEndOfNextInline = function (editor) {\n  editor.command(pointEdgeSideObject, 'anchor', 'end', 'next', 'inline');\n};\n\nCommands$4.moveAnchorToEndOfNextText = function (editor) {\n  editor.command(pointEdgeSideObject, 'anchor', 'end', 'next', 'text');\n};\n\nCommands$4.moveAnchorToEndOfNode = function (editor) {\n  for (var _len6 = arguments.length, args = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n    args[_key6 - 1] = arguments[_key6];\n  }\n\n  editor.command.apply(editor, [proxy, 'moveAnchorToEndOfNode'].concat(args));\n};\n\nCommands$4.moveAnchorToEndOfPreviousBlock = function (editor) {\n  editor.command(pointEdgeSideObject, 'anchor', 'end', 'previous', 'block');\n};\n\nCommands$4.moveAnchorToEndOfPreviousInline = function (editor) {\n  editor.command(pointEdgeSideObject, 'anchor', 'end', 'previous', 'inline');\n};\n\nCommands$4.moveAnchorToEndOfPreviousText = function (editor) {\n  editor.command(pointEdgeSideObject, 'anchor', 'end', 'previous', 'text');\n};\n\nCommands$4.moveAnchorToEndOfText = function (editor) {\n  editor.command(pointEdgeObject, 'anchor', 'end', 'text');\n};\n\nCommands$4.moveAnchorToStartOfBlock = function (editor) {\n  editor.command(pointEdgeObject, 'anchor', 'start', 'block');\n};\n\nCommands$4.moveAnchorToStartOfDocument = function (editor) {\n  editor.moveAnchorToStartOfNode(editor.value.document).moveToAnchor();\n};\n\nCommands$4.moveAnchorToStartOfInline = function (editor) {\n  editor.command(pointEdgeObject, 'anchor', 'start', 'inline');\n};\n\nCommands$4.moveAnchorToStartOfNextBlock = function (editor) {\n  editor.command(pointEdgeSideObject, 'anchor', 'start', 'next', 'block');\n};\n\nCommands$4.moveAnchorToStartOfNextInline = function (editor) {\n  editor.command(pointEdgeSideObject, 'anchor', 'start', 'next', 'inline');\n};\n\nCommands$4.moveAnchorToStartOfNextText = function (editor) {\n  editor.command(pointEdgeSideObject, 'anchor', 'start', 'next', 'text');\n};\n\nCommands$4.moveAnchorToStartOfNode = function (editor) {\n  for (var _len7 = arguments.length, args = Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n    args[_key7 - 1] = arguments[_key7];\n  }\n\n  editor.command.apply(editor, [proxy, 'moveAnchorToStartOfNode'].concat(args));\n};\n\nCommands$4.moveAnchorToStartOfPreviousBlock = function (editor) {\n  editor.command(pointEdgeSideObject, 'anchor', 'start', 'previous', 'block');\n};\n\nCommands$4.moveAnchorToStartOfPreviousInline = function (editor) {\n  editor.command(pointEdgeSideObject, 'anchor', 'start', 'previous', 'inline');\n};\n\nCommands$4.moveAnchorToStartOfPreviousText = function (editor) {\n  editor.command(pointEdgeSideObject, 'anchor', 'start', 'previous', 'text');\n};\n\nCommands$4.moveAnchorToStartOfText = function (editor) {\n  editor.command(pointEdgeObject, 'anchor', 'start', 'text');\n};\n\nCommands$4.moveBackward = function (editor) {\n  var _editor$moveAnchorBac;\n\n  for (var _len8 = arguments.length, args = Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n    args[_key8 - 1] = arguments[_key8];\n  }\n\n  (_editor$moveAnchorBac = editor.moveAnchorBackward.apply(editor, args)).moveFocusBackward.apply(_editor$moveAnchorBac, args);\n};\n\nCommands$4.moveWordBackward = function (editor) {\n  for (var _len9 = arguments.length, args = Array(_len9 > 1 ? _len9 - 1 : 0), _key9 = 1; _key9 < _len9; _key9++) {\n    args[_key9 - 1] = arguments[_key9];\n  }\n\n  editor.moveFocusWordBackward.apply(editor, args).moveToFocus();\n};\n\nCommands$4.moveEndBackward = function (editor) {\n  for (var _len10 = arguments.length, args = Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++) {\n    args[_key10 - 1] = arguments[_key10];\n  }\n\n  editor.command.apply(editor, [pointBackward, 'end'].concat(args));\n};\n\nCommands$4.moveEndWordBackward = function (editor) {\n  for (var _len11 = arguments.length, args = Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {\n    args[_key11 - 1] = arguments[_key11];\n  }\n\n  editor.command.apply(editor, [pointWordBackward, 'end'].concat(args));\n};\n\nCommands$4.moveEndForward = function (editor) {\n  for (var _len12 = arguments.length, args = Array(_len12 > 1 ? _len12 - 1 : 0), _key12 = 1; _key12 < _len12; _key12++) {\n    args[_key12 - 1] = arguments[_key12];\n  }\n\n  editor.command.apply(editor, [pointForward, 'end'].concat(args));\n};\n\nCommands$4.moveEndWordForward = function (editor) {\n  for (var _len13 = arguments.length, args = Array(_len13 > 1 ? _len13 - 1 : 0), _key13 = 1; _key13 < _len13; _key13++) {\n    args[_key13 - 1] = arguments[_key13];\n  }\n\n  editor.command.apply(editor, [pointWordForward, 'end'].concat(args));\n};\n\nCommands$4.moveEndTo = function (editor) {\n  for (var _len14 = arguments.length, args = Array(_len14 > 1 ? _len14 - 1 : 0), _key14 = 1; _key14 < _len14; _key14++) {\n    args[_key14 - 1] = arguments[_key14];\n  }\n\n  editor.command.apply(editor, [proxy, 'moveEndTo'].concat(args));\n};\n\nCommands$4.moveEndToEndOfBlock = function (editor) {\n  editor.command(pointEdgeObject, 'end', 'end', 'block');\n};\n\nCommands$4.moveEndToEndOfDocument = function (editor) {\n  editor.moveEndToEndOfNode(editor.value.document).moveToEnd();\n};\n\nCommands$4.moveEndToEndOfInline = function (editor) {\n  editor.command(pointEdgeObject, 'end', 'end', 'inline');\n};\n\nCommands$4.moveEndToEndOfNextBlock = function (editor) {\n  editor.command(pointEdgeSideObject, 'end', 'end', 'next', 'block');\n};\n\nCommands$4.moveEndToEndOfNextInline = function (editor) {\n  editor.command(pointEdgeSideObject, 'end', 'end', 'next', 'inline');\n};\n\nCommands$4.moveEndToEndOfNextText = function (editor) {\n  editor.command(pointEdgeSideObject, 'end', 'end', 'next', 'text');\n};\n\nCommands$4.moveEndToEndOfNode = function (editor) {\n  for (var _len15 = arguments.length, args = Array(_len15 > 1 ? _len15 - 1 : 0), _key15 = 1; _key15 < _len15; _key15++) {\n    args[_key15 - 1] = arguments[_key15];\n  }\n\n  editor.command.apply(editor, [proxy, 'moveEndToEndOfNode'].concat(args));\n};\n\nCommands$4.moveEndToEndOfPreviousBlock = function (editor) {\n  editor.command(pointEdgeSideObject, 'end', 'end', 'previous', 'block');\n};\n\nCommands$4.moveEndToEndOfPreviousInline = function (editor) {\n  editor.command(pointEdgeSideObject, 'end', 'end', 'previous', 'inline');\n};\n\nCommands$4.moveEndToEndOfPreviousText = function (editor) {\n  editor.command(pointEdgeSideObject, 'end', 'end', 'previous', 'text');\n};\n\nCommands$4.moveEndToEndOfText = function (editor) {\n  editor.command(pointEdgeObject, 'end', 'end', 'text');\n};\n\nCommands$4.moveEndToStartOfBlock = function (editor) {\n  editor.command(pointEdgeObject, 'end', 'start', 'block');\n};\n\nCommands$4.moveEndToStartOfDocument = function (editor) {\n  editor.moveEndToStartOfNode(editor.value.document).moveToEnd();\n};\n\nCommands$4.moveEndToStartOfInline = function (editor) {\n  editor.command(pointEdgeObject, 'end', 'start', 'inline');\n};\n\nCommands$4.moveEndToStartOfNextBlock = function (editor) {\n  editor.command(pointEdgeSideObject, 'end', 'start', 'next', 'block');\n};\n\nCommands$4.moveEndToStartOfNextInline = function (editor) {\n  editor.command(pointEdgeSideObject, 'end', 'start', 'next', 'inline');\n};\n\nCommands$4.moveEndToStartOfNextText = function (editor) {\n  editor.command(pointEdgeSideObject, 'end', 'start', 'next', 'text');\n};\n\nCommands$4.moveEndToStartOfNode = function (editor) {\n  for (var _len16 = arguments.length, args = Array(_len16 > 1 ? _len16 - 1 : 0), _key16 = 1; _key16 < _len16; _key16++) {\n    args[_key16 - 1] = arguments[_key16];\n  }\n\n  editor.command.apply(editor, [proxy, 'moveEndToStartOfNode'].concat(args));\n};\n\nCommands$4.moveEndToStartOfPreviousBlock = function (editor) {\n  editor.command(pointEdgeSideObject, 'end', 'start', 'previous', 'block');\n};\n\nCommands$4.moveEndToStartOfPreviousInline = function (editor) {\n  editor.command(pointEdgeSideObject, 'end', 'start', 'previous', 'inline');\n};\n\nCommands$4.moveEndToStartOfPreviousText = function (editor) {\n  editor.command(pointEdgeSideObject, 'end', 'start', 'previous', 'text');\n};\n\nCommands$4.moveEndToStartOfText = function (editor) {\n  editor.command(pointEdgeObject, 'end', 'start', 'text');\n};\n\nCommands$4.moveFocusBackward = function (editor) {\n  for (var _len17 = arguments.length, args = Array(_len17 > 1 ? _len17 - 1 : 0), _key17 = 1; _key17 < _len17; _key17++) {\n    args[_key17 - 1] = arguments[_key17];\n  }\n\n  editor.command.apply(editor, [pointBackward, 'focus'].concat(args));\n};\n\nCommands$4.moveFocusWordBackward = function (editor) {\n  for (var _len18 = arguments.length, args = Array(_len18 > 1 ? _len18 - 1 : 0), _key18 = 1; _key18 < _len18; _key18++) {\n    args[_key18 - 1] = arguments[_key18];\n  }\n\n  editor.command.apply(editor, [pointWordBackward, 'focus'].concat(args));\n};\n\nCommands$4.moveFocusForward = function (editor) {\n  for (var _len19 = arguments.length, args = Array(_len19 > 1 ? _len19 - 1 : 0), _key19 = 1; _key19 < _len19; _key19++) {\n    args[_key19 - 1] = arguments[_key19];\n  }\n\n  editor.command.apply(editor, [pointForward, 'focus'].concat(args));\n};\n\nCommands$4.moveFocusWordForward = function (editor) {\n  for (var _len20 = arguments.length, args = Array(_len20 > 1 ? _len20 - 1 : 0), _key20 = 1; _key20 < _len20; _key20++) {\n    args[_key20 - 1] = arguments[_key20];\n  }\n\n  editor.command.apply(editor, [pointWordForward, 'focus'].concat(args));\n};\n\nCommands$4.moveFocusTo = function (editor) {\n  for (var _len21 = arguments.length, args = Array(_len21 > 1 ? _len21 - 1 : 0), _key21 = 1; _key21 < _len21; _key21++) {\n    args[_key21 - 1] = arguments[_key21];\n  }\n\n  editor.command.apply(editor, [proxy, 'moveFocusTo'].concat(args));\n};\n\nCommands$4.moveFocusToEndOfBlock = function (editor) {\n  editor.command(pointEdgeObject, 'focus', 'end', 'block');\n};\n\nCommands$4.moveFocusToEndOfDocument = function (editor) {\n  editor.moveFocusToEndOfNode(editor.value.document).moveToFocus();\n};\n\nCommands$4.moveFocusToEndOfInline = function (editor) {\n  editor.command(pointEdgeObject, 'focus', 'end', 'inline');\n};\n\nCommands$4.moveFocusToEndOfNextBlock = function (editor) {\n  editor.command(pointEdgeSideObject, 'focus', 'end', 'next', 'block');\n};\n\nCommands$4.moveFocusToEndOfNextInline = function (editor) {\n  editor.command(pointEdgeSideObject, 'focus', 'end', 'next', 'inline');\n};\n\nCommands$4.moveFocusToEndOfNextText = function (editor) {\n  editor.command(pointEdgeSideObject, 'focus', 'end', 'next', 'text');\n};\n\nCommands$4.moveFocusToEndOfNode = function (editor) {\n  for (var _len22 = arguments.length, args = Array(_len22 > 1 ? _len22 - 1 : 0), _key22 = 1; _key22 < _len22; _key22++) {\n    args[_key22 - 1] = arguments[_key22];\n  }\n\n  editor.command.apply(editor, [proxy, 'moveFocusToEndOfNode'].concat(args));\n};\n\nCommands$4.moveFocusToEndOfPreviousBlock = function (editor) {\n  editor.command(pointEdgeSideObject, 'focus', 'end', 'previous', 'block');\n};\n\nCommands$4.moveFocusToEndOfPreviousInline = function (editor) {\n  editor.command(pointEdgeSideObject, 'focus', 'end', 'previous', 'inline');\n};\n\nCommands$4.moveFocusToEndOfPreviousText = function (editor) {\n  editor.command(pointEdgeSideObject, 'focus', 'end', 'previous', 'text');\n};\n\nCommands$4.moveFocusToEndOfText = function (editor) {\n  editor.command(pointEdgeObject, 'focus', 'end', 'text');\n};\n\nCommands$4.moveFocusToStartOfBlock = function (editor) {\n  editor.command(pointEdgeObject, 'focus', 'start', 'block');\n};\n\nCommands$4.moveFocusToStartOfDocument = function (editor) {\n  editor.moveFocusToStartOfNode(editor.value.document).moveToFocus();\n};\n\nCommands$4.moveFocusToStartOfInline = function (editor) {\n  editor.command(pointEdgeObject, 'focus', 'start', 'inline');\n};\n\nCommands$4.moveFocusToStartOfNextBlock = function (editor) {\n  editor.command(pointEdgeSideObject, 'focus', 'start', 'next', 'block');\n};\n\nCommands$4.moveFocusToStartOfNextInline = function (editor) {\n  editor.command(pointEdgeSideObject, 'focus', 'start', 'next', 'inline');\n};\n\nCommands$4.moveFocusToStartOfNextText = function (editor) {\n  editor.command(pointEdgeSideObject, 'focus', 'start', 'next', 'text');\n};\n\nCommands$4.moveFocusToStartOfNode = function (editor) {\n  for (var _len23 = arguments.length, args = Array(_len23 > 1 ? _len23 - 1 : 0), _key23 = 1; _key23 < _len23; _key23++) {\n    args[_key23 - 1] = arguments[_key23];\n  }\n\n  editor.command.apply(editor, [proxy, 'moveFocusToStartOfNode'].concat(args));\n};\n\nCommands$4.moveFocusToStartOfPreviousBlock = function (editor) {\n  editor.command(pointEdgeSideObject, 'focus', 'start', 'previous', 'block');\n};\n\nCommands$4.moveFocusToStartOfPreviousInline = function (editor) {\n  editor.command(pointEdgeSideObject, 'focus', 'start', 'previous', 'inline');\n};\n\nCommands$4.moveFocusToStartOfPreviousText = function (editor) {\n  editor.command(pointEdgeSideObject, 'focus', 'start', 'previous', 'text');\n};\n\nCommands$4.moveFocusToStartOfText = function (editor) {\n  editor.command(pointEdgeObject, 'focus', 'start', 'text');\n};\n\nCommands$4.moveForward = function (editor) {\n  var _editor$moveAnchorFor;\n\n  for (var _len24 = arguments.length, args = Array(_len24 > 1 ? _len24 - 1 : 0), _key24 = 1; _key24 < _len24; _key24++) {\n    args[_key24 - 1] = arguments[_key24];\n  }\n\n  (_editor$moveAnchorFor = editor.moveAnchorForward.apply(editor, args)).moveFocusForward.apply(_editor$moveAnchorFor, args);\n};\n\nCommands$4.moveWordForward = function (editor) {\n  var _editor$moveFocusWord;\n\n  for (var _len25 = arguments.length, args = Array(_len25 > 1 ? _len25 - 1 : 0), _key25 = 1; _key25 < _len25; _key25++) {\n    args[_key25 - 1] = arguments[_key25];\n  }\n\n  (_editor$moveFocusWord = editor.moveFocusWordForward.apply(editor, args)).moveToFocus.apply(_editor$moveFocusWord, args);\n};\n\nCommands$4.moveStartBackward = function (editor) {\n  for (var _len26 = arguments.length, args = Array(_len26 > 1 ? _len26 - 1 : 0), _key26 = 1; _key26 < _len26; _key26++) {\n    args[_key26 - 1] = arguments[_key26];\n  }\n\n  editor.command.apply(editor, [pointBackward, 'start'].concat(args));\n};\n\nCommands$4.moveStartWordBackward = function (editor) {\n  for (var _len27 = arguments.length, args = Array(_len27 > 1 ? _len27 - 1 : 0), _key27 = 1; _key27 < _len27; _key27++) {\n    args[_key27 - 1] = arguments[_key27];\n  }\n\n  editor.command.apply(editor, [pointWordBackward, 'start'].concat(args));\n};\n\nCommands$4.moveStartForward = function (editor) {\n  for (var _len28 = arguments.length, args = Array(_len28 > 1 ? _len28 - 1 : 0), _key28 = 1; _key28 < _len28; _key28++) {\n    args[_key28 - 1] = arguments[_key28];\n  }\n\n  editor.command.apply(editor, [pointForward, 'start'].concat(args));\n};\n\nCommands$4.moveStartWordForward = function (editor) {\n  for (var _len29 = arguments.length, args = Array(_len29 > 1 ? _len29 - 1 : 0), _key29 = 1; _key29 < _len29; _key29++) {\n    args[_key29 - 1] = arguments[_key29];\n  }\n\n  editor.command.apply(editor, [pointWordForward, 'start'].concat(args));\n};\n\nCommands$4.moveStartTo = function (editor) {\n  for (var _len30 = arguments.length, args = Array(_len30 > 1 ? _len30 - 1 : 0), _key30 = 1; _key30 < _len30; _key30++) {\n    args[_key30 - 1] = arguments[_key30];\n  }\n\n  editor.command.apply(editor, [proxy, 'moveStartTo'].concat(args));\n};\n\nCommands$4.moveStartToEndOfBlock = function (editor) {\n  editor.command(pointEdgeObject, 'start', 'end', 'block');\n};\n\nCommands$4.moveStartToEndOfDocument = function (editor) {\n  editor.moveStartToEndOfNode(editor.value.document).moveToStart();\n};\n\nCommands$4.moveStartToEndOfInline = function (editor) {\n  editor.command(pointEdgeObject, 'start', 'end', 'inline');\n};\n\nCommands$4.moveStartToEndOfNextBlock = function (editor) {\n  editor.command(pointEdgeSideObject, 'start', 'end', 'next', 'block');\n};\n\nCommands$4.moveStartToEndOfNextInline = function (editor) {\n  editor.command(pointEdgeSideObject, 'start', 'end', 'next', 'inline');\n};\n\nCommands$4.moveStartToEndOfNextText = function (editor) {\n  editor.command(pointEdgeSideObject, 'start', 'end', 'next', 'text');\n};\n\nCommands$4.moveStartToEndOfNode = function (editor) {\n  for (var _len31 = arguments.length, args = Array(_len31 > 1 ? _len31 - 1 : 0), _key31 = 1; _key31 < _len31; _key31++) {\n    args[_key31 - 1] = arguments[_key31];\n  }\n\n  editor.command.apply(editor, [proxy, 'moveStartToEndOfNode'].concat(args));\n};\n\nCommands$4.moveStartToEndOfPreviousBlock = function (editor) {\n  editor.command(pointEdgeSideObject, 'start', 'end', 'previous', 'block');\n};\n\nCommands$4.moveStartToEndOfPreviousInline = function (editor) {\n  editor.command(pointEdgeSideObject, 'start', 'end', 'previous', 'inline');\n};\n\nCommands$4.moveStartToEndOfPreviousText = function (editor) {\n  editor.command(pointEdgeSideObject, 'start', 'end', 'previous', 'text');\n};\n\nCommands$4.moveStartToEndOfText = function (editor) {\n  editor.command(pointEdgeObject, 'start', 'end', 'text');\n};\n\nCommands$4.moveStartToStartOfBlock = function (editor) {\n  editor.command(pointEdgeObject, 'start', 'start', 'block');\n};\n\nCommands$4.moveStartToStartOfDocument = function (editor) {\n  editor.moveStartToStartOfNode(editor.value.document).moveToStart();\n};\n\nCommands$4.moveStartToStartOfInline = function (editor) {\n  editor.command(pointEdgeObject, 'start', 'start', 'inline');\n};\n\nCommands$4.moveStartToStartOfNextBlock = function (editor) {\n  editor.command(pointEdgeSideObject, 'start', 'start', 'next', 'block');\n};\n\nCommands$4.moveStartToStartOfNextInline = function (editor) {\n  editor.command(pointEdgeSideObject, 'start', 'start', 'next', 'inline');\n};\n\nCommands$4.moveStartToStartOfNextText = function (editor) {\n  editor.command(pointEdgeSideObject, 'start', 'start', 'next', 'text');\n};\n\nCommands$4.moveStartToStartOfNode = function (editor) {\n  for (var _len32 = arguments.length, args = Array(_len32 > 1 ? _len32 - 1 : 0), _key32 = 1; _key32 < _len32; _key32++) {\n    args[_key32 - 1] = arguments[_key32];\n  }\n\n  editor.command.apply(editor, [proxy, 'moveStartToStartOfNode'].concat(args));\n};\n\nCommands$4.moveStartToStartOfPreviousBlock = function (editor) {\n  editor.command(pointEdgeSideObject, 'start', 'start', 'previous', 'block');\n};\n\nCommands$4.moveStartToStartOfPreviousInline = function (editor) {\n  editor.command(pointEdgeSideObject, 'start', 'start', 'previous', 'inline');\n};\n\nCommands$4.moveStartToStartOfPreviousText = function (editor) {\n  editor.command(pointEdgeSideObject, 'start', 'start', 'previous', 'text');\n};\n\nCommands$4.moveStartToStartOfText = function (editor) {\n  editor.command(pointEdgeObject, 'start', 'start', 'text');\n};\n\nCommands$4.moveTo = function (editor) {\n  for (var _len33 = arguments.length, args = Array(_len33 > 1 ? _len33 - 1 : 0), _key33 = 1; _key33 < _len33; _key33++) {\n    args[_key33 - 1] = arguments[_key33];\n  }\n\n  editor.command.apply(editor, [proxy, 'moveTo'].concat(args));\n};\n\nCommands$4.moveToAnchor = function (editor) {\n  editor.command(proxy, 'moveToAnchor');\n};\n\nCommands$4.moveToEnd = function (editor) {\n  editor.command(proxy, 'moveToEnd');\n};\n\nCommands$4.moveToEndOfBlock = function (editor) {\n  editor.moveEndToEndOfBlock().moveToEnd();\n};\n\nCommands$4.moveToEndOfDocument = function (editor) {\n  editor.moveEndToEndOfNode(editor.value.document).moveToEnd();\n};\n\nCommands$4.moveToEndOfInline = function (editor) {\n  editor.moveEndToEndOfInline().moveToEnd();\n};\n\nCommands$4.moveToEndOfNextBlock = function (editor) {\n  editor.moveEndToEndOfNextBlock().moveToEnd();\n};\n\nCommands$4.moveToEndOfNextInline = function (editor) {\n  editor.moveEndToEndOfNextInline().moveToEnd();\n};\n\nCommands$4.moveToEndOfNextText = function (editor) {\n  editor.moveEndToEndOfNextText().moveToEnd();\n};\n\nCommands$4.moveToEndOfNode = function (editor) {\n  for (var _len34 = arguments.length, args = Array(_len34 > 1 ? _len34 - 1 : 0), _key34 = 1; _key34 < _len34; _key34++) {\n    args[_key34 - 1] = arguments[_key34];\n  }\n\n  editor.command.apply(editor, [proxy, 'moveToEndOfNode'].concat(args));\n};\n\nCommands$4.moveToEndOfPreviousBlock = function (editor) {\n  editor.moveStartToEndOfPreviousBlock().moveToStart();\n};\n\nCommands$4.moveToEndOfPreviousInline = function (editor) {\n  editor.moveStartToEndOfPreviousInline().moveToStart();\n};\n\nCommands$4.moveToEndOfPreviousText = function (editor) {\n  editor.moveStartToEndOfPreviousText().moveToStart();\n};\n\nCommands$4.moveToEndOfText = function (editor) {\n  editor.moveEndToEndOfText().moveToEnd();\n};\n\nCommands$4.moveToFocus = function (editor) {\n  editor.command(proxy, 'moveToFocus');\n};\n\nCommands$4.moveToRangeOfDocument = function (editor) {\n  editor.moveToRangeOfNode(editor.value.document);\n};\n\nCommands$4.moveToRangeOfNode = function (editor) {\n  for (var _len35 = arguments.length, args = Array(_len35 > 1 ? _len35 - 1 : 0), _key35 = 1; _key35 < _len35; _key35++) {\n    args[_key35 - 1] = arguments[_key35];\n  }\n\n  editor.command.apply(editor, [proxy, 'moveToRangeOfNode'].concat(args));\n};\n\nCommands$4.moveToStart = function (editor) {\n  editor.command(proxy, 'moveToStart');\n};\n\nCommands$4.moveToStartOfBlock = function (editor) {\n  editor.moveStartToStartOfBlock().moveToStart();\n};\n\nCommands$4.moveToStartOfDocument = function (editor) {\n  editor.moveStartToStartOfNode(editor.value.document).moveToStart();\n};\n\nCommands$4.moveToStartOfInline = function (editor) {\n  editor.moveStartToStartOfInline().moveToStart();\n};\n\nCommands$4.moveToStartOfNextBlock = function (editor) {\n  editor.moveEndToStartOfNextBlock().moveToEnd();\n};\n\nCommands$4.moveToStartOfNextInline = function (editor) {\n  editor.moveEndToStartOfNextInline().moveToEnd();\n};\n\nCommands$4.moveToStartOfNextText = function (editor) {\n  editor.moveEndToStartOfNextText().moveToEnd();\n};\n\nCommands$4.moveToStartOfNode = function (editor) {\n  for (var _len36 = arguments.length, args = Array(_len36 > 1 ? _len36 - 1 : 0), _key36 = 1; _key36 < _len36; _key36++) {\n    args[_key36 - 1] = arguments[_key36];\n  }\n\n  editor.command.apply(editor, [proxy, 'moveToStartOfNode'].concat(args));\n};\n\nCommands$4.moveToStartOfPreviousBlock = function (editor) {\n  editor.moveStartToStartOfPreviousBlock().moveToStart();\n};\n\nCommands$4.moveToStartOfPreviousInline = function (editor) {\n  editor.moveStartToStartOfPreviousInline().moveToStart();\n};\n\nCommands$4.moveToStartOfPreviousText = function (editor) {\n  editor.moveStartToStartOfPreviousText().moveToStart();\n};\n\nCommands$4.moveToStartOfText = function (editor) {\n  editor.moveStartToStartOfText().moveToStart();\n};\n\nCommands$4.select = function (editor, properties) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  properties = Selection.createProperties(properties);\n  var _options$snapshot = options.snapshot,\n      snapshot = _options$snapshot === undefined ? false : _options$snapshot;\n  var value = editor.value;\n  var document = value.document,\n      selection = value.selection;\n  var newProperties = {};\n  var next = selection.setProperties(properties);\n  next = document.resolveSelection(next); // Re-compute the properties, to ensure that we get their normalized values.\n\n  properties = pick(next, Object.keys(properties)); // Remove any properties that are already equal to the current selection. And\n  // create a dictionary of the previous values for all of the properties that\n  // are being changed, for the inverse operation.\n\n  for (var k in properties) {\n    if (snapshot === true || !is(properties[k], selection[k])) {\n      newProperties[k] = properties[k];\n    }\n  } // If the selection moves, clear any marks, unless the new selection\n  // properties change the marks in some way.\n\n\n  if (selection.marks && !newProperties.marks && (newProperties.anchor || newProperties.focus)) {\n    newProperties.marks = null;\n  } // If there are no new properties to set, abort to avoid extra operations.\n\n\n  if (Object.keys(newProperties).length === 0) {\n    return;\n  } // TODO: for some reason toJSON() is required here (it breaks selections between blocks)? - 2018-10-10\n\n\n  var prevProperties = pick(selection.toJSON(), Object.keys(newProperties));\n  editor.applyOperation({\n    type: 'set_selection',\n    value: value,\n    properties: prevProperties,\n    newProperties: newProperties\n  }, snapshot ? {\n    skip: false,\n    merge: false\n  } : {});\n};\n\nCommands$4.setAnchor = function (editor) {\n  for (var _len37 = arguments.length, args = Array(_len37 > 1 ? _len37 - 1 : 0), _key37 = 1; _key37 < _len37; _key37++) {\n    args[_key37 - 1] = arguments[_key37];\n  }\n\n  editor.command.apply(editor, [proxy, 'setAnchor'].concat(args));\n};\n\nCommands$4.setEnd = function (editor) {\n  for (var _len38 = arguments.length, args = Array(_len38 > 1 ? _len38 - 1 : 0), _key38 = 1; _key38 < _len38; _key38++) {\n    args[_key38 - 1] = arguments[_key38];\n  }\n\n  editor.command.apply(editor, [proxy, 'setEnd'].concat(args));\n};\n\nCommands$4.setFocus = function (editor) {\n  for (var _len39 = arguments.length, args = Array(_len39 > 1 ? _len39 - 1 : 0), _key39 = 1; _key39 < _len39; _key39++) {\n    args[_key39 - 1] = arguments[_key39];\n  }\n\n  editor.command.apply(editor, [proxy, 'setFocus'].concat(args));\n};\n\nCommands$4.setStart = function (editor) {\n  for (var _len40 = arguments.length, args = Array(_len40 > 1 ? _len40 - 1 : 0), _key40 = 1; _key40 < _len40; _key40++) {\n    args[_key40 - 1] = arguments[_key40];\n  }\n\n  editor.command.apply(editor, [proxy, 'setStart'].concat(args));\n};\n\nCommands$4.snapshotSelection = function (editor) {\n  editor.withoutMerging(function () {\n    editor.select(editor.value.selection, {\n      snapshot: true\n    });\n  });\n};\n/**\n * Helpers.\n */\n\n\nfunction proxy(editor, method) {\n  var _editor$value$selecti;\n\n  for (var _len41 = arguments.length, args = Array(_len41 > 2 ? _len41 - 2 : 0), _key41 = 2; _key41 < _len41; _key41++) {\n    args[_key41 - 2] = arguments[_key41];\n  }\n\n  var range = (_editor$value$selecti = editor.value.selection)[method].apply(_editor$value$selecti, args);\n\n  editor.select(range);\n}\n\nfunction pointEdgeObject(editor, point, edge, object) {\n  var Point = point.slice(0, 1).toUpperCase() + point.slice(1);\n  var Edge = edge.slice(0, 1).toUpperCase() + edge.slice(1);\n  var Object = object.slice(0, 1).toUpperCase() + object.slice(1);\n  var method = 'move' + Point + 'To' + Edge + 'OfNode';\n  var getNode = object === 'text' ? 'getNode' : 'getClosest' + Object;\n  var value = editor.value;\n  var document = value.document,\n      selection = value.selection;\n  var p = selection[point];\n  var node = document[getNode](p.key);\n  if (!node) return;\n  editor[method](node);\n}\n\nfunction pointEdgeSideObject(editor, point, edge, side, object) {\n  var Point = point.slice(0, 1).toUpperCase() + point.slice(1);\n  var Edge = edge.slice(0, 1).toUpperCase() + edge.slice(1);\n  var Side = side.slice(0, 1).toUpperCase() + side.slice(1);\n  var Object = object.slice(0, 1).toUpperCase() + object.slice(1);\n  var method = 'move' + Point + 'To' + Edge + 'OfNode';\n  var getNode = object === 'text' ? 'getNode' : 'getClosest' + Object;\n  var getDirectionNode = 'get' + Side + Object;\n  var value = editor.value;\n  var document = value.document,\n      selection = value.selection;\n  var p = selection[point];\n  var node = document[getNode](p.key);\n  if (!node) return;\n  var target = document[getDirectionNode](node.key);\n  if (!target) return;\n  editor[method](target);\n}\n\nfunction pointBackward(editor, point) {\n  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (n === 0) return;\n  if (n < 0) return pointForward(editor, point, -n);\n  var Point = point.slice(0, 1).toUpperCase() + point.slice(1);\n  var value = editor.value;\n  var document = value.document,\n      selection = value.selection;\n  var p = selection[point];\n  var hasVoidParent = document.hasVoidParent(p.path, editor); // what is this?\n\n  if (!hasVoidParent && p.offset - n >= 0) {\n    var range = selection['move' + Point + 'Backward'](n);\n    editor.select(range);\n    return;\n  }\n\n  var previous = document.getPreviousText(p.path);\n  if (!previous) return;\n  var block = document.getClosestBlock(p.path);\n  var isInBlock = block.hasNode(previous.key);\n  var isPreviousInVoid = previous && document.hasVoidParent(previous.key, editor);\n  editor['move' + Point + 'ToEndOfNode'](previous); // when is this called?\n\n  if (!hasVoidParent && !isPreviousInVoid && isInBlock) {\n    var _range = editor.value.selection['move' + Point + 'Backward'](n);\n\n    editor.select(_range);\n  }\n}\n\nfunction pointForward(editor, point) {\n  var n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (n === 0) return;\n  if (n < 0) return pointBackward(editor, point, -n);\n  var Point = point.slice(0, 1).toUpperCase() + point.slice(1);\n  var value = editor.value;\n  var document = value.document,\n      selection = value.selection;\n  var p = selection[point];\n  var text = document.getNode(p.path);\n  var hasVoidParent = document.hasVoidParent(p.path, editor); // what is this?\n\n  if (!hasVoidParent && p.offset + n <= text.text.length) {\n    var range = selection['move' + Point + 'Forward'](n);\n    editor.select(range);\n    return;\n  }\n\n  var next = document.getNextText(p.path);\n  if (!next) return;\n  var block = document.getClosestBlock(p.path);\n  var isInBlock = block.hasNode(next.key);\n  var isNextInVoid = document.hasVoidParent(next.key, editor);\n  editor['move' + Point + 'ToStartOfNode'](next); // when is this called?\n\n  if (!hasVoidParent && !isNextInVoid && isInBlock) {\n    var _range2 = editor.value.selection['move' + Point + 'Forward'](n);\n\n    editor.select(_range2);\n  }\n}\n\nfunction pointWordBackward(editor, pointName) {\n  var value = editor.value;\n  var document = value.document,\n      selection = value.selection;\n  var point = selection[pointName];\n  var block = document.getClosestBlock(point.key);\n  var offset = block.getOffset(point.key);\n  var o = offset + point.offset;\n  var text = block.text;\n  var n = TextUtils.getWordOffsetBackward(text, o);\n  editor.command(pointBackward, pointName, n > 0 ? n : 1);\n}\n\nfunction pointWordForward(editor, pointName) {\n  var value = editor.value;\n  var document = value.document,\n      selection = value.selection;\n  var point = selection[pointName];\n  var block = document.getClosestBlock(point.key);\n  var offset = block.getOffset(point.key);\n  var o = offset + point.offset;\n  var text = block.text;\n  var n = TextUtils.getWordOffsetForward(text, o);\n  editor.command(pointForward, pointName, n > 0 ? n : 1);\n}\n\nvar Commands$5 = {};\n/**\n * Set `properties` on the value.\n *\n * @param {Editor} editor\n * @param {Object|Value} properties\n */\n\nCommands$5.setData = function (editor) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var value = editor.value;\n  var newProperties = Value.createProperties({\n    data: data\n  });\n  var prevProperties = pick(value, Object.keys(newProperties));\n  editor.applyOperation({\n    type: 'set_value',\n    properties: prevProperties,\n    newProperties: newProperties\n  });\n};\n/**\n * Set `properties` on the value.\n *\n * @param {Editor} editor\n * @param {Object|Value} properties\n */\n\n\nCommands$5.setDecorations = function (editor) {\n  var decorations = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var value = editor.value;\n  var newProperties = Value.createProperties({\n    decorations: decorations\n  });\n  var prevProperties = pick(value, Object.keys(newProperties));\n  editor.applyOperation({\n    type: 'set_value',\n    properties: prevProperties,\n    newProperties: newProperties\n  });\n};\n/**\n * Export.\n *\n * @type {Object}\n */\n\n/**\n * A plugin that adds a set of queries to the editor.\n *\n * @param {Object} queries\n * @return {Object}\n */\n\n\nfunction QueriesPlugin() {\n  var queries = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  /**\n   * On construct, register all the queries.\n   *\n   * @param {Editor} editor\n   * @param {Function} next\n   */\n\n  function onConstruct(editor, next) {\n    for (var query in queries) {\n      editor.registerQuery(query);\n    }\n\n    return next();\n  }\n  /**\n   * On query, if it exists in our list of queries, call it.\n   *\n   * @param {Object} query\n   * @param {Editor} editor\n   * @param {Function} next\n   */\n\n\n  function onQuery(query, editor, next) {\n    var type = query.type,\n        args = query.args;\n    var fn = queries[type];\n    if (!fn) return next();\n    var ret = fn.apply(undefined, [editor].concat(toConsumableArray(args)));\n    return ret === undefined ? next() : ret;\n  }\n  /**\n   * Return the plugin.\n   *\n   * @type {Object}\n   */\n\n\n  return {\n    onConstruct: onConstruct,\n    onQuery: onQuery\n  };\n}\n/**\n * Export.\n *\n * @type {Object}\n */\n\n/**\n * Define a Slate error.\n *\n * @type {SlateError}\n */\n\n\nvar SlateError = function (_Error) {\n  inherits(SlateError, _Error);\n\n  function SlateError(code) {\n    var attrs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, SlateError);\n\n    var _this = possibleConstructorReturn(this, (SlateError.__proto__ || Object.getPrototypeOf(SlateError)).call(this, code));\n\n    _this.code = code;\n\n    for (var key in attrs) {\n      _this[key] = attrs[key];\n    }\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(_this, _this.constructor);\n    } else {\n      _this.stack = new Error().stack;\n    }\n\n    return _this;\n  }\n\n  return SlateError;\n}(Error);\n/**\n * Export.\n *\n * @type {SlateError}\n */\n\n\nfunction SchemaPlugin(schema) {\n  var rules = schema.rules,\n      document = schema.document,\n      blocks = schema.blocks,\n      inlines = schema.inlines,\n      marks = schema.marks;\n  var schemaRules = [];\n\n  if (rules) {\n    schemaRules = schemaRules.concat(rules);\n  }\n\n  if (document) {\n    schemaRules.push(_extends({\n      match: [{\n        object: 'document'\n      }]\n    }, document));\n  }\n\n  if (blocks) {\n    for (var key in blocks) {\n      schemaRules.push(_extends({\n        match: [{\n          object: 'block',\n          type: key\n        }]\n      }, blocks[key]));\n    }\n  }\n\n  if (inlines) {\n    for (var _key in inlines) {\n      schemaRules.push(_extends({\n        match: [{\n          object: 'inline',\n          type: _key\n        }]\n      }, inlines[_key]));\n    }\n  }\n\n  if (marks) {\n    for (var _key2 in marks) {\n      schemaRules.push(_extends({\n        match: [{\n          object: 'mark',\n          type: _key2\n        }]\n      }, marks[_key2]));\n    }\n  }\n  /**\n   * Check if a `mark` is void based on the schema rules.\n   *\n   * @param {Editor} editor\n   * @param {Mark} mark\n   * @return {Boolean}\n   */\n\n\n  function isAtomic(editor, mark) {\n    var rule = schemaRules.find(function (r) {\n      return 'isAtomic' in r && testRules(mark, r.match);\n    });\n    return rule && rule.isAtomic;\n  }\n  /**\n   * Check if a `node` is void based on the schema rules.\n   *\n   * @param {Editor} editor\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n\n  function isVoid(editor, node) {\n    var rule = schemaRules.find(function (r) {\n      return 'isVoid' in r && testRules(node, r.match);\n    });\n    return rule && rule.isVoid;\n  }\n  /**\n   * Normalize a `node` with the schema rules, returning a function that will\n   * fix the invalid node, or void if the node is valid.\n   *\n   * @param {Node} node\n   * @param {Editor} editor\n   * @param {Function} next\n   * @return {Function|Void}\n   */\n\n\n  function normalizeNode(node, editor, next) {\n    var error = validateNode(node, editor, function () {});\n    if (!error) return next();\n    return function () {\n      var rule = error.rule;\n      var size = editor.operations.size; // First run the user-provided `normalize` function if one exists...\n\n      if (rule.normalize) {\n        rule.normalize(editor, error);\n      } // If the `normalize` function did not add any operations to the editor\n      // object, it can't have normalized, so run the default one.\n\n\n      if (editor.operations.size === size) {\n        defaultNormalize(editor, error);\n      }\n    };\n  }\n  /**\n   * Validate a `node` with the schema rules, returning a `SlateError` if it's\n   * invalid.\n   *\n   * @param {Node} node\n   * @param {Editor} editor\n   * @param {Function} next\n   * @return {Error|Void}\n   */\n\n\n  function validateNode(node, editor, next) {\n    var matches = schemaRules.filter(function (r) {\n      return testRules(node, r.match);\n    });\n    var failure = validateRules(node, matches, schemaRules, {\n      every: true\n    });\n    if (!failure) return next();\n    var error = new SlateError(failure.code, failure);\n    return error;\n  }\n  /**\n   * On schema-related queries, respond if we can.\n   *\n   * @param {Object} query\n   * @param {Function} next\n   */\n\n\n  var queries = QueriesPlugin({\n    isAtomic: isAtomic,\n    isVoid: isVoid\n  });\n  /**\n   * Return the plugins.\n   *\n   * @type {Object}\n   */\n\n  return [{\n    normalizeNode: normalizeNode,\n    validateNode: validateNode\n  }, queries];\n}\n/**\n * Normalize an invalid value with `error` with default remedies.\n *\n * @param {Editor} editor\n * @param {SlateError} error\n */\n\n\nfunction defaultNormalize(editor, error) {\n  var code = error.code,\n      node = error.node,\n      child = error.child,\n      next = error.next,\n      previous = error.previous,\n      key = error.key,\n      mark = error.mark;\n\n  switch (code) {\n    case 'child_max_invalid':\n    case 'child_object_invalid':\n    case 'child_type_invalid':\n    case 'child_unknown':\n    case 'first_child_object_invalid':\n    case 'first_child_type_invalid':\n    case 'last_child_object_invalid':\n    case 'last_child_type_invalid':\n      {\n        return child.object === 'text' && node.object === 'block' && node.nodes.size === 1 ? editor.removeNodeByKey(node.key) : editor.removeNodeByKey(child.key);\n      }\n\n    case 'previous_sibling_object_invalid':\n    case 'previous_sibling_type_invalid':\n      {\n        return previous.object === 'text' && node.object === 'block' && node.nodes.size === 1 ? editor.removeNodeByKey(node.key) : editor.removeNodeByKey(previous.key);\n      }\n\n    case 'next_sibling_object_invalid':\n    case 'next_sibling_type_invalid':\n      {\n        return next.object === 'text' && node.object === 'block' && node.nodes.size === 1 ? editor.removeNodeByKey(node.key) : editor.removeNodeByKey(next.key);\n      }\n\n    case 'child_min_invalid':\n    case 'node_text_invalid':\n    case 'parent_object_invalid':\n    case 'parent_type_invalid':\n      {\n        return node.object === 'document' ? node.nodes.forEach(function (n) {\n          return editor.removeNodeByKey(n.key);\n        }) : editor.removeNodeByKey(node.key);\n      }\n\n    case 'node_data_invalid':\n      {\n        return node.data.get(key) === undefined && node.object !== 'document' ? editor.removeNodeByKey(node.key) : editor.setNodeByKey(node.key, {\n          data: node.data.delete(key)\n        });\n      }\n\n    case 'node_mark_invalid':\n      {\n        return node.getTexts().forEach(function (t) {\n          return editor.removeMarkByKey(t.key, 0, t.text.length, mark);\n        });\n      }\n\n    default:\n      {\n        return editor.removeNodeByKey(node.key);\n      }\n  }\n}\n/**\n * Check that an `object` matches one of a set of `rules`.\n *\n * @param {Mixed} object\n * @param {Object|Array} rules\n * @return {Boolean}\n */\n\n\nfunction testRules(object, rules) {\n  var error = validateRules(object, rules);\n  return !error;\n}\n/**\n * Validate that a `object` matches a `rule` object or array.\n *\n * @param {Mixed} object\n * @param {Object|Array} rule\n * @param {Array|Void} rules\n * @return {Error|Void}\n */\n\n\nfunction validateRules(object, rule, rules) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var _options$every = options.every,\n      every = _options$every === undefined ? false : _options$every;\n\n  if (Array.isArray(rule)) {\n    var array = rule.length ? rule : [{}];\n    var first = void 0;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = array[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var r = _step.value;\n\n        var _error = validateRules(object, r, rules);\n\n        first = first || _error;\n        if (every && _error) return _error;\n        if (!every && !_error) return;\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return first;\n  }\n\n  var error = validateObject(object, rule) || validateType(object, rule) || validateData(object, rule) || validateMarks(object, rule) || validateText(object, rule) || validateFirst(object, rule) || validateLast(object, rule) || validateNodes(object, rule, rules);\n  return error;\n}\n\nfunction validateObject(node, rule) {\n  if (rule.object == null) return;\n  if (rule.object === node.object) return;\n  if (typeof rule.object === 'function' && rule.object(node.object)) return;\n  return fail('node_object_invalid', {\n    rule: rule,\n    node: node\n  });\n}\n\nfunction validateType(node, rule) {\n  if (rule.type == null) return;\n  if (rule.type === node.type) return;\n  if (typeof rule.type === 'function' && rule.type(node.type)) return;\n  return fail('node_type_invalid', {\n    rule: rule,\n    node: node\n  });\n}\n\nfunction validateData(node, rule) {\n  if (rule.data == null) return;\n  if (node.data == null) return;\n\n  if (typeof rule.data === 'function') {\n    if (rule.data(node.data)) return;\n    return fail('node_data_invalid', {\n      rule: rule,\n      node: node\n    });\n  }\n\n  for (var key in rule.data) {\n    var fn = rule.data[key];\n    var value = node.data && node.data.get(key);\n    var valid = typeof fn === 'function' ? fn(value) : fn === value;\n    if (valid) continue;\n    return fail('node_data_invalid', {\n      rule: rule,\n      node: node,\n      key: key,\n      value: value\n    });\n  }\n}\n\nfunction validateMarks(node, rule) {\n  if (rule.marks == null) return;\n  var marks = node.getMarks().toArray();\n\n  var _loop = function _loop(mark) {\n    var valid = rule.marks.some(function (def) {\n      return typeof def.type === 'function' ? def.type(mark.type) : def.type === mark.type;\n    });\n    if (valid) return 'continue';\n    return {\n      v: fail('node_mark_invalid', {\n        rule: rule,\n        node: node,\n        mark: mark\n      })\n    };\n  };\n\n  var _iteratorNormalCompletion2 = true;\n  var _didIteratorError2 = false;\n  var _iteratorError2 = undefined;\n\n  try {\n    for (var _iterator2 = marks[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n      var mark = _step2.value;\n\n      var _ret = _loop(mark);\n\n      switch (_ret) {\n        case 'continue':\n          continue;\n\n        default:\n          if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n      }\n    }\n  } catch (err) {\n    _didIteratorError2 = true;\n    _iteratorError2 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion2 && _iterator2.return) {\n        _iterator2.return();\n      }\n    } finally {\n      if (_didIteratorError2) {\n        throw _iteratorError2;\n      }\n    }\n  }\n}\n\nfunction validateText(node, rule) {\n  if (rule.text == null) return;\n  var text = node.text;\n  var valid = typeof rule.text === 'function' ? rule.text(text) : rule.text.test(text);\n  if (valid) return;\n  return fail('node_text_invalid', {\n    rule: rule,\n    node: node,\n    text: text\n  });\n}\n\nfunction validateFirst(node, rule) {\n  if (rule.first == null) return;\n  var first = node.nodes.first();\n  if (!first) return;\n  var error = validateRules(first, rule.first);\n  if (!error) return;\n  error.rule = rule;\n  error.node = node;\n  error.child = first;\n  error.code = error.code.replace('node_', 'first_child_');\n  return error;\n}\n\nfunction validateLast(node, rule) {\n  if (rule.last == null) return;\n  var last = node.nodes.last();\n  if (!last) return;\n  var error = validateRules(last, rule.last);\n  if (!error) return;\n  error.rule = rule;\n  error.node = node;\n  error.child = last;\n  error.code = error.code.replace('node_', 'last_child_');\n  return error;\n}\n\nfunction validateNodes(node, rule) {\n  var rules = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n  if (node.nodes == null) return;\n  var children = node.nodes;\n  var defs = rule.nodes != null ? rule.nodes.slice() : [];\n  var count = 0;\n  var lastCount = 0;\n  var min = null;\n  var index = -1;\n  var def = null;\n  var max = null;\n  var child = null;\n  var previous = null;\n  var next = null;\n\n  function nextDef() {\n    if (defs.length === 0) return false;\n    def = defs.shift();\n    lastCount = count;\n    count = 0;\n    min = def.min || null;\n    max = def.max || null;\n    return true;\n  }\n\n  function nextChild() {\n    index += 1;\n    previous = index ? children.get(index - 1) : null;\n    child = children.get(index);\n    next = children.get(index + 1);\n    if (!child) return false;\n    lastCount = count;\n    count += 1;\n    return true;\n  }\n\n  function rewind() {\n    if (index > 0) {\n      index -= 1;\n      count = lastCount;\n    }\n  }\n\n  if (rule.nodes != null) {\n    nextDef();\n  }\n\n  while (nextChild()) {\n    var err = validateParent(node, child, rules) || validatePrevious(node, child, previous, index, rules) || validateNext(node, child, next, index, rules);\n    if (err) return err;\n\n    if (rule.nodes != null) {\n      if (!def) {\n        return fail('child_unknown', {\n          rule: rule,\n          node: node,\n          child: child,\n          index: index\n        });\n      }\n\n      if (def.match) {\n        var error = validateRules(child, def.match);\n\n        if (error) {\n          // Since we want to report overflow on last matching child we don't\n          // immediately check for count > max, but instead do so once we find\n          // a child that doesn't match.\n          if (max != null && count - 1 > max) {\n            rewind();\n            return fail('child_max_invalid', {\n              rule: rule,\n              node: node,\n              index: index,\n              child: children.get(index),\n              count: count,\n              limit: max\n            });\n          }\n\n          var lastMin = min; // If there are more groups after this one then child might actually\n          // be valid.\n\n          if (nextDef()) {\n            // If we've already satisfied the minimum for the current group,\n            // then we can rewind and proceed to the next group.\n            if (lastCount - 1 >= lastMin) {\n              index -= 1;\n              continue;\n            } // Otherwise we know that current value is underflowing. There are\n            // three possible causes for this...\n            // 1. There might just not be enough elements for current group, and\n            // current child is in fact the first of the next group. If so, the\n            // next def will not report errors, in which case we can rewind and\n            // report an minimum error.\n\n\n            if (validateRules(child, def.match) == null) {\n              rewind();\n              return fail('child_min_invalid', {\n                rule: rule,\n                node: node,\n                index: index,\n                count: lastCount - 1,\n                limit: lastMin\n              });\n            } // 2. The current group is underflowing, but there is also an\n            // invalid child before the next group.\n            // 3. Or the current group is not underflowing but it appears so\n            // because there's an invalid child between its members.\n            // It's either the second or third case. If it's the second then\n            // we could report an underflow, but presence of an invalid child\n            // is arguably more important, so we report it first. It also lets\n            // us avoid checking for which case exactly is it.\n\n\n            error.rule = rule;\n            error.node = node;\n            error.child = child;\n            error.index = index;\n            error.code = error.code.replace('node_', 'child_');\n            return error;\n          } // Otherwise either we exhausted the last group, in which case it's\n          // an unknown child, ...\n\n\n          if (max != null && count > max) {\n            return fail('child_unknown', {\n              rule: rule,\n              node: node,\n              child: child,\n              index: index\n            });\n          } // ... or it's an invalid child for the last group.\n\n\n          error.rule = rule;\n          error.node = node;\n          error.child = child;\n          error.index = index;\n          error.code = error.code.replace('node_', 'child_');\n          return error;\n        }\n      }\n    }\n  } // Since we want to report overflow on last matching child we don't\n  // immediately check for count > max, but do so after processing all nodes.\n\n\n  if (max != null && count > max) {\n    return fail('child_max_invalid', {\n      rule: rule,\n      node: node,\n      index: index - 1,\n      count: count,\n      child: children.get(index - 1),\n      limit: max\n    });\n  }\n\n  if (rule.nodes != null) {\n    do {\n      if (count < min) {\n        return fail('child_min_invalid', {\n          rule: rule,\n          node: node,\n          index: index,\n          count: count,\n          limit: min\n        });\n      }\n    } while (nextDef());\n  }\n}\n\nfunction validateParent(node, child, rules) {\n  var _iteratorNormalCompletion3 = true;\n  var _didIteratorError3 = false;\n  var _iteratorError3 = undefined;\n\n  try {\n    for (var _iterator3 = rules[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n      var rule = _step3.value;\n      if (rule.parent == null) continue;\n      if (!testRules(child, rule.match)) continue;\n      var error = validateRules(node, rule.parent);\n      if (!error) continue;\n      error.rule = rule;\n      error.parent = node;\n      error.node = child;\n      error.code = error.code.replace('node_', 'parent_');\n      return error;\n    }\n  } catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion3 && _iterator3.return) {\n        _iterator3.return();\n      }\n    } finally {\n      if (_didIteratorError3) {\n        throw _iteratorError3;\n      }\n    }\n  }\n}\n\nfunction validatePrevious(node, child, previous, index, rules) {\n  if (!previous) return;\n  var _iteratorNormalCompletion4 = true;\n  var _didIteratorError4 = false;\n  var _iteratorError4 = undefined;\n\n  try {\n    for (var _iterator4 = rules[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n      var rule = _step4.value;\n      if (rule.previous == null) continue;\n      if (!testRules(child, rule.match)) continue;\n      var error = validateRules(previous, rule.previous);\n      if (!error) continue;\n      error.rule = rule;\n      error.node = node;\n      error.child = child;\n      error.index = index;\n      error.previous = previous;\n      error.code = error.code.replace('node_', 'previous_sibling_');\n      return error;\n    }\n  } catch (err) {\n    _didIteratorError4 = true;\n    _iteratorError4 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion4 && _iterator4.return) {\n        _iterator4.return();\n      }\n    } finally {\n      if (_didIteratorError4) {\n        throw _iteratorError4;\n      }\n    }\n  }\n}\n\nfunction validateNext(node, child, next, index, rules) {\n  if (!next) return;\n  var _iteratorNormalCompletion5 = true;\n  var _didIteratorError5 = false;\n  var _iteratorError5 = undefined;\n\n  try {\n    for (var _iterator5 = rules[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n      var rule = _step5.value;\n      if (rule.next == null) continue;\n      if (!testRules(child, rule.match)) continue;\n      var error = validateRules(next, rule.next);\n      if (!error) continue;\n      error.rule = rule;\n      error.node = node;\n      error.child = child;\n      error.index = index;\n      error.next = next;\n      error.code = error.code.replace('node_', 'next_sibling_');\n      return error;\n    }\n  } catch (err) {\n    _didIteratorError5 = true;\n    _iteratorError5 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion5 && _iterator5.return) {\n        _iterator5.return();\n      }\n    } finally {\n      if (_didIteratorError5) {\n        throw _iteratorError5;\n      }\n    }\n  }\n}\n/**\n * Create an interim failure object with `code` and `attrs`.\n *\n * @param {String} code\n * @param {Object} attrs\n * @return {Object}\n */\n\n\nfunction fail(code, attrs) {\n  return _extends({\n    code: code\n  }, attrs);\n}\n/**\n * Export.\n *\n * @type {Object}\n */\n\n\nfunction deleteExpanded(editor) {\n  var value = editor.value;\n  var selection = value.selection;\n\n  if (selection.isExpanded) {\n    editor.delete();\n  }\n}\n/**\n * Commands.\n *\n * @type {Object}\n */\n\n\nvar Commands$6 = {};\n/**\n * Add a `mark` to the characters in the current selection.\n *\n * @param {Editor} editor\n * @param {Mark} mark\n */\n\nCommands$6.addMark = function (editor, mark) {\n  mark = Mark.create(mark);\n  var value = editor.value;\n  var document = value.document,\n      selection = value.selection;\n\n  if (selection.isExpanded) {\n    editor.addMarkAtRange(selection, mark);\n  } else if (selection.marks) {\n    var marks = selection.marks.add(mark);\n    var sel = selection.set('marks', marks);\n    editor.select(sel);\n  } else {\n    var _marks = document.getActiveMarksAtRange(selection).add(mark);\n\n    var _sel = selection.set('marks', _marks);\n\n    editor.select(_sel);\n  }\n};\n/**\n * Add a list of `marks` to the characters in the current selection.\n *\n * @param {Editor} editor\n * @param {Set<Mark>|Array<Object>} marks\n */\n\n\nCommands$6.addMarks = function (editor, marks) {\n  marks.forEach(function (mark) {\n    return editor.addMark(mark);\n  });\n};\n/**\n * Delete at the current selection.\n *\n * @param {Editor} editor\n */\n\n\nCommands$6.delete = function (editor) {\n  var value = editor.value;\n  var selection = value.selection;\n  editor.deleteAtRange(selection); // COMPAT: Ensure that the selection is collapsed, because in certain cases\n  // when deleting across inline nodes, when splitting the inline node the end\n  // point of the selection will end up after the split point.\n\n  editor.moveToFocus();\n};\n/**\n * Delete backward `n` characters.\n *\n * @param {Editor} editor\n * @param {Number} n (optional)\n */\n\n\nCommands$6.deleteBackward = function (editor) {\n  var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var value = editor.value;\n  var selection = value.selection;\n\n  if (selection.isExpanded) {\n    editor.delete();\n  } else {\n    editor.deleteBackwardAtRange(selection, n);\n  }\n};\n/**\n * Delete backward one character.\n *\n * @param {Editor} editor\n */\n\n\nCommands$6.deleteCharBackward = function (editor) {\n  var value = editor.value;\n  var selection = value.selection;\n\n  if (selection.isExpanded) {\n    editor.delete();\n  } else {\n    editor.deleteCharBackwardAtRange(selection);\n  }\n};\n/**\n * Delete backward one line.\n *\n * @param {Editor} editor\n */\n\n\nCommands$6.deleteLineBackward = function (editor) {\n  var value = editor.value;\n  var selection = value.selection;\n\n  if (selection.isExpanded) {\n    editor.delete();\n  } else {\n    editor.deleteLineBackwardAtRange(selection);\n  }\n};\n/**\n * Delete backward one word.\n *\n * @param {Editor} editor\n */\n\n\nCommands$6.deleteWordBackward = function (editor) {\n  var value = editor.value;\n  var selection = value.selection;\n\n  if (selection.isExpanded) {\n    editor.delete();\n  } else {\n    editor.deleteWordBackwardAtRange(selection);\n  }\n};\n/**\n * Delete backward `n` characters.\n *\n * @param {Editor} editor\n * @param {Number} n (optional)\n */\n\n\nCommands$6.deleteForward = function (editor) {\n  var n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var value = editor.value;\n  var selection = value.selection;\n\n  if (selection.isExpanded) {\n    editor.delete();\n  } else {\n    editor.deleteForwardAtRange(selection, n);\n  }\n};\n/**\n * Delete backward one character.\n *\n * @param {Editor} editor\n */\n\n\nCommands$6.deleteCharForward = function (editor) {\n  var value = editor.value;\n  var selection = value.selection;\n\n  if (selection.isExpanded) {\n    editor.delete();\n  } else {\n    editor.deleteCharForwardAtRange(selection);\n  }\n};\n/**\n * Delete backward one line.\n *\n * @param {Editor} editor\n */\n\n\nCommands$6.deleteLineForward = function (editor) {\n  var value = editor.value;\n  var selection = value.selection;\n\n  if (selection.isExpanded) {\n    editor.delete();\n  } else {\n    editor.deleteLineForwardAtRange(selection);\n  }\n};\n/**\n * Delete backward one word.\n *\n * @param {Editor} editor\n */\n\n\nCommands$6.deleteWordForward = function (editor) {\n  var value = editor.value;\n  var selection = value.selection;\n\n  if (selection.isExpanded) {\n    editor.delete();\n  } else {\n    editor.deleteWordForwardAtRange(selection);\n  }\n};\n/**\n * Insert a `block` at the current selection.\n *\n * @param {Editor} editor\n * @param {String|Object|Block} block\n */\n\n\nCommands$6.insertBlock = function (editor, block) {\n  deleteExpanded(editor);\n  block = Block.create(block);\n  var value = editor.value;\n  var selection = value.selection;\n  editor.insertBlockAtRange(selection, block); // If the node was successfully inserted, update the selection.\n\n  var node = editor.value.document.getNode(block.key);\n  if (node) editor.moveToEndOfNode(node);\n};\n/**\n * Insert a `fragment` at the current selection.\n *\n * @param {Editor} editor\n * @param {Document} fragment\n */\n\n\nCommands$6.insertFragment = function (editor, fragment) {\n  if (!fragment.nodes.size) return;\n  deleteExpanded(editor);\n  var value = editor.value;\n  var _value = value,\n      document = _value.document,\n      selection = _value.selection;\n  var start = selection.start,\n      end = selection.end;\n  var _value2 = value,\n      startText = _value2.startText,\n      endText = _value2.endText,\n      startInline = _value2.startInline;\n  var lastText = fragment.getLastText();\n  var lastInline = fragment.getClosestInline(lastText.key);\n  var lastBlock = fragment.getClosestBlock(lastText.key);\n  var firstChild = fragment.nodes.first();\n  var lastChild = fragment.nodes.last();\n  var keys = document.getTexts().map(function (text) {\n    return text.key;\n  });\n  var isAppending = !startInline || start.isAtStartOfNode(startText) || end.isAtStartOfNode(startText) || start.isAtEndOfNode(endText) || end.isAtEndOfNode(endText);\n  var isInserting = firstChild.hasBlockChildren() || lastChild.hasBlockChildren();\n  editor.insertFragmentAtRange(selection, fragment);\n  value = editor.value;\n  document = value.document;\n  var newTexts = document.getTexts().filter(function (n) {\n    return !keys.includes(n.key);\n  });\n  var newText = isAppending ? newTexts.last() : newTexts.takeLast(2).first();\n\n  if (newText && (lastInline || isInserting)) {\n    editor.moveToEndOfNode(newText);\n  } else if (newText) {\n    editor.moveToStartOfNode(newText).moveForward(lastBlock.text.length);\n  }\n};\n/**\n * Insert an `inline` at the current selection.\n *\n * @param {Editor} editor\n * @param {String|Object|Inline} inline\n */\n\n\nCommands$6.insertInline = function (editor, inline) {\n  deleteExpanded(editor);\n  inline = Inline.create(inline);\n  var value = editor.value;\n  var selection = value.selection;\n  editor.insertInlineAtRange(selection, inline); // If the node was successfully inserted, update the selection.\n\n  var node = editor.value.document.getNode(inline.key);\n  if (node) editor.moveToEndOfNode(node);\n};\n/**\n * Insert a string of `text` with optional `marks` at the current selection.\n *\n * @param {Editor} editor\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n */\n\n\nCommands$6.insertText = function (editor, text, marks) {\n  deleteExpanded(editor);\n  var value = editor.value;\n  var document = value.document,\n      selection = value.selection;\n  marks = marks || selection.marks || document.getInsertMarksAtRange(selection);\n  editor.insertTextAtRange(selection, text, marks); // If the text was successfully inserted, and the selection had marks on it,\n  // unset the selection's marks.\n\n  if (selection.marks && document !== editor.value.document) {\n    editor.select({\n      marks: null\n    });\n  }\n};\n/**\n * Remove a `mark` from the characters in the current selection.\n *\n * @param {Editor} editor\n * @param {Mark} mark\n */\n\n\nCommands$6.removeMark = function (editor, mark) {\n  mark = Mark.create(mark);\n  var value = editor.value;\n  var document = value.document,\n      selection = value.selection;\n\n  if (selection.isExpanded) {\n    editor.removeMarkAtRange(selection, mark);\n  } else if (selection.marks) {\n    var marks = selection.marks.remove(mark);\n    var sel = selection.set('marks', marks);\n    editor.select(sel);\n  } else {\n    var _marks2 = document.getActiveMarksAtRange(selection).remove(mark);\n\n    var _sel2 = selection.set('marks', _marks2);\n\n    editor.select(_sel2);\n  }\n};\n/**\n * Replace an `oldMark` with a `newMark` in the characters in the current selection.\n *\n * @param {Editor} editor\n * @param {Mark} oldMark\n * @param {Mark} newMark\n */\n\n\nCommands$6.replaceMark = function (editor, oldMark, newMark) {\n  editor.removeMark(oldMark);\n  editor.addMark(newMark);\n};\n/**\n * Set the `properties` of block nodes.\n *\n * @param {Editor} editor\n * @param {Object|String} properties\n */\n\n\nCommands$6.setBlocks = function (editor, properties) {\n  var value = editor.value;\n  var selection = value.selection;\n  editor.setBlocksAtRange(selection, properties);\n};\n/**\n * Set the `properties` of inline nodes.\n *\n * @param {Editor} editor\n * @param {Object|String} properties\n */\n\n\nCommands$6.setInlines = function (editor, properties) {\n  var value = editor.value;\n  var selection = value.selection;\n  editor.setInlinesAtRange(selection, properties);\n};\n/**\n * Split the block node at the current selection, to optional `depth`.\n *\n * @param {Editor} editor\n * @param {Number} depth (optional)\n */\n\n\nCommands$6.splitBlock = function (editor) {\n  var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  deleteExpanded(editor);\n  var value = editor.value;\n  var selection = value.selection,\n      document = value.document;\n  var marks = selection.marks || document.getInsertMarksAtRange(selection);\n  editor.splitBlockAtRange(selection, depth).moveToEnd();\n\n  if (marks && marks.size !== 0) {\n    editor.select({\n      marks: marks\n    });\n  }\n};\n/**\n * Split the inline nodes to optional `height`.\n *\n * @param {Editor} editor\n * @param {Number} height (optional)\n */\n\n\nCommands$6.splitInline = function (editor, height) {\n  deleteExpanded(editor);\n  var value = editor.value;\n  var selection = value.selection;\n  editor.splitInlineAtRange(selection, height);\n};\n/**\n * Add or remove a `mark` from the characters in the current selection,\n * depending on whether it's already there.\n *\n * @param {Editor} editor\n * @param {Mark} mark\n */\n\n\nCommands$6.toggleMark = function (editor, mark) {\n  mark = Mark.create(mark);\n  var value = editor.value;\n  var exists = value.activeMarks.has(mark);\n\n  if (exists) {\n    editor.removeMark(mark);\n  } else {\n    editor.addMark(mark);\n  }\n};\n/**\n * Unwrap nodes from a block with `properties`.\n *\n * @param {Editor} editor\n * @param {String|Object} properties\n */\n\n\nCommands$6.unwrapBlock = function (editor, properties) {\n  var value = editor.value;\n  var selection = value.selection;\n  editor.unwrapBlockAtRange(selection, properties);\n};\n/**\n * Unwrap nodes from an inline with `properties`.\n *\n * @param {Editor} editor\n * @param {String|Object} properties\n */\n\n\nCommands$6.unwrapInline = function (editor, properties) {\n  var value = editor.value;\n  var selection = value.selection;\n  editor.unwrapInlineAtRange(selection, properties);\n};\n/**\n * Wrap nodes in a new `block`.\n *\n * @param {Editor} editor\n * @param {Block|Object|String} block\n */\n\n\nCommands$6.wrapBlock = function (editor, block) {\n  var value = editor.value;\n  var selection = value.selection;\n  editor.wrapBlockAtRange(selection, block);\n};\n/**\n * Wrap nodes in a new `inline`.\n *\n * @param {Editor} editor\n * @param {Inline|Object|String} inline\n */\n\n\nCommands$6.wrapInline = function (editor, inline) {\n  var value = editor.value;\n  var selection = value.selection;\n  editor.wrapInlineAtRange(selection, inline);\n};\n/**\n * Wrap the current selection with prefix/suffix.\n *\n * @param {Editor} editor\n * @param {String} prefix\n * @param {String} suffix\n */\n\n\nCommands$6.wrapText = function (editor, prefix) {\n  var suffix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : prefix;\n  var value = editor.value;\n  var selection = value.selection;\n  editor.wrapTextAtRange(selection, prefix, suffix); // If the selection was collapsed, it will have moved the start offset too.\n\n  if (selection.isCollapsed) {\n    editor.moveStartBackward(prefix.length);\n  } // Adding the suffix will have pushed the end of the selection further on, so\n  // we need to move it back to account for this.\n\n\n  editor.moveEndBackward(suffix.length); // There's a chance that the selection points moved \"through\" each other,\n  // resulting in a now-incorrect selection direction.\n\n  if (selection.isForward !== editor.value.selection.isForward) {\n    editor.flip();\n  }\n};\n/**\n * Export.\n *\n * @type {Object}\n */\n\n\nfunction CorePlugin() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _options$plugins = options.plugins,\n      plugins = _options$plugins === undefined ? [] : _options$plugins;\n  /**\n   * The core Slate commands.\n   *\n   * @type {Object}\n   */\n\n  var commands = CommandsPlugin(_extends({}, Commands$1, Commands$2, Commands$3, Commands$4, Commands$5, Commands$6));\n  /**\n   * The core Slate queries.\n   *\n   * @type {Object}\n   */\n\n  var queries = QueriesPlugin({\n    isAtomic: function isAtomic() {\n      return false;\n    },\n    isVoid: function isVoid() {\n      return false;\n    }\n  });\n  /**\n   * The core Slate schema.\n   *\n   * @type {Object}\n   */\n\n  var schema = SchemaPlugin({\n    rules: [// Only allow block nodes in documents.\n    {\n      match: {\n        object: 'document'\n      },\n      nodes: [{\n        match: {\n          object: 'block'\n        }\n      }]\n    }, // Only allow block nodes or inline and text nodes in blocks.\n    {\n      match: {\n        object: 'block',\n        first: {\n          object: 'block'\n        }\n      },\n      nodes: [{\n        match: {\n          object: 'block'\n        }\n      }]\n    }, {\n      match: {\n        object: 'block',\n        first: [{\n          object: 'inline'\n        }, {\n          object: 'text'\n        }]\n      },\n      nodes: [{\n        match: [{\n          object: 'inline'\n        }, {\n          object: 'text'\n        }]\n      }]\n    }, // Only allow inline and text nodes in inlines.\n    {\n      match: {\n        object: 'inline'\n      },\n      nodes: [{\n        match: [{\n          object: 'inline'\n        }, {\n          object: 'text'\n        }]\n      }]\n    }, // Ensure that block and inline nodes have at least one text child.\n    {\n      match: [{\n        object: 'block'\n      }, {\n        object: 'inline'\n      }],\n      nodes: [{\n        min: 1\n      }],\n      normalize: function normalize(editor, error) {\n        var code = error.code,\n            node = error.node;\n\n        if (code === 'child_min_invalid' && node.nodes.isEmpty()) {\n          editor.insertNodeByKey(node.key, 0, Text.create());\n        }\n      }\n    }, // Ensure that inline nodes are surrounded by text nodes.\n    {\n      match: {\n        object: 'block'\n      },\n      first: [{\n        object: 'block'\n      }, {\n        object: 'text'\n      }],\n      last: [{\n        object: 'block'\n      }, {\n        object: 'text'\n      }],\n      normalize: function normalize(editor, error) {\n        var code = error.code,\n            node = error.node;\n        var text = Text.create();\n        var i = void 0;\n\n        if (code === 'first_child_object_invalid') {\n          i = 0;\n        } else if (code === 'last_child_object_invalid') {\n          i = node.nodes.size;\n        } else {\n          return;\n        }\n\n        editor.insertNodeByKey(node.key, i, text);\n      }\n    }, {\n      match: {\n        object: 'inline'\n      },\n      first: [{\n        object: 'block'\n      }, {\n        object: 'text'\n      }],\n      last: [{\n        object: 'block'\n      }, {\n        object: 'text'\n      }],\n      previous: [{\n        object: 'block'\n      }, {\n        object: 'text'\n      }],\n      next: [{\n        object: 'block'\n      }, {\n        object: 'text'\n      }],\n      normalize: function normalize(editor, error) {\n        var code = error.code,\n            node = error.node,\n            index = error.index;\n        var text = Text.create();\n        var i = void 0;\n\n        if (code === 'first_child_object_invalid') {\n          i = 0;\n        } else if (code === 'last_child_object_invalid') {\n          i = node.nodes.size;\n        } else if (code === 'previous_sibling_object_invalid') {\n          i = index;\n        } else if (code === 'next_sibling_object_invalid') {\n          i = index + 1;\n        } else {\n          return;\n        }\n\n        editor.insertNodeByKey(node.key, i, text);\n      }\n    }, // Merge adjacent text nodes.\n    {\n      match: {\n        object: 'text'\n      },\n      next: [{\n        object: 'block'\n      }, {\n        object: 'inline'\n      }],\n      normalize: function normalize(editor, error) {\n        var code = error.code,\n            next = error.next;\n\n        if (code === 'next_sibling_object_invalid') {\n          editor.mergeNodeByKey(next.key);\n        }\n      }\n    }]\n  });\n  /**\n   * Return the plugins.\n   *\n   * @type {Array}\n   */\n\n  return [schema].concat(toConsumableArray(plugins), [commands, queries]);\n}\n/**\n * Export.\n *\n * @type {Object}\n */\n\n\nvar debug$2 = Debug('slate:editor');\n/**\n * Editor.\n *\n * @type {Editor}\n */\n\nvar Editor = function () {\n  /**\n   * Create a new `Editor` with `attrs`.\n   *\n   * @param {Object} attrs\n   * @param {Object} options\n   */\n  function Editor() {\n    var attrs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    classCallCheck(this, Editor);\n    var _options$controller = options.controller,\n        controller = _options$controller === undefined ? this : _options$controller,\n        _options$construct = options.construct,\n        construct = _options$construct === undefined ? true : _options$construct;\n    var _attrs$onChange = attrs.onChange,\n        onChange = _attrs$onChange === undefined ? function () {} : _attrs$onChange,\n        _attrs$plugins = attrs.plugins,\n        plugins = _attrs$plugins === undefined ? [] : _attrs$plugins,\n        _attrs$readOnly = attrs.readOnly,\n        readOnly = _attrs$readOnly === undefined ? false : _attrs$readOnly,\n        _attrs$value = attrs.value,\n        value = _attrs$value === undefined ? Value.create() : _attrs$value;\n    this.controller = controller;\n    this.middleware = {};\n    this.onChange = onChange;\n    this.operations = List();\n    this.readOnly = null;\n    this.value = null;\n    this.tmp = {\n      dirty: [],\n      flushing: false,\n      merge: null,\n      normalize: true,\n      save: true\n    };\n    var core = CorePlugin({\n      plugins: plugins\n    });\n    registerPlugin(this, core);\n\n    if (construct) {\n      this.run('onConstruct');\n      this.setReadOnly(readOnly);\n      this.setValue(value, options);\n    }\n  }\n  /**\n   * Apply an `operation` to the editor, updating its value.\n   *\n   * @param {Operation|Object} operation\n   * @return {Editor}\n   */\n\n\n  createClass(Editor, [{\n    key: 'applyOperation',\n    value: function applyOperation(operation) {\n      var _this = this;\n\n      var operations = this.operations,\n          controller = this.controller;\n      var value = this.value; // Add in the current `value` in case the operation was serialized.\n\n      if (isPlainObject(operation)) {\n        operation = _extends({}, operation, {\n          value: value\n        });\n      }\n\n      operation = Operation.create(operation); // Save the operation into the history. Since `save` is a command, we need\n      // to do it without normalizing, since it would have side effects.\n\n      this.withoutNormalizing(function () {\n        controller.save(operation);\n        value = _this.value;\n      }); // Apply the operation to the value.\n\n      debug$2('apply', {\n        operation: operation\n      });\n      this.value = operation.apply(value);\n      this.operations = operations.push(operation); // Get the paths of the affected nodes, and mark them as dirty.\n\n      var newDirtyPaths = getDirtyPaths(operation);\n      var dirty = this.tmp.dirty.reduce(function (memo, path) {\n        path = PathUtils.create(path);\n        var transformed = PathUtils.transform(path, operation);\n        memo = memo.concat(transformed.toArray());\n        return memo;\n      }, newDirtyPaths);\n      this.tmp.dirty = dirty; // If we're not already, queue the flushing process on the next tick.\n\n      if (!this.tmp.flushing) {\n        this.tmp.flushing = true;\n        Promise.resolve().then(function () {\n          return _this.flush();\n        });\n      }\n\n      return controller;\n    }\n    /**\n     * Flush the editor's current change.\n     *\n     * @return {Editor}\n     */\n\n  }, {\n    key: 'flush',\n    value: function flush() {\n      this.run('onChange');\n      var value = this.value,\n          operations = this.operations,\n          controller = this.controller;\n      var change = {\n        value: value,\n        operations: operations\n      };\n      this.operations = List();\n      this.tmp.flushing = false;\n      this.onChange(change);\n      return controller;\n    }\n    /**\n     * Trigger a command by `type` with `...args`.\n     *\n     * @param {String|Function} type\n     * @param {Any} ...args\n     * @return {Editor}\n     */\n\n  }, {\n    key: 'command',\n    value: function command(type) {\n      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      var controller = this.controller;\n\n      if (typeof type === 'function') {\n        type.apply(undefined, [controller].concat(args));\n        normalizeDirtyPaths(this);\n        return controller;\n      }\n\n      debug$2('command', {\n        type: type,\n        args: args\n      });\n      var obj = {\n        type: type,\n        args: args\n      };\n      this.run('onCommand', obj);\n      normalizeDirtyPaths(this);\n      return controller;\n    }\n    /**\n     * Checks if a command by `type` has been registered.\n     *\n     * @param {String} type\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'hasCommand',\n    value: function hasCommand(type) {\n      var controller = this.controller;\n      var has = type in controller && controller[type].__command;\n      return has;\n    }\n    /**\n     * Checks if a query by `type` has been registered.\n     *\n     * @param {String} type\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'hasQuery',\n    value: function hasQuery(type) {\n      var controller = this.controller;\n      var has = type in controller && controller[type].__query;\n      return has;\n    }\n    /**\n     * Normalize all of the nodes in the document from scratch.\n     *\n     * @return {Editor}\n     */\n\n  }, {\n    key: 'normalize',\n    value: function normalize() {\n      var value = this.value,\n          controller = this.controller;\n      var document = value.document;\n      var table = document.getKeysToPathsTable();\n      var paths = Object.values(table).map(PathUtils.create);\n      this.tmp.dirty = this.tmp.dirty.concat(paths);\n      normalizeDirtyPaths(this);\n      var selection = value.selection;\n      document = value.document;\n\n      if (selection.isUnset && document.nodes.size) {\n        controller.moveToStartOfDocument();\n      }\n\n      return controller;\n    }\n    /**\n     * Ask a query by `type` with `...args`.\n     *\n     * @param {String|Function} type\n     * @param {Any} ...args\n     * @return {Any}\n     */\n\n  }, {\n    key: 'query',\n    value: function query(type) {\n      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n\n      var controller = this.controller;\n\n      if (typeof type === 'function') {\n        return type.apply(undefined, [controller].concat(args));\n      }\n\n      debug$2('query', {\n        type: type,\n        args: args\n      });\n      var obj = {\n        type: type,\n        args: args\n      };\n      return this.run('onQuery', obj);\n    }\n    /**\n     * Register a command `type` with the editor.\n     *\n     * @param {String} type\n     * @return {Editor}\n     */\n\n  }, {\n    key: 'registerCommand',\n    value: function registerCommand(type) {\n      var _this2 = this;\n\n      var controller = this.controller;\n\n      if (type in controller && controller[type].__command) {\n        return controller;\n      }\n\n      invariant(!(type in controller), 'You cannot register a `' + type + '` command because it would overwrite an existing property of the `Editor`.');\n\n      var method = function method() {\n        for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n\n        return _this2.command.apply(_this2, [type].concat(args));\n      };\n\n      controller[type] = method;\n      method.__command = true;\n      return controller;\n    }\n    /**\n     * Register a query `type` with the editor.\n     *\n     * @param {String} type\n     * @return {Editor}\n     */\n\n  }, {\n    key: 'registerQuery',\n    value: function registerQuery(type) {\n      var _this3 = this;\n\n      var controller = this.controller;\n\n      if (type in controller && controller[type].__query) {\n        return controller;\n      }\n\n      invariant(!(type in controller), 'You cannot register a `' + type + '` query because it would overwrite an existing property of the `Editor`.');\n\n      var method = function method() {\n        for (var _len4 = arguments.length, args = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n          args[_key4] = arguments[_key4];\n        }\n\n        return _this3.query.apply(_this3, [type].concat(args));\n      };\n\n      controller[type] = method;\n      method.__query = true;\n      return controller;\n    }\n    /**\n     * Run through the middleware stack by `key` with `args`.\n     *\n     * @param {String} key\n     * @param {Any} ...args\n     * @return {Any}\n     */\n\n  }, {\n    key: 'run',\n    value: function run(key) {\n      for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        args[_key5 - 1] = arguments[_key5];\n      }\n\n      var controller = this.controller,\n          middleware = this.middleware;\n      var fns = middleware[key] || [];\n      var i = 0;\n\n      function next() {\n        var fn = fns[i++];\n        if (!fn) return;\n\n        for (var _len6 = arguments.length, overrides = Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n          overrides[_key6] = arguments[_key6];\n        }\n\n        if (overrides.length) {\n          args = overrides;\n        }\n\n        var ret = fn.apply(undefined, toConsumableArray(args).concat([controller, next]));\n        return ret;\n      }\n\n      Object.defineProperty(next, 'change', {\n        get: function get$$1() {\n          invariant(false, 'As of Slate 0.42, the `editor` is no longer passed as the third argument to event handlers. You can access it via `change.editor` instead.');\n        }\n      });\n      Object.defineProperty(next, 'onChange', {\n        get: function get$$1() {\n          invariant(false, 'As of Slate 0.42, the `editor` is no longer passed as the third argument to event handlers. You can access it via `change.editor` instead.');\n        }\n      });\n      Object.defineProperty(next, 'props', {\n        get: function get$$1() {\n          invariant(false, 'As of Slate 0.42, the `editor` is no longer passed as the third argument to event handlers. You can access it via `change.editor` instead.');\n        }\n      });\n      Object.defineProperty(next, 'schema', {\n        get: function get$$1() {\n          invariant(false, 'As of Slate 0.42, the `editor` is no longer passed as the third argument to event handlers. You can access it via `change.editor` instead.');\n        }\n      });\n      Object.defineProperty(next, 'stack', {\n        get: function get$$1() {\n          invariant(false, 'As of Slate 0.42, the `editor` is no longer passed as the third argument to event handlers. You can access it via `change.editor` instead.');\n        }\n      });\n      return next();\n    }\n    /**\n     * Set the `readOnly` flag.\n     *\n     * @param {Boolean} readOnly\n     * @return {Editor}\n     */\n\n  }, {\n    key: 'setReadOnly',\n    value: function setReadOnly(readOnly) {\n      this.readOnly = readOnly;\n      return this;\n    }\n    /**\n     * Set the editor's `value`.\n     *\n     * @param {Value} value\n     * @param {Options} options\n     * @return {Editor}\n     */\n\n  }, {\n    key: 'setValue',\n    value: function setValue(value) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _options$normalize = options.normalize,\n          normalize = _options$normalize === undefined ? value !== this.value : _options$normalize;\n      this.value = value;\n\n      if (normalize) {\n        this.normalize();\n      }\n\n      return this;\n    }\n    /**\n     * Apply a series of changes inside a synchronous `fn`, deferring\n     * normalization until after the function has finished executing.\n     *\n     * @param {Function} fn\n     * @return {Editor}\n     */\n\n  }, {\n    key: 'withoutNormalizing',\n    value: function withoutNormalizing(fn) {\n      var controller = this.controller;\n      var value = this.tmp.normalize;\n      this.tmp.normalize = false;\n      fn(controller);\n      this.tmp.normalize = value;\n      normalizeDirtyPaths(this);\n      return controller;\n    }\n    /**\n     * Deprecated.\n     */\n\n  }, {\n    key: 'change',\n    value: function change(fn) {\n      warning(false, 'As of Slate 0.43 the `change` object has been replaced with `editor`, so the `editor.change()` method is deprecated.`');\n\n      for (var _len7 = arguments.length, args = Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n        args[_key7 - 1] = arguments[_key7];\n      }\n\n      fn.apply(undefined, [this.controller].concat(args));\n    }\n  }, {\n    key: 'call',\n    value: function call(fn) {\n      warning(false, 'As of Slate 0.43 the `editor.call(fn)` method has been deprecated, please use `editor.command(fn)` instead.');\n\n      for (var _len8 = arguments.length, args = Array(_len8 > 1 ? _len8 - 1 : 0), _key8 = 1; _key8 < _len8; _key8++) {\n        args[_key8 - 1] = arguments[_key8];\n      }\n\n      fn.apply(undefined, [this.controller].concat(args));\n      return this.controller;\n    }\n  }, {\n    key: 'applyOperations',\n    value: function applyOperations(operations) {\n      var _this4 = this;\n\n      warning(false, 'As of Slate 0.43 the `applyOperations` method is deprecated, please apply each operation in a loop instead.');\n      operations.forEach(function (op) {\n        return _this4.applyOperation(op);\n      });\n      return this.controller;\n    }\n  }, {\n    key: 'setOperationFlag',\n    value: function setOperationFlag(key, value) {\n      warning(false, 'As of slate@0.41 the `change.setOperationFlag` method has been deprecated.');\n      this.tmp[key] = value;\n      return this;\n    }\n  }, {\n    key: 'getFlag',\n    value: function getFlag(key) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      warning(false, 'As of slate@0.41 the `change.getFlag` method has been deprecated.');\n      return options[key] !== undefined ? options[key] : this.tmp[key];\n    }\n  }, {\n    key: 'unsetOperationFlag',\n    value: function unsetOperationFlag(key) {\n      warning(false, 'As of slate@0.41 the `change.unsetOperationFlag` method has been deprecated.');\n      delete this.tmp[key];\n      return this;\n    }\n  }, {\n    key: 'withoutNormalization',\n    value: function withoutNormalization(fn) {\n      warning(false, 'As of slate@0.41 the `change.withoutNormalization` helper has been renamed to `change.withoutNormalizing`.');\n      return this.withoutNormalizing(fn);\n    }\n  }, {\n    key: 'editor',\n    get: function get$$1() {\n      warning(false, \"As of Slate 0.43 the `change` object has been replaced with `editor`, so you don't need to access `change.editor`.\");\n      return this.controller;\n    }\n  }]);\n  return Editor;\n}();\n/**\n * Get the \"dirty\" paths for a given `operation`.\n *\n * @param {Operation} operation\n * @return {Array}\n */\n\n\nfunction getDirtyPaths(operation) {\n  var type = operation.type,\n      node = operation.node,\n      path = operation.path,\n      newPath = operation.newPath;\n\n  switch (type) {\n    case 'add_mark':\n    case 'insert_text':\n    case 'remove_mark':\n    case 'remove_text':\n    case 'set_mark':\n    case 'set_node':\n      {\n        var ancestors = PathUtils.getAncestors(path).toArray();\n        return [].concat(toConsumableArray(ancestors), [path]);\n      }\n\n    case 'insert_node':\n      {\n        var table = node.getKeysToPathsTable();\n        var paths = Object.values(table).map(function (p) {\n          return path.concat(p);\n        });\n\n        var _ancestors = PathUtils.getAncestors(path).toArray();\n\n        return [].concat(toConsumableArray(_ancestors), [path], toConsumableArray(paths));\n      }\n\n    case 'split_node':\n      {\n        var _ancestors2 = PathUtils.getAncestors(path).toArray();\n\n        var nextPath = PathUtils.increment(path);\n        return [].concat(toConsumableArray(_ancestors2), [path, nextPath]);\n      }\n\n    case 'merge_node':\n      {\n        var _ancestors3 = PathUtils.getAncestors(path).toArray();\n\n        var previousPath = PathUtils.decrement(path);\n        return [].concat(toConsumableArray(_ancestors3), [previousPath]);\n      }\n\n    case 'move_node':\n      {\n        if (PathUtils.isEqual(path, newPath)) {\n          return [];\n        }\n\n        var oldAncestors = PathUtils.getAncestors(path).reduce(function (arr, p) {\n          arr.push.apply(arr, toConsumableArray(PathUtils.transform(p, operation).toArray()));\n          return arr;\n        }, []);\n        var newAncestors = PathUtils.getAncestors(newPath).reduce(function (arr, p) {\n          arr.push.apply(arr, toConsumableArray(PathUtils.transform(p, operation).toArray()));\n          return arr;\n        }, []);\n        return [].concat(toConsumableArray(oldAncestors), toConsumableArray(newAncestors));\n      }\n\n    case 'remove_node':\n      {\n        var _ancestors4 = PathUtils.getAncestors(path).toArray();\n\n        return [].concat(toConsumableArray(_ancestors4));\n      }\n\n    default:\n      {\n        return [];\n      }\n  }\n}\n/**\n * Normalize any new \"dirty\" paths that have been added to the change.\n *\n * @param {Editor}\n */\n\n\nfunction normalizeDirtyPaths(editor) {\n  if (!editor.tmp.normalize) {\n    return;\n  }\n\n  if (!editor.tmp.dirty.length) {\n    return;\n  }\n\n  editor.withoutNormalizing(function () {\n    while (editor.tmp.dirty.length) {\n      var path = editor.tmp.dirty.pop();\n      normalizeNodeByPath(editor, path);\n    }\n  });\n}\n/**\n * Normalize the node at a specific `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n */\n\n\nfunction normalizeNodeByPath(editor, path) {\n  var controller = editor.controller;\n  var value = editor.value;\n  var _value = value,\n      document = _value.document;\n  var node = document.assertNode(path);\n  var iterations = 0;\n  var max = 100 + (node.object === 'text' ? 1 : node.nodes.size);\n\n  while (node) {\n    var fn = node.normalize(controller);\n\n    if (!fn) {\n      break;\n    } // Run the normalize `fn` to fix the node.\n\n\n    fn(controller); // Attempt to re-find the node by path, or by key if it has changed\n    // locations in the tree continue iterating.\n\n    value = editor.value;\n    document = value.document;\n    var _node = node,\n        key = _node.key;\n    var found = document.getDescendant(path);\n\n    if (found && found.key === key) {\n      node = found;\n    } else {\n      found = document.getDescendant(key);\n\n      if (found) {\n        node = found;\n        path = document.getPath(key);\n      } else {\n        // If it no longer exists by key, it was removed, so we're done.\n        break;\n      }\n    } // Increment the iterations counter, and check to make sure that we haven't\n    // exceeded the max. Without this check, it's easy for the `normalize`\n    // function of a schema rule to be written incorrectly and for an infinite\n    // invalid loop to occur.\n\n\n    iterations++;\n\n    if (iterations > max) {\n      throw new Error('A schema rule could not be normalized after sufficient iterations. This is usually due to a `rule.normalize` or `plugin.normalizeNode` function of a schema being incorrectly written, causing an infinite loop.');\n    }\n  }\n}\n/**\n * Register a `plugin` with the editor.\n *\n * @param {Editor} editor\n * @param {Object|Array} plugin\n */\n\n\nfunction registerPlugin(editor, plugin) {\n  if (Array.isArray(plugin)) {\n    plugin.forEach(function (p) {\n      return registerPlugin(editor, p);\n    });\n    return;\n  }\n\n  var commands = plugin.commands,\n      queries = plugin.queries,\n      schema = plugin.schema,\n      rest = objectWithoutProperties(plugin, ['commands', 'queries', 'schema']);\n\n  if (commands) {\n    var commandsPlugin = CommandsPlugin(commands);\n    registerPlugin(editor, commandsPlugin);\n  }\n\n  if (queries) {\n    var queriesPlugin = QueriesPlugin(queries);\n    registerPlugin(editor, queriesPlugin);\n  }\n\n  if (schema) {\n    var schemaPlugin = SchemaPlugin(schema);\n    registerPlugin(editor, schemaPlugin);\n  }\n\n  for (var key in rest) {\n    var fn = rest[key];\n    var middleware = editor.middleware[key] = editor.middleware[key] || [];\n    middleware.push(fn);\n  }\n}\n/**\n * Export.\n *\n * @type {Editor}\n */\n\n/**\n * Mix in an `Interface` to a `Class`.\n *\n * @param {Class} Interface\n * @param {Class} Class\n */\n\n\nfunction mixin(Interface, Classes) {\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = Classes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var Class = _step.value; // Copy static properties from the interface.\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = Object.getOwnPropertyNames(Interface)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var name = _step2.value;\n          if (Class.hasOwnProperty(name)) continue;\n          var desc = Object.getOwnPropertyDescriptor(Interface, name);\n          Object.defineProperty(Class, name, desc);\n        } // Copy instance properties from the interface.\n\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = Object.getOwnPropertyNames(Interface.prototype)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var _name = _step3.value;\n          if (Class.prototype.hasOwnProperty(_name)) continue;\n          var desc = Object.getOwnPropertyDescriptor(Interface.prototype, _name);\n          Object.defineProperty(Class.prototype, _name, desc);\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n}\n\nfunction create$2(type) {\n  var TYPE = TYPES[type];\n  var camel = '' + type.charAt(0).toUpperCase() + type.slice(1);\n  var is$$1 = 'is' + camel;\n\n  var ObjectInterface = function () {\n    function ObjectInterface() {\n      classCallCheck(this, ObjectInterface);\n    }\n\n    createClass(ObjectInterface, [{\n      key: 'object',\n\n      /**\n       * Return the type of the object.\n       *\n       * @return {String}\n       */\n      get: function get$$1() {\n        return type;\n      }\n    }]);\n    return ObjectInterface;\n  }();\n\n  ObjectInterface[is$$1] = isObject.bind(null, type);\n  ObjectInterface.prototype[TYPE] = true;\n  return ObjectInterface;\n}\n/**\n * Mix in the object interfaces.\n */\n\n\nObject.entries({\n  Block: Block,\n  Change: Change,\n  Decoration: Decoration,\n  Document: Document,\n  Editor: Editor,\n  Inline: Inline,\n  Leaf: Leaf,\n  Mark: Mark,\n  Node: Node,\n  Operation: Operation,\n  Point: Point,\n  Range: Range,\n  Selection: Selection,\n  Text: Text,\n  Value: Value\n}).forEach(function (_ref) {\n  var _ref2 = slicedToArray(_ref, 2),\n      camel = _ref2[0],\n      obj = _ref2[1];\n\n  return mixin(create$2(camel.toLowerCase()), [obj]);\n});\n\nvar ModelInterface = function () {\n  function ModelInterface() {\n    classCallCheck(this, ModelInterface);\n  }\n\n  createClass(ModelInterface, [{\n    key: 'toJS',\n\n    /**\n     * Alias `toJS`.\n     */\n    value: function toJS() {\n      return this.toJSON.apply(this, arguments);\n    }\n  }], [{\n    key: 'fromJS',\n\n    /**\n     * Alias `fromJS`.\n     */\n    value: function fromJS() {\n      return this.fromJSON.apply(this, arguments);\n    }\n  }]);\n  return ModelInterface;\n}();\n/**\n * Mix in the common interface.\n *\n * @param {Record}\n */\n\n\nmixin(ModelInterface, [Block, Decoration, Document, Inline, Leaf, Mark, Node, Operation, Point, Range, Selection, Text, Value]);\n\nvar NodeInterface = function () {\n  function NodeInterface() {\n    classCallCheck(this, NodeInterface);\n  }\n\n  createClass(NodeInterface, [{\n    key: 'getFirstText',\n\n    /**\n     * Get the first text node of a node, or the node itself.\n     *\n     * @return {Node|Null}\n     */\n    value: function getFirstText() {\n      if (this.object === 'text') {\n        return this;\n      }\n\n      var descendant = null;\n      var found = this.nodes.find(function (node) {\n        if (node.object === 'text') return true;\n        descendant = node.getFirstText();\n        return !!descendant;\n      });\n      return descendant || found;\n    }\n    /**\n     * Get an object mapping all the keys in the node to their paths.\n     *\n     * @return {Object}\n     */\n\n  }, {\n    key: 'getKeysToPathsTable',\n    value: function getKeysToPathsTable() {\n      var ret = defineProperty({}, this.key, []);\n\n      if (this.nodes) {\n        this.nodes.forEach(function (node, i) {\n          var nested = node.getKeysToPathsTable();\n\n          for (var key in nested) {\n            var path = nested[key];\n            warning(!(key in ret), 'A node with a duplicate key of \"' + key + '\" was found! Duplicate keys are not allowed, you should use `node.regenerateKey` before inserting if you are reusing an existing node.');\n            ret[key] = [i].concat(toConsumableArray(path));\n          }\n        });\n      }\n\n      return ret;\n    }\n    /**\n     * Get the last text node of a node, or the node itself.\n     *\n     * @return {Node|Null}\n     */\n\n  }, {\n    key: 'getLastText',\n    value: function getLastText() {\n      if (this.object === 'text') {\n        return this;\n      }\n\n      var descendant = null;\n      var found = this.nodes.findLast(function (node) {\n        if (node.object === 'text') return true;\n        descendant = node.getLastText();\n        return descendant;\n      });\n      return descendant || found;\n    }\n    /**\n     * Get a node in the tree, or the node itself.\n     *\n     * @param {List|String} path\n     * @return {Node|Null}\n     */\n\n  }, {\n    key: 'getNode',\n    value: function getNode(path) {\n      path = this.resolvePath(path);\n      if (!path) return null;\n      if (this.object === 'text' && path.size) return null;\n      var node = path.size ? this.getDescendant(path) : this;\n      return node;\n    }\n    /**\n     * Find the path to a node.\n     *\n     * @param {String|List} key\n     * @return {List}\n     */\n\n  }, {\n    key: 'getPath',\n    value: function getPath(key) {\n      // Handle the case of passing in a path directly, to match other methods.\n      if (List.isList(key)) return key;\n      var dict = this.getKeysToPathsTable();\n      var path = dict[key];\n      return path ? List(path) : null;\n    }\n    /**\n     * Get the concatenated text string of a node.\n     *\n     * @return {String}\n     */\n\n  }, {\n    key: 'getText',\n    value: function getText() {\n      var children = this.object === 'text' ? this.leaves : this.nodes;\n      var text = children.reduce(function (memo, c) {\n        return memo + c.text;\n      }, '');\n      return text;\n    }\n    /**\n     * Check if a node exists.\n     *\n     * @param {List|String} path\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'hasNode',\n    value: function hasNode(path) {\n      var node = this.getNode(path);\n      return !!node;\n    }\n    /**\n     * Normalize the text node with an `editor`.\n     *\n     * @param {Editor} editor\n     * @return {Function|Void}\n     */\n\n  }, {\n    key: 'normalize',\n    value: function normalize(editor) {\n      var normalizer = editor.run('normalizeNode', this);\n      return normalizer;\n    }\n    /**\n     * Regenerate the node's key.\n     *\n     * @return {Node}\n     */\n\n  }, {\n    key: 'regenerateKey',\n    value: function regenerateKey() {\n      var key = KeyUtils.create();\n      var node = this.set('key', key);\n      return node;\n    }\n    /**\n     * Resolve a path from a path list or key string.\n     *\n     * An `index` can be provided, in which case paths created from a key string\n     * will have the index pushed onto them. This is helpful in cases where you\n     * want to accept either a `path` or a `key, index` combination for targeting\n     * a location in the tree that doesn't exist yet, like when inserting.\n     *\n     * @param {List|String} value\n     * @param {Number} index\n     * @return {List}\n     */\n\n  }, {\n    key: 'resolvePath',\n    value: function resolvePath(path, index) {\n      if (typeof path === 'string') {\n        path = this.getPath(path);\n\n        if (index != null) {\n          path = path.concat(index);\n        }\n      } else {\n        path = PathUtils.create(path);\n      }\n\n      return path;\n    }\n    /**\n     * Validate the node with an `editor`.\n     *\n     * @param {Editor} editor\n     * @return {Error|Void}\n     */\n\n  }, {\n    key: 'validate',\n    value: function validate(editor) {\n      var error = editor.run('validateNode', this);\n      return error;\n    }\n  }, {\n    key: 'text',\n\n    /**\n     * Get the concatenated text of the node.\n     *\n     * @return {String}\n     */\n    get: function get$$1() {\n      return this.getText();\n    }\n  }]);\n  return NodeInterface;\n}();\n/**\n * Memoize read methods.\n */\n\n\nmemoize(NodeInterface.prototype, ['getFirstText', 'getKeysToPathsTable', 'getLastText', 'getText', 'normalize', 'validate']);\n/**\n * Mix in the node interface.\n */\n\nmixin(NodeInterface, [Block, Document, Inline, Text]);\n\nvar ElementInterface = function () {\n  function ElementInterface() {\n    classCallCheck(this, ElementInterface);\n  }\n\n  createClass(ElementInterface, [{\n    key: 'addMark',\n\n    /**\n     * Add mark to text at `offset` and `length` in node by `path`.\n     *\n     * @param {List|String} path\n     * @param {Number} offset\n     * @param {Number} length\n     * @param {Mark} mark\n     * @return {Node}\n     */\n    value: function addMark(path, offset, length, mark) {\n      var node = this.assertDescendant(path);\n      path = this.resolvePath(path);\n      node = node.addMark(offset, length, mark);\n      var ret = this.replaceNode(path, node);\n      return ret;\n    }\n    /**\n     * Create a decoration with `properties` relative to the node.\n     *\n     * @param {Object|Decoration} properties\n     * @return {Decoration}\n     */\n\n  }, {\n    key: 'createDecoration',\n    value: function createDecoration(properties) {\n      properties = Decoration.createProperties(properties);\n      var decoration = this.resolveDecoration(properties);\n      return decoration;\n    }\n    /**\n     * Create a point with `properties` relative to the node.\n     *\n     * @param {Object|Point} properties\n     * @return {Range}\n     */\n\n  }, {\n    key: 'createPoint',\n    value: function createPoint(properties) {\n      properties = Point.createProperties(properties);\n      var point = this.resolvePoint(properties);\n      return point;\n    }\n    /**\n     * Create a range with `properties` relative to the node.\n     *\n     * @param {Object|Range} properties\n     * @return {Range}\n     */\n\n  }, {\n    key: 'createRange',\n    value: function createRange(properties) {\n      properties = Range.createProperties(properties);\n      var range = this.resolveRange(properties);\n      return range;\n    }\n    /**\n     * Create a selection with `properties` relative to the node.\n     *\n     * @param {Object|Selection} properties\n     * @return {Selection}\n     */\n\n  }, {\n    key: 'createSelection',\n    value: function createSelection(properties) {\n      properties = Selection.createProperties(properties);\n      var selection = this.resolveSelection(properties);\n      return selection;\n    }\n    /**\n     * Recursively filter all descendant nodes with `iterator`.\n     *\n     * @param {Function} iterator\n     * @return {List<Node>}\n     */\n\n  }, {\n    key: 'filterDescendants',\n    value: function filterDescendants(iterator) {\n      var matches = [];\n      this.forEachDescendant(function (node, i, nodes) {\n        if (iterator(node, i, nodes)) matches.push(node);\n      });\n      return List(matches);\n    }\n    /**\n     * Recursively find a descendant node by `iterator`.\n     *\n     * @param {Function} iterator\n     * @return {Node|Null}\n     */\n\n  }, {\n    key: 'findDescendant',\n    value: function findDescendant(iterator) {\n      var found = null;\n      this.forEachDescendant(function (node, i, nodes) {\n        if (iterator(node, i, nodes)) {\n          found = node;\n          return false;\n        }\n      });\n      return found;\n    }\n    /**\n     * Recursively find a descendant node and its path by `iterator`.\n     *\n     * @param {Function} iterator\n     * @return {Null|[Node, List]}\n     */\n\n  }, {\n    key: 'findDescendantAndPath',\n    value: function findDescendantAndPath(iterator) {\n      var pathToThisNode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PathUtils.create([]);\n      var findLast = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var found = void 0;\n      var foundPath = void 0;\n      this.forEachDescendantWithPath(function (node, path, nodes) {\n        if (iterator(node, path, nodes)) {\n          found = node;\n          foundPath = path;\n          return false;\n        }\n      }, pathToThisNode, findLast);\n      return found ? [found, foundPath] : null;\n    } // Easy helpers to avoid needing to pass findLast boolean\n\n  }, {\n    key: 'findFirstDescendantAndPath',\n    value: function findFirstDescendantAndPath(iterator, pathToThisNode) {\n      return this.findDescendantAndPath(iterator, pathToThisNode, false);\n    }\n  }, {\n    key: 'findLastDescendantAndPath',\n    value: function findLastDescendantAndPath(iterator, pathToThisNode) {\n      return this.findDescendantAndPath(iterator, pathToThisNode, true);\n    }\n    /**\n     * Recursively iterate over all descendant nodes with `iterator`. If the\n     * iterator returns false it will break the loop.\n     *\n     * @param {Function} iterator\n     */\n\n  }, {\n    key: 'forEachDescendant',\n    value: function forEachDescendant(iterator) {\n      var ret = void 0;\n      this.nodes.forEach(function (child, i, nodes) {\n        if (iterator(child, i, nodes) === false) {\n          ret = false;\n          return false;\n        }\n\n        if (child.object !== 'text') {\n          ret = child.forEachDescendant(iterator);\n          return ret;\n        }\n      });\n      return ret;\n    }\n    /**\n     * Recursively iterate over all descendant nodes with `iterator`. If the\n     * iterator returns false it will break the loop.\n     * Calls iterator with node and path.\n     *\n     * @param {Function} iterator\n     * @param {List} path\n     * @param {Boolean} findLast - whether to iterate in reverse order\n     */\n\n  }, {\n    key: 'forEachDescendantWithPath',\n    value: function forEachDescendantWithPath(iterator) {\n      var path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : PathUtils.create([]);\n      var findLast = arguments[2];\n      var nodes = this.nodes;\n      var ret = void 0;\n      if (findLast) nodes = nodes.reverse();\n      nodes.forEach(function (child, i) {\n        var childPath = path.concat(i);\n\n        if (iterator(child, childPath, nodes) === false) {\n          ret = false;\n          return false;\n        }\n\n        if (child.object !== 'text') {\n          ret = child.forEachDescendantWithPath(iterator, childPath, findLast);\n          return ret;\n        }\n      });\n      return ret;\n    }\n    /**\n     * Get a set of the active marks in a `range`.\n     *\n     * @param {Range} range\n     * @return {Set<Mark>}\n     */\n\n  }, {\n    key: 'getActiveMarksAtRange',\n    value: function getActiveMarksAtRange(range) {\n      range = this.resolveRange(range);\n      if (range.isUnset) return Set();\n\n      if (range.isCollapsed) {\n        var _range = range,\n            _start = _range.start;\n        return this.getMarksAtPosition(_start.path, _start.offset).toSet();\n      }\n\n      var _range2 = range,\n          start = _range2.start,\n          end = _range2.end;\n      var startPath = start.path;\n      var startOffset = start.offset;\n      var endPath = end.path;\n      var endOffset = end.offset;\n      var startText = this.getDescendant(startPath);\n      var endText = this.getDescendant(endPath);\n\n      if (!PathUtils.isEqual(startPath, endPath)) {\n        while (!PathUtils.isEqual(startPath, endPath) && endOffset === 0) {\n          var _getPreviousTextAndPa = this.getPreviousTextAndPath(endPath);\n\n          var _getPreviousTextAndPa2 = slicedToArray(_getPreviousTextAndPa, 2);\n\n          endText = _getPreviousTextAndPa2[0];\n          endPath = _getPreviousTextAndPa2[1];\n          endOffset = endText.text.length;\n        }\n\n        while (!PathUtils.isEqual(startPath, endPath) && startOffset === startText.text.length) {\n          var _getNextTextAndPath = this.getNextTextAndPath(startPath);\n\n          var _getNextTextAndPath2 = slicedToArray(_getNextTextAndPath, 2);\n\n          startText = _getNextTextAndPath2[0];\n          startPath = _getNextTextAndPath2[1];\n          startOffset = 0;\n        }\n      }\n\n      if (PathUtils.isEqual(startPath, endPath)) {\n        return startText.getActiveMarksBetweenOffsets(startOffset, endOffset);\n      }\n\n      var startMarks = startText.getActiveMarksBetweenOffsets(startOffset, startText.text.length);\n      if (startMarks.size === 0) return Set();\n      var endMarks = endText.getActiveMarksBetweenOffsets(0, endOffset);\n      var marks = startMarks.intersect(endMarks); // If marks is already empty, the active marks is empty\n\n      if (marks.size === 0) {\n        return marks;\n      }\n\n      var _getNextTextAndPath3 = this.getNextTextAndPath(startPath);\n\n      var _getNextTextAndPath4 = slicedToArray(_getNextTextAndPath3, 2);\n\n      startText = _getNextTextAndPath4[0];\n      startPath = _getNextTextAndPath4[1];\n\n      while (!PathUtils.isEqual(startPath, endPath)) {\n        if (startText.text.length !== 0) {\n          marks = marks.intersect(startText.getActiveMarks());\n          if (marks.size === 0) return Set();\n        }\n\n        var _getNextTextAndPath5 = this.getNextTextAndPath(startPath);\n\n        var _getNextTextAndPath6 = slicedToArray(_getNextTextAndPath5, 2);\n\n        startText = _getNextTextAndPath6[0];\n        startPath = _getNextTextAndPath6[1];\n      }\n\n      return marks;\n    }\n    /**\n     * Get a list of the ancestors of a descendant.\n     *\n     * @param {List|String} path\n     * @return {List<Node>|Null}\n     */\n\n  }, {\n    key: 'getAncestors',\n    value: function getAncestors(path) {\n      var _this = this;\n\n      path = this.resolvePath(path);\n      if (!path) return null;\n      var ancestors = [];\n      path.forEach(function (p, i) {\n        var current = path.slice(0, i);\n\n        var parent = _this.getNode(current);\n\n        ancestors.push(parent);\n      });\n      return List(ancestors);\n    }\n    /**\n     * Get the leaf block descendants of the node.\n     *\n     * @return {List<Node>}\n     */\n\n  }, {\n    key: 'getBlocks',\n    value: function getBlocks() {\n      var array = this.getBlocksAsArray();\n      return List(array);\n    }\n    /**\n     * Get the leaf block descendants of the node.\n     *\n     * @return {List<Node>}\n     */\n\n  }, {\n    key: 'getBlocksAsArray',\n    value: function getBlocksAsArray() {\n      return this.nodes.reduce(function (array, child) {\n        if (child.object !== 'block') return array;\n        if (!child.isLeafBlock()) return array.concat(child.getBlocksAsArray());\n        array.push(child);\n        return array;\n      }, []);\n    }\n    /**\n     * Get the leaf block descendants in a `range`.\n     *\n     * @param {Range} range\n     * @return {List<Node>}\n     */\n\n  }, {\n    key: 'getBlocksAtRange',\n    value: function getBlocksAtRange(range) {\n      warning(false, 'As of slate@0.44 the `node.getBlocksAtRange` method has been renamed to `getLeafBlocksAtRange`.');\n      return this.getLeafBlocksAtRange(range);\n    }\n    /**\n     * Get the bottom-most block descendants in a `range` as an array\n     *\n     * @param {Range} range\n     * @return {Array}\n     */\n\n  }, {\n    key: 'getBlocksAtRangeAsArray',\n    value: function getBlocksAtRangeAsArray(range) {\n      warning(false, 'As of slate@0.44 the `node.getBlocksAtRangeAsArray` method has been renamed to `getLeafBlocksAtRangeAsArray`.');\n      return this.getLeafBlocksAtRangeAsArray(range);\n    }\n    /**\n     * Get all of the leaf blocks that match a `type`.\n     *\n     * @param {String} type\n     * @return {List<Node>}\n     */\n\n  }, {\n    key: 'getBlocksByType',\n    value: function getBlocksByType(type) {\n      var array = this.getBlocksByTypeAsArray(type);\n      return List(array);\n    }\n    /**\n     * Get all of the leaf blocks that match a `type` as an array\n     *\n     * @param {String} type\n     * @return {Array}\n     */\n\n  }, {\n    key: 'getBlocksByTypeAsArray',\n    value: function getBlocksByTypeAsArray(type) {\n      return this.nodes.reduce(function (array, node) {\n        if (node.object !== 'block') {\n          return array;\n        } else if (node.isLeafBlock() && node.type === type) {\n          array.push(node);\n          return array;\n        } else {\n          return array.concat(node.getBlocksByTypeAsArray(type));\n        }\n      }, []);\n    }\n    /**\n     * Get a child node.\n     *\n     * @param {List|String} path\n     * @return {Node|Null}\n     */\n\n  }, {\n    key: 'getChild',\n    value: function getChild(path) {\n      path = this.resolvePath(path);\n      if (!path || path.size > 1) return null;\n      var child = this.nodes.get(path.first());\n      return child;\n    }\n    /**\n     * Get closest parent of node that matches an `iterator`.\n     *\n     * @param {List|String} path\n     * @param {Function} iterator\n     * @return {Node|Null}\n     */\n\n  }, {\n    key: 'getClosest',\n    value: function getClosest(path, iterator) {\n      var _this2 = this;\n\n      var ancestors = this.getAncestors(path);\n      if (!ancestors) return null;\n      var closest = ancestors.findLast(function (node) {\n        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        } // We never want to include the top-level node.\n\n\n        if (node === _this2) return false;\n        return iterator.apply(undefined, [node].concat(args));\n      });\n      return closest || null;\n    }\n    /**\n     * Get the closest block parent of a node.\n     *\n     * @param {List|String} path\n     * @return {Node|Null}\n     */\n\n  }, {\n    key: 'getClosestBlock',\n    value: function getClosestBlock(path) {\n      var closest = this.getClosest(path, function (n) {\n        return n.object === 'block';\n      });\n      return closest;\n    }\n    /**\n     * Get the closest inline parent of a node by `path`.\n     *\n     * @param {List|String} path\n     * @return {Node|Null}\n     */\n\n  }, {\n    key: 'getClosestInline',\n    value: function getClosestInline(path) {\n      var closest = this.getClosest(path, function (n) {\n        return n.object === 'inline';\n      });\n      return closest;\n    }\n    /**\n     * Get the closest void parent of a node by `path`.\n     *\n     * @param {List|String} path\n     * @param {Editor} editor\n     * @return {Node|Null}\n     */\n\n  }, {\n    key: 'getClosestVoid',\n    value: function getClosestVoid(path, editor) {\n      invariant(!Value.isValue(editor), 'As of Slate 0.42.0, the `node.getClosestVoid` method takes an `editor` instead of a `value`.');\n      var ancestors = this.getAncestors(path);\n      if (!ancestors) return null;\n      var ancestor = ancestors.findLast(function (a) {\n        return editor.query('isVoid', a);\n      });\n      return ancestor;\n    }\n    /**\n     * Get the common ancestor of nodes `a` and `b`.\n     *\n     * @param {List} a\n     * @param {List} b\n     * @return {Node}\n     */\n\n  }, {\n    key: 'getCommonAncestor',\n    value: function getCommonAncestor(a, b) {\n      a = this.resolvePath(a);\n      b = this.resolvePath(b);\n      if (!a || !b) return null;\n      var path = PathUtils.relate(a, b);\n      var node = this.getNode(path);\n      return node;\n    }\n    /**\n     * Get the decorations for the node from an `editor`.\n     *\n     * @param {Editor} editor\n     * @return {List}\n     */\n\n  }, {\n    key: 'getDecorations',\n    value: function getDecorations(editor) {\n      invariant(!Value.isValue(editor), 'As of Slate 0.42.0, the `node.getDecorations` method takes an `editor` instead of a `value`.');\n      var array = editor.run('decorateNode', this);\n      var decorations = Decoration.createList(array);\n      return decorations;\n    }\n    /**\n     * Get the depth of a descendant, with optional `startAt`.\n     *\n     * @param {List|String} path\n     * @param {Number} startAt\n     * @return {Number|Null}\n     */\n\n  }, {\n    key: 'getDepth',\n    value: function getDepth(path) {\n      var startAt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      path = this.resolvePath(path);\n      if (!path) return null;\n      var node = this.getNode(path);\n      var depth = node ? path.size - 1 + startAt : null;\n      return depth;\n    }\n    /**\n     * Get a descendant node.\n     *\n     * @param {List|String} path\n     * @return {Node|Null}\n     */\n\n  }, {\n    key: 'getDescendant',\n    value: function getDescendant(path) {\n      path = this.resolvePath(path);\n      if (!path || !path.size) return null;\n      var node = this;\n      path.forEach(function (index) {\n        node = node.getIn(['nodes', index]);\n        return !!node;\n      });\n      return node;\n    }\n    /**\n     * Get a fragment of the node at a `range`.\n     *\n     * @param {Range} range\n     * @return {Document}\n     */\n\n  }, {\n    key: 'getFragmentAtRange',\n    value: function getFragmentAtRange(range) {\n      range = this.resolveRange(range);\n\n      if (range.isUnset) {\n        return Document.create();\n      }\n\n      var _range3 = range,\n          start = _range3.start,\n          end = _range3.end;\n      var node = this;\n      var targetPath = end.path;\n      var targetPosition = end.offset;\n      var mode = 'end';\n\n      while (targetPath.size) {\n        var index = targetPath.last();\n        node = node.splitNode(targetPath, targetPosition);\n        targetPosition = index + 1;\n        targetPath = PathUtils.lift(targetPath);\n\n        if (!targetPath.size && mode === 'end') {\n          targetPath = start.path;\n          targetPosition = start.offset;\n          mode = 'start';\n        }\n      }\n\n      var startIndex = start.path.first() + 1;\n      var endIndex = end.path.first() + 2;\n      var nodes = node.nodes.slice(startIndex, endIndex);\n      var fragment = Document.create({\n        nodes: nodes\n      });\n      return fragment;\n    }\n    /**\n     * Get the furthest parent of a node that matches an `iterator`.\n     *\n     * @param {Path} path\n     * @param {Function} iterator\n     * @return {Node|Null}\n     */\n\n  }, {\n    key: 'getFurthest',\n    value: function getFurthest(path, iterator) {\n      var _this3 = this;\n\n      var ancestors = this.getAncestors(path);\n      if (!ancestors) return null;\n      var furthest = ancestors.find(function (node) {\n        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n          args[_key2 - 1] = arguments[_key2];\n        } // We never want to include the top-level node.\n\n\n        if (node === _this3) return false;\n        return iterator.apply(undefined, [node].concat(args));\n      });\n      return furthest || null;\n    }\n    /**\n     * Get the furthest ancestor of a node.\n     *\n     * @param {List|String} path\n     * @return {Node|Null}\n     */\n\n  }, {\n    key: 'getFurthestAncestor',\n    value: function getFurthestAncestor(path) {\n      path = this.resolvePath(path);\n      if (!path || !path.size) return null;\n      var furthest = this.nodes.get(path.first());\n      return furthest;\n    }\n    /**\n     * Get the furthest block parent of a node.\n     *\n     * @param {Path} path\n     * @return {Node|Null}\n     */\n\n  }, {\n    key: 'getFurthestBlock',\n    value: function getFurthestBlock(path) {\n      var furthest = this.getFurthest(path, function (n) {\n        return n.object === 'block';\n      });\n      return furthest;\n    }\n    /**\n     * Get the furthest inline parent of a node.\n     *\n     * @param {Path} path\n     * @return {Node|Null}\n     */\n\n  }, {\n    key: 'getFurthestInline',\n    value: function getFurthestInline(path) {\n      var furthest = this.getFurthest(path, function (n) {\n        return n.object === 'inline';\n      });\n      return furthest;\n    }\n    /**\n     * Get the furthest ancestor of a node, where all ancestors to that point only have one child.\n     *\n     * @param {Path} path\n     * @return {Node|Null}\n     */\n\n  }, {\n    key: 'getFurthestOnlyChildAncestor',\n    value: function getFurthestOnlyChildAncestor(path) {\n      var ancestors = this.getAncestors(path);\n      if (!ancestors) return null;\n      var furthest = ancestors.rest().reverse().takeUntil(function (p) {\n        return p.nodes.size > 1;\n      }).last();\n      return furthest || null;\n    }\n    /**\n     * Get the closest inline nodes for each text node in the node.\n     *\n     * @return {List<Node>}\n     */\n\n  }, {\n    key: 'getInlines',\n    value: function getInlines() {\n      var array = this.getInlinesAsArray();\n      var list = List(array);\n      return list;\n    }\n    /**\n     * Get the closest inline nodes for each text node in the node, as an array.\n     *\n     * @return {Array<Node>}\n     */\n\n  }, {\n    key: 'getInlinesAsArray',\n    value: function getInlinesAsArray() {\n      var array = [];\n      this.nodes.forEach(function (child) {\n        if (child.object === 'text') return;\n\n        if (child.isLeafInline()) {\n          array.push(child);\n        } else {\n          array = array.concat(child.getInlinesAsArray());\n        }\n      });\n      return array;\n    }\n    /**\n     * Get the bottom-most inline nodes for each text node in a `range`.\n     *\n     * @param {Range} range\n     * @return {List<Node>}\n     */\n\n  }, {\n    key: 'getInlinesAtRange',\n    value: function getInlinesAtRange(range) {\n      warning(false, 'As of slate@0.44 the `node.getInlinesAtRange` method has been renamed to `getLeafInlinesAtRange`.');\n      return this.getLeafInlinesAtRange(range);\n    }\n    /**\n     * Get the bottom-most inline nodes for each text node in a `range` as an array.\n     *\n     * @param {Range} range\n     * @return {Array}\n     */\n\n  }, {\n    key: 'getInlinesAtRangeAsArray',\n    value: function getInlinesAtRangeAsArray(range) {\n      warning(false, 'As of slate@0.44 the `node.getInlinesAtRangeAsArray` method has been renamed to `getLeafInlinesAtRangeAsArray`.');\n      return this.getLeafInlinesAtRangeAsArray(range);\n    }\n    /**\n     * Get all of the leaf inline nodes that match a `type`.\n     *\n     * @param {String} type\n     * @return {List<Node>}\n     */\n\n  }, {\n    key: 'getInlinesByType',\n    value: function getInlinesByType(type) {\n      var array = this.getInlinesByTypeAsArray(type);\n      var list = List(array);\n      return list;\n    }\n    /**\n     * Get all of the leaf inline nodes that match a `type` as an array.\n     *\n     * @param {String} type\n     * @return {Array}\n     */\n\n  }, {\n    key: 'getInlinesByTypeAsArray',\n    value: function getInlinesByTypeAsArray(type) {\n      var array = this.nodes.reduce(function (inlines, node) {\n        if (node.object === 'text') {\n          return inlines;\n        } else if (node.isLeafInline() && node.type === type) {\n          inlines.push(node);\n          return inlines;\n        } else {\n          return inlines.concat(node.getInlinesByTypeAsArray(type));\n        }\n      }, []);\n      return array;\n    }\n    /**\n     * Get a set of the marks in a `range`.\n     *\n     * @param {Range} range\n     * @return {Set<Mark>}\n     */\n\n  }, {\n    key: 'getInsertMarksAtRange',\n    value: function getInsertMarksAtRange(range) {\n      range = this.resolveRange(range);\n      var _range4 = range,\n          start = _range4.start;\n\n      if (range.isUnset) {\n        return Set();\n      }\n\n      if (range.isCollapsed) {\n        // PERF: range is not cachable, use key and offset as proxies for cache\n        return this.getMarksAtPosition(start.path, start.offset);\n      }\n\n      var text = this.getDescendant(start.path);\n      var marks = text.getMarksAtIndex(start.offset + 1);\n      return marks;\n    }\n    /**\n     * Get the bottom-most block descendants in a `range`.\n     *\n     * @param {Range} range\n     * @return {List<Node>}\n     */\n\n  }, {\n    key: 'getLeafBlocksAtRange',\n    value: function getLeafBlocksAtRange(range) {\n      var array = this.getLeafBlocksAtRangeAsArray(range); // Eliminate duplicates by converting to an `OrderedSet` first.\n\n      return List(OrderedSet(array));\n    }\n    /**\n     * Get the bottom-most descendants in a `range` as an array\n     *\n     * @param {Range} range\n     * @return {Array<Node>}\n     */\n\n  }, {\n    key: 'getLeafBlocksAtRangeAsArray',\n    value: function getLeafBlocksAtRangeAsArray(range) {\n      range = this.resolveRange(range);\n      if (range.isUnset) return [];\n      var _range5 = range,\n          start = _range5.start,\n          end = _range5.end;\n      return this.getLeafBlocksBetweenPathPositionsAsArray(start.path, end.path);\n    }\n    /**\n     * Get the bottom-most descendants between two paths as an array\n     *\n     * @param {List|Null} startPath\n     * @param {List|Null} endPath\n     * @return {Array<Node>}\n     */\n\n  }, {\n    key: 'getLeafBlocksBetweenPathPositionsAsArray',\n    value: function getLeafBlocksBetweenPathPositionsAsArray(startPath, endPath) {\n      // PERF: the most common case is when the range is in a single block node,\n      // where we can avoid a lot of iterating of the tree.\n      if (startPath && endPath && PathUtils.isEqual(startPath, endPath)) {\n        return [this.getClosestBlock(startPath)];\n      } else if (!startPath && !endPath) {\n        return this.getBlocksAsArray();\n      }\n\n      var startIndex = startPath ? startPath.get(0, 0) : 0;\n      var endIndex = endPath ? endPath.get(0, this.nodes.size - 1) : this.nodes.size - 1;\n      var array = [];\n      this.nodes.slice(startIndex, endIndex + 1).forEach(function (node, i) {\n        if (node.object !== 'block') {\n          return;\n        } else if (node.isLeafBlock()) {\n          array.push(node);\n        } else {\n          var childStartPath = startPath && i === 0 ? PathUtils.drop(startPath) : null;\n          var childEndPath = endPath && i === endIndex - startIndex ? PathUtils.drop(endPath) : null;\n          array = array.concat(node.getLeafBlocksBetweenPathPositionsAsArray(childStartPath, childEndPath));\n        }\n      });\n      return array;\n    }\n    /**\n     * Get the bottom-most inline nodes for each text node in a `range`.\n     *\n     * @param {Range} range\n     * @return {List<Node>}\n     */\n\n  }, {\n    key: 'getLeafInlinesAtRange',\n    value: function getLeafInlinesAtRange(range) {\n      var array = this.getLeafInlinesAtRangeAsArray(range); // Remove duplicates by converting it to an `OrderedSet` first.\n\n      var list = List(OrderedSet(array));\n      return list;\n    }\n    /**\n     * Get the bottom-most inline nodes for each text node in a `range` as an array.\n     *\n     * @param {Range} range\n     * @return {Array<Node>}\n     */\n\n  }, {\n    key: 'getLeafInlinesAtRangeAsArray',\n    value: function getLeafInlinesAtRangeAsArray(range) {\n      var _this4 = this;\n\n      range = this.resolveRange(range);\n      if (range.isUnset) return [];\n      var array = this.getTextsAtRangeAsArray(range).map(function (text) {\n        return _this4.getClosestInline(text.key);\n      }).filter(function (exists) {\n        return exists;\n      });\n      return array;\n    }\n    /**\n     * Get all of the marks for all of the characters of every text node.\n     *\n     * @return {Set<Mark>}\n     */\n\n  }, {\n    key: 'getMarks',\n    value: function getMarks() {\n      var array = this.getMarksAsArray();\n      return Set(array);\n    }\n    /**\n     * Get all of the marks as an array.\n     *\n     * @return {Array}\n     */\n\n  }, {\n    key: 'getMarksAsArray',\n    value: function getMarksAsArray() {\n      var _ref;\n\n      var result = [];\n      this.nodes.forEach(function (node) {\n        result.push(node.getMarksAsArray());\n      }); // PERF: use only one concat rather than multiple for speed.\n\n      var array = (_ref = []).concat.apply(_ref, result);\n\n      return array;\n    }\n    /**\n     * Get a set of marks in a `position`, the equivalent of a collapsed range\n     *\n     * @param {List|string} key\n     * @param {number} offset\n     * @return {Set}\n     */\n\n  }, {\n    key: 'getMarksAtPosition',\n    value: function getMarksAtPosition(path, offset) {\n      path = this.resolvePath(path);\n      var text = this.getDescendant(path);\n      var currentMarks = text.getMarksAtIndex(offset);\n      if (offset !== 0) return currentMarks;\n      var closestBlock = this.getClosestBlock(path);\n\n      if (closestBlock.text === '') {\n        // insert mark for empty block; the empty block are often created by split node or add marks in a range including empty blocks\n        return currentMarks;\n      }\n\n      var previous = this.getPreviousTextAndPath(path);\n      if (!previous) return Set();\n\n      var _previous = slicedToArray(previous, 2),\n          previousText = _previous[0],\n          previousPath = _previous[1];\n\n      if (closestBlock.hasDescendant(previousPath)) {\n        return previousText.getMarksAtIndex(previousText.text.length);\n      }\n\n      return currentMarks;\n    }\n    /**\n     * Get a set of the marks in a `range`.\n     *\n     * @param {Range} range\n     * @return {Set<Mark>}\n     */\n\n  }, {\n    key: 'getMarksAtRange',\n    value: function getMarksAtRange(range) {\n      var marks = Set(this.getOrderedMarksAtRange(range));\n      return marks;\n    }\n    /**\n     * Get all of the marks that match a `type`.\n     *\n     * @param {String} type\n     * @return {Set<Mark>}\n     */\n\n  }, {\n    key: 'getMarksByType',\n    value: function getMarksByType(type) {\n      var array = this.getMarksByTypeAsArray(type);\n      return Set(array);\n    }\n    /**\n     * Get all of the marks that match a `type` as an array.\n     *\n     * @param {String} type\n     * @return {Array}\n     */\n\n  }, {\n    key: 'getMarksByTypeAsArray',\n    value: function getMarksByTypeAsArray(type) {\n      var array = this.nodes.reduce(function (memo, node) {\n        return node.object === 'text' ? memo.concat(node.getMarksAsArray().filter(function (m) {\n          return m.type === type;\n        })) : memo.concat(node.getMarksByTypeAsArray(type));\n      }, []);\n      return array;\n    }\n    /**\n     * Get the block node after a descendant text node by `path`.\n     *\n     * @param {List|String} path\n     * @return {Node|Null}\n     */\n\n  }, {\n    key: 'getNextBlock',\n    value: function getNextBlock(path) {\n      path = this.resolvePath(path);\n      var match = this.getNextDeepMatchingNodeAndPath(path, function (n) {\n        return n.object === 'block';\n      });\n      return match ? match[0] : null;\n    }\n    /**\n     * Get the next node in the tree from a node.\n     *\n     * This will not only check for siblings but instead move up the tree\n     * returning the next ancestor if no sibling is found.\n     *\n     * @param {List|String} path\n     * @return {Node|Null}\n     */\n\n  }, {\n    key: 'getNextNode',\n    value: function getNextNode(path) {\n      path = this.resolvePath(path);\n      if (!path) return null;\n      if (!path.size) return null;\n\n      for (var i = path.size; i > 0; i--) {\n        var p = path.slice(0, i);\n        var target = PathUtils.increment(p);\n        var node = this.getNode(target);\n        if (node) return node;\n      }\n\n      return null;\n    }\n    /**\n     * Get the next node in the tree from a node that matches iterator\n     *\n     * This will not only check for siblings but instead move up the tree\n     * returning the next ancestor if no sibling is found.\n     *\n     * @param {List} path\n     * @return {Node|Null}\n     */\n\n  }, {\n    key: 'getNextMatchingNodeAndPath',\n    value: function getNextMatchingNodeAndPath(path) {\n      var iterator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {\n        return true;\n      };\n      if (!path) return null;\n\n      for (var i = path.size; i > 0; i--) {\n        var p = path.slice(0, i);\n        var nextPath = PathUtils.increment(p);\n        var nextNode = this.getNode(nextPath);\n\n        while (nextNode && !iterator(nextNode)) {\n          nextPath = PathUtils.increment(nextPath);\n          nextNode = this.getNode(nextPath);\n        }\n\n        if (nextNode) return [nextNode, nextPath];\n      }\n\n      return null;\n    }\n    /**\n     * Get the next, deepest node in the tree from a node that matches iterator\n     *\n     * This will not only check for siblings but instead move up the tree\n     * returning the next ancestor if no sibling is found.\n     *\n     * @param {List} path\n     * @param {Function} iterator\n     * @return {Node|Null}\n     */\n\n  }, {\n    key: 'getNextDeepMatchingNodeAndPath',\n    value: function getNextDeepMatchingNodeAndPath(path) {\n      var iterator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {\n        return true;\n      };\n      var match = this.getNextMatchingNodeAndPath(path);\n      if (!match) return null;\n\n      var _match = slicedToArray(match, 2),\n          nextNode = _match[0],\n          nextPath = _match[1];\n\n      var childMatch = void 0;\n\n      var assign = function assign() {\n        childMatch = nextNode.object !== 'text' && nextNode.findFirstDescendantAndPath(iterator, nextPath);\n        return childMatch;\n      };\n\n      while (assign(childMatch)) {\n        var _childMatch = childMatch;\n\n        var _childMatch2 = slicedToArray(_childMatch, 2);\n\n        nextNode = _childMatch2[0];\n        nextPath = _childMatch2[1];\n      }\n\n      if (!nextNode) return null;\n      return iterator(nextNode) ? [nextNode, nextPath] : this.getNextDeepMatchingNodeAndPath(match[1], iterator);\n    }\n    /**\n     * Get the next sibling of a node.\n     *\n     * @param {List|String} path\n     * @return {Node|Null}\n     */\n\n  }, {\n    key: 'getNextSibling',\n    value: function getNextSibling(path) {\n      path = this.resolvePath(path);\n      if (!path) return null;\n      if (!path.size) return null;\n      var p = PathUtils.increment(path);\n      var sibling = this.getNode(p);\n      return sibling;\n    }\n    /**\n     * Get the text node after a descendant text node.\n     *\n     * @param {List|String} path\n     * @return {Node|Null}\n     */\n\n  }, {\n    key: 'getNextText',\n    value: function getNextText(path) {\n      path = this.resolvePath(path);\n      if (!path) return null;\n      if (!path.size) return null;\n      var next = this.getNextNode(path);\n      if (!next) return null;\n      var text = next.getFirstText();\n      return text;\n    }\n  }, {\n    key: 'getNextTextAndPath',\n    value: function getNextTextAndPath(path) {\n      if (!path) return null;\n      if (!path.size) return null;\n      var match = this.getNextDeepMatchingNodeAndPath(path, function (n) {\n        return n.object === 'text';\n      });\n      return match;\n    }\n    /**\n     * Get all of the nodes in a `range`. This includes all of the\n     * text nodes inside the range and all ancestors of those text\n     * nodes up to this node.\n     *\n     * @param {Range} range\n     * @return {List<Node>}\n     */\n\n  }, {\n    key: 'getNodesAtRange',\n    value: function getNodesAtRange(range) {\n      range = this.resolveRange(range);\n      if (range.isUnset) return List();\n      var _range6 = range,\n          start = _range6.start,\n          end = _range6.end; // Do a depth-first stack-based search for all nodes in the range\n      // Nodes that are pushed to the stack are inside the range\n      // Start with the nodes that are on the highest level in the tree\n\n      var stack = Stack(this.nodes.slice(start.path.get(0), end.path.get(0) + 1).map(function (node, index) {\n        return {\n          node: node,\n          onStartEdge: index === 0,\n          onEndEdge: index === end.path.get(0) - start.path.get(0),\n          relativeStartPath: start.path.slice(1),\n          relativeEndPath: end.path.slice(1)\n        };\n      }));\n      var result = [];\n\n      var _loop = function _loop() {\n        var _stack$peek = stack.peek(),\n            node = _stack$peek.node,\n            onStartEdge = _stack$peek.onStartEdge,\n            onEndEdge = _stack$peek.onEndEdge,\n            relativeStartPath = _stack$peek.relativeStartPath,\n            relativeEndPath = _stack$peek.relativeEndPath;\n\n        stack = stack.shift();\n        result.push(node);\n        if (node.object === 'text') return 'continue'; // Modify indexes to exclude children that are outside of the range\n\n        var startIndex = onStartEdge ? relativeStartPath.get(0) : 0;\n        var endIndex = onEndEdge ? relativeEndPath.get(0) : node.nodes.size - 1; // Push children that are inside the range to the stack\n\n        stack = stack.pushAll(node.nodes.slice(startIndex, endIndex + 1).map(function (n, i) {\n          return {\n            node: n,\n            onStartEdge: onStartEdge && i === 0,\n            onEndEdge: onEndEdge && i === endIndex - startIndex,\n            relativeStartPath: onStartEdge && i === 0 ? relativeStartPath.slice(1) : null,\n            relativeEndPath: onEndEdge && i === endIndex - startIndex ? relativeEndPath.slice(1) : null\n          };\n        }));\n      };\n\n      while (stack.size > 0) {\n        var _ret = _loop();\n\n        if (_ret === 'continue') continue;\n      }\n\n      return List(result);\n    }\n    /**\n     * Get the offset for a descendant text node by `path` or `key`.\n     *\n     * @param {List|string} path\n     * @return {Number}\n     */\n\n  }, {\n    key: 'getOffset',\n    value: function getOffset(path) {\n      path = this.resolvePath(path);\n      this.assertDescendant(path); // Calculate the offset of the nodes before the highest child.\n\n      var index = path.first();\n      var offset = this.nodes.slice(0, index).reduce(function (memo, n) {\n        return memo + n.text.length;\n      }, 0); // Recurse if need be.\n\n      var ret = path.size === 1 ? offset : offset + this.nodes.get(index).getOffset(PathUtils.drop(path));\n      return ret;\n    }\n    /**\n     * Get the offset from a `range`.\n     *\n     * @param {Range} range\n     * @return {Number}\n     */\n\n  }, {\n    key: 'getOffsetAtRange',\n    value: function getOffsetAtRange(range) {\n      range = this.resolveRange(range);\n\n      if (range.isUnset) {\n        throw new Error('The range cannot be unset to calculcate its offset.');\n      }\n\n      if (range.isExpanded) {\n        throw new Error('The range must be collapsed to calculcate its offset.');\n      }\n\n      var _range7 = range,\n          start = _range7.start;\n      var offset = this.getOffset(start.path) + start.offset;\n      return offset;\n    }\n    /**\n     * Get all of the marks for all of the characters of every text node.\n     *\n     * @return {OrderedSet<Mark>}\n     */\n\n  }, {\n    key: 'getOrderedMarks',\n    value: function getOrderedMarks() {\n      var array = this.getMarksAsArray();\n      return OrderedSet(array);\n    }\n    /**\n     * Get a set of the marks in a `range`.\n     *\n     * @param {Range} range\n     * @return {OrderedSet<Mark>}\n     */\n\n  }, {\n    key: 'getOrderedMarksAtRange',\n    value: function getOrderedMarksAtRange(range) {\n      range = this.resolveRange(range);\n      var _range8 = range,\n          start = _range8.start,\n          end = _range8.end;\n\n      if (range.isUnset) {\n        return OrderedSet();\n      }\n\n      if (range.isCollapsed) {\n        // PERF: range is not cachable, use path? and offset as proxies for cache\n        return this.getMarksAtPosition(start.path, start.offset);\n      }\n\n      var marks = this.getOrderedMarksBetweenPositions(start.path, start.offset, end.path, end.offset);\n      return marks;\n    }\n    /**\n     * Get a set of the marks in a `range`.\n     * PERF: arguments use key and offset for utilizing cache\n     *\n     * @param {List|string} startPath\n     * @param {number} startOffset\n     * @param {List|string} endPath\n     * @param {number} endOffset\n     * @returns {OrderedSet<Mark>}\n     */\n\n  }, {\n    key: 'getOrderedMarksBetweenPositions',\n    value: function getOrderedMarksBetweenPositions(startPath, startOffset, endPath, endOffset) {\n      startPath = this.resolvePath(startPath);\n      endPath = this.resolvePath(endPath);\n      var startText = this.getDescendant(startPath);\n\n      if (PathUtils.isEqual(startPath, endPath)) {\n        return startText.getMarksBetweenOffsets(startOffset, endOffset);\n      }\n\n      var endText = this.getDescendant(endPath);\n      var texts = this.getTextsBetweenPathPositionsAsArray(startPath, endPath);\n      return OrderedSet().withMutations(function (result) {\n        texts.forEach(function (text) {\n          if (text.key === startText.key) {\n            result.union(text.getMarksBetweenOffsets(startOffset, text.text.length));\n          } else if (text.key === endText.key) {\n            result.union(text.getMarksBetweenOffsets(0, endOffset));\n          } else {\n            result.union(text.getMarks());\n          }\n        });\n      });\n    }\n    /**\n     * Get all of the marks that match a `type`.\n     *\n     * @param {String} type\n     * @return {OrderedSet<Mark>}\n     */\n\n  }, {\n    key: 'getOrderedMarksByType',\n    value: function getOrderedMarksByType(type) {\n      var array = this.getMarksByTypeAsArray(type);\n      return OrderedSet(array);\n    }\n    /**\n     * Get the parent of a descendant node.\n     *\n     * @param {List|String} path\n     * @return {Node|Null}\n     */\n\n  }, {\n    key: 'getParent',\n    value: function getParent(path) {\n      path = this.resolvePath(path);\n      if (!path) return null;\n      if (!path.size) return null;\n      var parentPath = PathUtils.lift(path);\n      var parent = this.getNode(parentPath);\n      return parent;\n    }\n    /**\n     * Get the block node before a descendant text node by `path`.\n     *\n     * @param {List|String} path\n     * @return {Node|Null}\n     */\n\n  }, {\n    key: 'getPreviousBlock',\n    value: function getPreviousBlock(path) {\n      path = this.resolvePath(path);\n      var match = this.getPreviousDeepMatchingNodeAndPath(path, function (n) {\n        return n.object === 'block';\n      });\n      return match ? match[0] : null;\n    }\n    /**\n     * Get the highest block descendants in a `range`.\n     *\n     * @param {Range} range\n     * @return {List<Node>}\n     */\n\n  }, {\n    key: 'getRootBlocksAtRange',\n    value: function getRootBlocksAtRange(range) {\n      range = this.resolveRange(range);\n      if (range.isUnset) return List();\n      var _range9 = range,\n          start = _range9.start,\n          end = _range9.end;\n      return this.nodes.slice(start.path.first(), end.path.first() + 1);\n    }\n    /**\n     * Get the top-most inline nodes for each text node in a `range`.\n     *\n     * @param {Range} range\n     * @return {List<Node>}\n     */\n\n  }, {\n    key: 'getRootInlinesAtRange',\n    value: function getRootInlinesAtRange(range) {\n      var array = this.getRootInlinesAtRangeAsArray(range); // Remove duplicates by converting it to an `OrderedSet` first.\n\n      var list = List(OrderedSet(array));\n      return list;\n    }\n    /**\n     * Get the top-most inline nodes for each text node in a `range` as an array.\n     *\n     * @param {Range} range\n     * @return {Array}\n     */\n\n  }, {\n    key: 'getRootInlinesAtRangeAsArray',\n    value: function getRootInlinesAtRangeAsArray(range) {\n      var _this5 = this;\n\n      range = this.resolveRange(range);\n      if (range.isUnset) return List();\n      var array = this.getTextsAtRangeAsArray(range).map(function (text) {\n        return _this5.getFurthestInline(text.key);\n      }).filter(function (exists) {\n        return exists;\n      });\n      return array;\n    }\n    /**\n     * Get the previous node from a node in the tree.\n     *\n     * This will not only check for siblings but instead move up the tree\n     * returning the previous ancestor if no sibling is found.\n     *\n     * @param {List|String} path\n     * @return {Node|Null}\n     */\n\n  }, {\n    key: 'getPreviousNode',\n    value: function getPreviousNode(path) {\n      path = this.resolvePath(path);\n      if (!path) return null;\n      if (!path.size) return null;\n\n      for (var i = path.size; i > 0; i--) {\n        var p = path.slice(0, i);\n        if (p.last() === 0) continue;\n        var target = PathUtils.decrement(p);\n        var node = this.getNode(target);\n        if (node) return node;\n      }\n\n      return null;\n    }\n    /**\n     * Get the previous node in the tree from a node that matches iterator\n     *\n     * This will not only check for siblings but instead move up the tree\n     * returning the previous ancestor if no sibling is found.\n     *\n     * @param {List} path\n     * @return {Node|Null}\n     */\n\n  }, {\n    key: 'getPreviousMatchingNodeAndPath',\n    value: function getPreviousMatchingNodeAndPath(path) {\n      var iterator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {\n        return true;\n      };\n      if (!path) return null;\n\n      for (var i = path.size; i > 0; i--) {\n        var p = path.slice(0, i);\n        if (p.last() === 0) continue;\n        var previousPath = PathUtils.decrement(p);\n        var previousNode = this.getNode(previousPath);\n\n        while (previousNode && !iterator(previousNode)) {\n          previousPath = PathUtils.decrement(previousPath);\n          previousNode = this.getNode(previousPath);\n        }\n\n        if (previousNode) return [previousNode, previousPath];\n      }\n\n      return null;\n    }\n    /**\n     * Get the next previous in the tree from a node that matches iterator\n     *\n     * This will not only check for siblings but instead move up the tree\n     * returning the previous ancestor if no sibling is found.\n     * Once a node is found, the last deepest child matching is returned\n     *\n     * @param {List} path\n     * @param {Function} iterator\n     * @return {Node|Null}\n     */\n\n  }, {\n    key: 'getPreviousDeepMatchingNodeAndPath',\n    value: function getPreviousDeepMatchingNodeAndPath(path) {\n      var iterator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function () {\n        return true;\n      };\n      var match = this.getPreviousMatchingNodeAndPath(path);\n      if (!match) return null;\n\n      var _match2 = slicedToArray(match, 2),\n          previousNode = _match2[0],\n          previousPath = _match2[1];\n\n      var childMatch = void 0;\n\n      var assign = function assign() {\n        childMatch = previousNode.object !== 'text' && previousNode.findLastDescendantAndPath(iterator, previousPath);\n        return childMatch;\n      };\n\n      while (assign(childMatch)) {\n        var _childMatch3 = childMatch;\n\n        var _childMatch4 = slicedToArray(_childMatch3, 2);\n\n        previousNode = _childMatch4[0];\n        previousPath = _childMatch4[1];\n      }\n\n      if (!previousNode) return null;\n      return iterator(previousNode) ? [previousNode, previousPath] : this.getPreviousDeepMatchingNodeAndPath(match[1], iterator);\n    }\n    /**\n     * Get the previous sibling of a node.\n     *\n     * @param {List|String} path\n     * @return {Node|Null}\n     */\n\n  }, {\n    key: 'getPreviousSibling',\n    value: function getPreviousSibling(path) {\n      path = this.resolvePath(path);\n      if (!path) return null;\n      if (!path.size) return null;\n      if (path.last() === 0) return null;\n      var p = PathUtils.decrement(path);\n      var sibling = this.getNode(p);\n      return sibling;\n    }\n    /**\n     * Get the text node before a descendant text node.\n     *\n     * @param {List|String} path\n     * @return {Node|Null}\n     */\n\n  }, {\n    key: 'getPreviousText',\n    value: function getPreviousText(path) {\n      path = this.resolvePath(path);\n      if (!path) return null;\n      if (!path.size) return null;\n      var previous = this.getPreviousNode(path);\n      if (!previous) return null;\n      var match = previous.getLastText();\n      return match;\n    }\n  }, {\n    key: 'getPreviousTextAndPath',\n    value: function getPreviousTextAndPath(path) {\n      if (!path) return null;\n      if (!path.size) return null;\n      var match = this.getPreviousDeepMatchingNodeAndPath(path, function (n) {\n        return n.object === 'text';\n      });\n      return match;\n    }\n    /**\n     * Get the indexes of the selection for a `range`, given an extra flag for\n     * whether the node `isSelected`, to determine whether not finding matches\n     * means everything is selected or nothing is.\n     *\n     * @param {Range} range\n     * @param {Boolean} isSelected\n     * @return {Object|Null}\n     */\n\n  }, {\n    key: 'getSelectionIndexes',\n    value: function getSelectionIndexes(range) {\n      var isSelected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var start = range.start,\n          end = range.end; // PERF: if we're not selected, we can exit early.\n\n      if (!isSelected) {\n        return null;\n      } // if we've been given an invalid selection we can exit early.\n\n\n      if (range.isUnset) {\n        return null;\n      } // PERF: if the start and end keys are the same, just check for the child\n      // that contains that single key.\n\n\n      if (start.key === end.key) {\n        var child = this.getFurthestAncestor(start.key);\n        var index = child ? this.nodes.indexOf(child) : null;\n        return {\n          start: index,\n          end: index + 1\n        };\n      } // Otherwise, check all of the children...\n\n\n      var startIndex = null;\n      var endIndex = null;\n      this.nodes.forEach(function (child, i) {\n        if (child.object === 'text') {\n          if (startIndex == null && child.key === start.key) startIndex = i;\n          if (endIndex == null && child.key === end.key) endIndex = i + 1;\n        } else {\n          if (startIndex == null && child.hasDescendant(start.key)) startIndex = i;\n          if (endIndex == null && child.hasDescendant(end.key)) endIndex = i + 1;\n        } // PERF: exit early if both start and end have been found.\n\n\n        return startIndex == null || endIndex == null;\n      });\n      if (isSelected && startIndex == null) startIndex = 0;\n      if (isSelected && endIndex == null) endIndex = this.nodes.size;\n      return startIndex == null ? null : {\n        start: startIndex,\n        end: endIndex\n      };\n    }\n    /**\n     * Get the descendent text node at an `offset`.\n     *\n     * @param {String} offset\n     * @return {Node|Null}\n     */\n\n  }, {\n    key: 'getTextAtOffset',\n    value: function getTextAtOffset(offset) {\n      // PERF: Add a few shortcuts for the obvious cases.\n      if (offset === 0) return this.getFirstText();\n      if (offset === this.text.length) return this.getLastText();\n      if (offset < 0 || offset > this.text.length) return null;\n      var length = 0;\n      var text = this.getTexts().find(function (node, i, nodes) {\n        length += node.text.length;\n        return length > offset;\n      });\n      return text;\n    }\n    /**\n     * Get the direction of the node's text.\n     *\n     * @return {String}\n     */\n\n  }, {\n    key: 'getTextDirection',\n    value: function getTextDirection() {\n      var dir = direction(this.text);\n      return dir === 'neutral' ? null : dir;\n    }\n    /**\n     * Recursively get all of the child text nodes in order of appearance.\n     *\n     * @return {List<Node>}\n     */\n\n  }, {\n    key: 'getTexts',\n    value: function getTexts() {\n      var array = this.getTextsAsArray();\n      return List(array);\n    }\n    /**\n     * Recursively get all the leaf text nodes in order of appearance, as array.\n     *\n     * @return {List<Node>}\n     */\n\n  }, {\n    key: 'getTextsAsArray',\n    value: function getTextsAsArray() {\n      var array = [];\n      this.nodes.forEach(function (node) {\n        if (node.object === 'text') {\n          array.push(node);\n        } else {\n          array = array.concat(node.getTextsAsArray());\n        }\n      });\n      return array;\n    }\n    /**\n     * Get all of the text nodes in a `range` as a List.\n     *\n     * @param {Range} range\n     * @return {List<Node>}\n     */\n\n  }, {\n    key: 'getTextsAtRange',\n    value: function getTextsAtRange(range) {\n      var arr = this.getTextsAtRangeAsArray(range);\n      return List(arr);\n    }\n    /**\n     * Get all of the text nodes in a `range` as an array.\n     *\n     * @param {Range} range\n     * @return {Array<Node>}\n     */\n\n  }, {\n    key: 'getTextsAtRangeAsArray',\n    value: function getTextsAtRangeAsArray(range) {\n      range = this.resolveRange(range);\n      if (range.isUnset) return [];\n      var _range10 = range,\n          start = _range10.start,\n          end = _range10.end;\n      var texts = this.getTextsBetweenPathPositionsAsArray(start.path, end.path);\n      return texts;\n    }\n    /**\n     * Get all of the text nodes in a `range` as an array.\n     * PERF: use key / path in arguments for cache\n     *\n     * @param {List|string} startPath\n     * @param {List|string} endPath\n     * @returns {Array}\n     */\n\n  }, {\n    key: 'getTextsBetweenPositionsAsArray',\n    value: function getTextsBetweenPositionsAsArray(startPath, endPath) {\n      startPath = this.resolvePath(startPath);\n      endPath = this.resolvePath(endPath);\n      return this.getTextsBetweenPathPositionsAsArray(startPath, endPath);\n    }\n    /**\n     * Get all of the text nodes in a `range` as an array.\n     *\n     * @param {List|falsey} startPath\n     * @param {List|falsey} endPath\n     * @returns {Array}\n     */\n\n  }, {\n    key: 'getTextsBetweenPathPositionsAsArray',\n    value: function getTextsBetweenPathPositionsAsArray(startPath, endPath) {\n      // PERF: the most common case is when the range is in a single text node,\n      // where we can avoid a lot of iterating of the tree.\n      if (startPath && endPath && PathUtils.isEqual(startPath, endPath)) {\n        return [this.getDescendant(startPath)];\n      } else if (!startPath && !endPath) {\n        return this.getTextsAsArray();\n      }\n\n      var startIndex = startPath ? startPath.get(0, 0) : 0;\n      var endIndex = endPath ? endPath.get(0, this.nodes.size - 1) : this.nodes.size - 1;\n      var array = [];\n      this.nodes.slice(startIndex, endIndex + 1).forEach(function (node, i) {\n        if (node.object === 'text') {\n          array.push(node);\n        } else {\n          // For the node at start and end of this list, we want to provide a start and end path\n          // For other nodes, we can just get all their text nodes, they are between the paths\n          var childStartPath = startPath && i === 0 ? PathUtils.drop(startPath) : null;\n          var childEndPath = endPath && i === endIndex - startIndex ? PathUtils.drop(endPath) : null;\n          array = array.concat(node.getTextsBetweenPathPositionsAsArray(childStartPath, childEndPath));\n        }\n      });\n      return array;\n    }\n    /**\n     * Check if the node has block children.\n     *\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'hasBlockChildren',\n    value: function hasBlockChildren() {\n      return !!(this.nodes && this.nodes.find(function (n) {\n        return n.object === 'block';\n      }));\n    }\n    /**\n     * Check if a child node exists.\n     *\n     * @param {List|String} path\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'hasChild',\n    value: function hasChild(path) {\n      var child = this.getChild(path);\n      return !!child;\n    }\n    /**\n     * Check if a node has inline children.\n     *\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'hasInlineChildren',\n    value: function hasInlineChildren() {\n      return !!(this.nodes && this.nodes.find(function (n) {\n        return n.object === 'inline' || n.object === 'text';\n      }));\n    }\n    /**\n     * Recursively check if a child node exists.\n     *\n     * @param {List|String} path\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'hasDescendant',\n    value: function hasDescendant(path) {\n      var descendant = this.getDescendant(path);\n      return !!descendant;\n    }\n    /**\n     * Check if a node has a void parent.\n     *\n     * @param {List|String} path\n     * @param {Editor} editor\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'hasVoidParent',\n    value: function hasVoidParent(path, editor) {\n      invariant(!Value.isValue(editor), 'As of Slate 0.42.0, the `node.hasVoidParent` method takes an `editor` instead of a `value`.');\n      var closest = this.getClosestVoid(path, editor);\n      return !!closest;\n    }\n    /**\n     * Insert a `node`.\n     *\n     * @param {List|String} path\n     * @param {Node} node\n     * @return {Node}\n     */\n\n  }, {\n    key: 'insertNode',\n    value: function insertNode(path, node) {\n      path = this.resolvePath(path);\n      var index = path.last();\n      var parentPath = PathUtils.lift(path);\n      var parent = this.assertNode(parentPath);\n      var nodes = parent.nodes.splice(index, 0, node);\n      parent = parent.set('nodes', nodes);\n      var ret = this.replaceNode(parentPath, parent);\n      return ret;\n    }\n    /**\n     * Insert `text` at `offset` in node by `path`.\n     *\n     * @param {List|String} path\n     * @param {Number} offset\n     * @param {String} text\n     * @param {Set} marks\n     * @return {Node}\n     */\n\n  }, {\n    key: 'insertText',\n    value: function insertText(path, offset, text, marks) {\n      var node = this.assertDescendant(path);\n      path = this.resolvePath(path);\n      node = node.insertText(offset, text, marks);\n      var ret = this.replaceNode(path, node);\n      return ret;\n    }\n    /**\n     * Check whether the node is a leaf block.\n     *\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'isLeafBlock',\n    value: function isLeafBlock() {\n      var object = this.object,\n          nodes = this.nodes;\n      if (object !== 'block') return false;\n      if (!nodes.size) return true;\n      return nodes.first().object !== 'block';\n    }\n    /**\n     * Check whether the node is a leaf inline.\n     *\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'isLeafInline',\n    value: function isLeafInline() {\n      var object = this.object,\n          nodes = this.nodes;\n      if (object !== 'inline') return false;\n      if (!nodes.size) return true;\n      return nodes.first().object !== 'inline';\n    }\n    /**\n     * Check whether a descendant node is inside a range. This will return true for all\n     * text nodes inside the range and all ancestors of those text nodes up to this node.\n     *\n     * @param {List|string} path\n     * @param {Range} range\n     * @return {Node}\n     */\n\n  }, {\n    key: 'isNodeInRange',\n    value: function isNodeInRange(path, range) {\n      this.assertDescendant(path);\n      path = this.resolvePath(path);\n      range = this.resolveRange(range);\n      if (range.isUnset) return false;\n      var toStart = PathUtils.compare(path, range.start.path);\n      var toEnd = range.start.key === range.end.key ? toStart : PathUtils.compare(path, range.end.path);\n      var is$$1 = toStart !== -1 && toEnd !== 1;\n      return is$$1;\n    }\n    /**\n     * Map all child nodes, updating them in their parents. This method is\n     * optimized to not return a new node if no changes are made.\n     *\n     * @param {Function} iterator\n     * @return {Node}\n     */\n\n  }, {\n    key: 'mapChildren',\n    value: function mapChildren(iterator) {\n      var _this6 = this;\n\n      var nodes = this.nodes;\n      nodes.forEach(function (node, i) {\n        var ret = iterator(node, i, _this6.nodes);\n        if (ret !== node) nodes = nodes.set(ret.key, ret);\n      });\n      var ret = this.set('nodes', nodes);\n      return ret;\n    }\n    /**\n     * Map all descendant nodes, updating them in their parents. This method is\n     * optimized to not return a new node if no changes are made.\n     *\n     * @param {Function} iterator\n     * @return {Node}\n     */\n\n  }, {\n    key: 'mapDescendants',\n    value: function mapDescendants(iterator) {\n      var _this7 = this;\n\n      var nodes = this.nodes;\n      nodes.forEach(function (node, index) {\n        var ret = node;\n        if (ret.object !== 'text') ret = ret.mapDescendants(iterator);\n        ret = iterator(ret, index, _this7.nodes);\n        if (ret === node) return;\n        nodes = nodes.set(index, ret);\n      });\n      var ret = this.set('nodes', nodes);\n      return ret;\n    }\n    /**\n     * Merge a node backwards its previous sibling.\n     *\n     * @param {List|Key} path\n     * @return {Node}\n     */\n\n  }, {\n    key: 'mergeNode',\n    value: function mergeNode(path) {\n      var b = this.assertNode(path);\n      path = this.resolvePath(path);\n\n      if (path.last() === 0) {\n        throw new Error('Unable to merge node because it has no previous sibling: ' + b);\n      }\n\n      var withPath = PathUtils.decrement(path);\n      var a = this.assertNode(withPath);\n\n      if (a.object !== b.object) {\n        throw new Error('Unable to merge two different kinds of nodes: ' + a + ' and ' + b);\n      }\n\n      var newNode = a.object === 'text' ? a.mergeText(b) : a.set('nodes', a.nodes.concat(b.nodes));\n      var ret = this;\n      ret = ret.removeNode(path);\n      ret = ret.removeNode(withPath);\n      ret = ret.insertNode(withPath, newNode);\n      return ret;\n    }\n    /**\n     * Move a node by `path` to `newPath`.\n     *\n     * A `newIndex` can be provided when move nodes by `key`, to account for not\n     * being able to have a key for a location in the tree that doesn't exist yet.\n     *\n     * @param {List|Key} path\n     * @param {List|Key} newPath\n     * @param {Number} newIndex\n     * @return {Node}\n     */\n\n  }, {\n    key: 'moveNode',\n    value: function moveNode(path, newPath) {\n      var newIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var node = this.assertNode(path);\n      path = this.resolvePath(path);\n      newPath = this.resolvePath(newPath, newIndex);\n      var newParentPath = PathUtils.lift(newPath);\n      this.assertNode(newParentPath); // TODO: this is a bit hacky, re-creating the operation that led to this method being called\n      // Alternative 1: pass the operation through from apply -> value.moveNode\n      // Alternative 2: add a third property to the operation called \"transformedNewPath\", pass that through\n\n      var op = Operation.create({\n        type: 'move_node',\n        path: path,\n        newPath: newPath\n      });\n      newPath = PathUtils.transform(path, op).first();\n      var ret = this;\n      ret = ret.removeNode(path);\n      ret = ret.insertNode(newPath, node);\n      return ret;\n    }\n    /**\n     * Remove mark from text at `offset` and `length` in node.\n     *\n     * @param {List} path\n     * @param {Number} offset\n     * @param {Number} length\n     * @param {Mark} mark\n     * @return {Node}\n     */\n\n  }, {\n    key: 'removeMark',\n    value: function removeMark(path, offset, length, mark) {\n      var node = this.assertDescendant(path);\n      path = this.resolvePath(path);\n      node = node.removeMark(offset, length, mark);\n      var ret = this.replaceNode(path, node);\n      return ret;\n    }\n    /**\n     * Remove a node.\n     *\n     * @param {List|String} path\n     * @return {Node}\n     */\n\n  }, {\n    key: 'removeNode',\n    value: function removeNode(path) {\n      this.assertDescendant(path);\n      path = this.resolvePath(path);\n      var deep = path.flatMap(function (x) {\n        return ['nodes', x];\n      });\n      var ret = this.deleteIn(deep);\n      return ret;\n    }\n    /**\n     * Remove `text` at `offset` in node.\n     *\n     * @param {List|Key} path\n     * @param {Number} offset\n     * @param {String} text\n     * @return {Node}\n     */\n\n  }, {\n    key: 'removeText',\n    value: function removeText(path, offset, text) {\n      var node = this.assertDescendant(path);\n      node = node.removeText(offset, text.length);\n      var ret = this.replaceNode(path, node);\n      return ret;\n    }\n    /**\n     * Replace a `node` in the tree.\n     *\n     * @param {List|Key} path\n     * @param {Node} node\n     * @return {Node}\n     */\n\n  }, {\n    key: 'replaceNode',\n    value: function replaceNode(path, node) {\n      path = this.resolvePath(path);\n\n      if (!path) {\n        throw new Error('Unable to replace a node because it could not be found in the first place: ' + path);\n      }\n\n      if (!path.size) return node;\n      this.assertNode(path);\n      var deep = path.flatMap(function (x) {\n        return ['nodes', x];\n      });\n      var ret = this.setIn(deep, node);\n      return ret;\n    }\n    /**\n     * Resolve a `decoration`, relative to the node, ensuring that the keys and\n     * offsets in the decoration exist and that they are synced with the paths.\n     *\n     * @param {Decoration|Object} decoration\n     * @return {Decoration}\n     */\n\n  }, {\n    key: 'resolveDecoration',\n    value: function resolveDecoration(decoration) {\n      decoration = Decoration.create(decoration);\n      decoration = decoration.normalize(this);\n      return decoration;\n    }\n    /**\n     * Resolve a `point`, relative to the node, ensuring that the keys and\n     * offsets in the point exist and that they are synced with the paths.\n     *\n     * @param {Point|Object} point\n     * @return {Point}\n     */\n\n  }, {\n    key: 'resolvePoint',\n    value: function resolvePoint(point) {\n      point = Point.create(point);\n      point = point.normalize(this);\n      return point;\n    }\n    /**\n     * Resolve a `range`, relative to the node, ensuring that the keys and\n     * offsets in the range exist and that they are synced with the paths.\n     *\n     * @param {Range|Object} range\n     * @return {Range}\n     */\n\n  }, {\n    key: 'resolveRange',\n    value: function resolveRange(range) {\n      range = Range.create(range);\n      range = range.normalize(this);\n      return range;\n    }\n    /**\n     * Resolve a `selection`, relative to the node, ensuring that the keys and\n     * offsets in the selection exist and that they are synced with the paths.\n     *\n     * @param {Selection|Object} selection\n     * @return {Selection}\n     */\n\n  }, {\n    key: 'resolveSelection',\n    value: function resolveSelection(selection) {\n      selection = Selection.create(selection);\n      selection = selection.normalize(this);\n      return selection;\n    }\n    /**\n     * Set `properties` on a node.\n     *\n     * @param {List|String} path\n     * @param {Object} properties\n     * @return {Node}\n     */\n\n  }, {\n    key: 'setNode',\n    value: function setNode(path, properties) {\n      var node = this.assertNode(path);\n      node = node.merge(properties);\n      var ret = this.replaceNode(path, node);\n      return ret;\n    }\n    /**\n     * Set `properties` on `mark` on text at `offset` and `length` in node.\n     *\n     * @param {List|String} path\n     * @param {Number} offset\n     * @param {Number} length\n     * @param {Mark} mark\n     * @param {Object} properties\n     * @return {Node}\n     */\n\n  }, {\n    key: 'setMark',\n    value: function setMark(path, offset, length, properties, newProperties) {\n      var node = this.assertNode(path);\n      node = node.updateMark(offset, length, properties, newProperties);\n      var ret = this.replaceNode(path, node);\n      return ret;\n    }\n    /**\n     * Split a node by `path` at `position` with optional `properties` to apply\n     * to the newly split node.\n     *\n     * @param {List|String} path\n     * @param {Number} position\n     * @param {Object} properties\n     * @return {Node}\n     */\n\n  }, {\n    key: 'splitNode',\n    value: function splitNode(path, position, properties) {\n      var child = this.assertNode(path);\n      path = this.resolvePath(path);\n      var a = void 0;\n      var b = void 0;\n\n      if (child.object === 'text') {\n        var _child$splitText = child.splitText(position);\n\n        var _child$splitText2 = slicedToArray(_child$splitText, 2);\n\n        a = _child$splitText2[0];\n        b = _child$splitText2[1];\n      } else {\n        var befores = child.nodes.take(position);\n        var afters = child.nodes.skip(position);\n        a = child.set('nodes', befores);\n        b = child.set('nodes', afters).regenerateKey();\n      }\n\n      if (properties && child.object !== 'text') {\n        b = b.merge(properties);\n      }\n\n      var ret = this;\n      ret = ret.removeNode(path);\n      ret = ret.insertNode(path, b);\n      ret = ret.insertNode(path, a);\n      return ret;\n    }\n  }]);\n  return ElementInterface;\n}();\n/**\n * Mix in assertion variants.\n */\n\n\nvar ASSERTS = ['Child', 'Depth', 'Descendant', 'Node', 'Parent', 'Path'];\n\nvar _loop2 = function _loop2(method) {\n  ElementInterface.prototype['assert' + method] = function (path) {\n    for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n\n    var ret = this['get' + method].apply(this, [path].concat(args));\n\n    if (ret == null) {\n      throw new Error('`Node.assert' + method + '` could not find node with path or key: ' + path);\n    }\n\n    return ret;\n  };\n};\n\nvar _iteratorNormalCompletion$1 = true;\nvar _didIteratorError$1 = false;\nvar _iteratorError$1 = undefined;\n\ntry {\n  for (var _iterator$1 = ASSERTS[Symbol.iterator](), _step$1; !(_iteratorNormalCompletion$1 = (_step$1 = _iterator$1.next()).done); _iteratorNormalCompletion$1 = true) {\n    var method$1 = _step$1.value;\n\n    _loop2(method$1);\n  }\n  /**\n   * Memoize read methods.\n   */\n\n} catch (err) {\n  _didIteratorError$1 = true;\n  _iteratorError$1 = err;\n} finally {\n  try {\n    if (!_iteratorNormalCompletion$1 && _iterator$1.return) {\n      _iterator$1.return();\n    }\n  } finally {\n    if (_didIteratorError$1) {\n      throw _iteratorError$1;\n    }\n  }\n}\n\nmemoize(ElementInterface.prototype, ['getBlocksAsArray', 'getLeafBlocksAtRangeAsArray', 'getBlocksByTypeAsArray', 'getDecorations', 'getFragmentAtRange', 'getInlinesAsArray', 'getInlinesByTypeAsArray', 'getLeafBlocksAtRangeAsArray', 'getLeafInlinesAtRangeAsArray', 'getMarksAsArray', 'getMarksAtPosition', 'getNodesAtRange', 'getOrderedMarksBetweenPositions', 'getInsertMarksAtRange', 'getMarksByTypeAsArray', 'getNextBlock', 'getOffset', 'getOffsetAtRange', 'getPreviousBlock', 'getRootBlocksAtRange', 'getRootInlinesAtRangeAsArray', 'getTextAtOffset', 'getTextDirection', 'getTextsAsArray', 'getTextsBetweenPathPositionsAsArray']);\n/**\n * Mix in the element interface.\n */\n\nmixin(ElementInterface, [Block, Document, Inline]);\n\nvar RangeInterface = function () {\n  function RangeInterface() {\n    classCallCheck(this, RangeInterface);\n  }\n\n  createClass(RangeInterface, [{\n    key: 'flip',\n\n    /**\n     * Flip the range.\n     *\n     * @return {Range}\n     */\n    value: function flip() {\n      var range = this.setPoints([this.focus, this.anchor]);\n      return range;\n    }\n    /**\n     * Move the anchor and focus offsets forward `n` characters.\n     *\n     * @param {Number} n\n     * @return {Range}\n     */\n\n  }, {\n    key: 'moveForward',\n    value: function moveForward(n) {\n      return this.updatePoints(function (point) {\n        return point.moveForward(n);\n      });\n    }\n    /**\n     * Move the anchor and focus offsets backward `n` characters.\n     *\n     * @param {Number} n\n     * @return {Range}\n     */\n\n  }, {\n    key: 'moveBackward',\n    value: function moveBackward(n) {\n      return this.updatePoints(function (point) {\n        return point.moveBackward(n);\n      });\n    }\n    /**\n     * Move the anchor offset backward `n` characters.\n     *\n     * @param {Number} n\n     * @return {Range}\n     */\n\n  }, {\n    key: 'moveAnchorBackward',\n    value: function moveAnchorBackward(n) {\n      var range = this.setAnchor(this.anchor.moveBackward(n));\n      return range;\n    }\n    /**\n     * Move the anchor offset forward `n` characters.\n     *\n     * @param {Number} n\n     * @return {Range}\n     */\n\n  }, {\n    key: 'moveAnchorForward',\n    value: function moveAnchorForward(n) {\n      var range = this.setAnchor(this.anchor.moveForward(n));\n      return range;\n    }\n    /**\n     * Move the range's anchor point to a new `path` and `offset`.\n     *\n     * Optionally, the `path` can be a key string, or omitted entirely in which\n     * case it would be the offset number.\n     *\n     * @param {List|String} path\n     * @param {Number} offset\n     * @return {Range}\n     */\n\n  }, {\n    key: 'moveAnchorTo',\n    value: function moveAnchorTo(path, offset) {\n      var range = this.setAnchor(this.anchor.moveTo(path, offset));\n      return range;\n    }\n    /**\n     * Move the range's anchor point to the start of a `node`.\n     *\n     * @param {Node} node\n     * @return {Range}\n     */\n\n  }, {\n    key: 'moveAnchorToStartOfNode',\n    value: function moveAnchorToStartOfNode(node) {\n      var range = this.setAnchor(this.anchor.moveToStartOfNode(node));\n      return range;\n    }\n    /**\n     * Move the range's anchor point to the end of a `node`.\n     *\n     * @param {Node} node\n     * @return {Range}\n     */\n\n  }, {\n    key: 'moveAnchorToEndOfNode',\n    value: function moveAnchorToEndOfNode(node) {\n      var range = this.setAnchor(this.anchor.moveToEndOfNode(node));\n      return range;\n    }\n    /**\n     * Move the end offset backward `n` characters.\n     *\n     * @param {Number} n\n     * @return {Range}\n     */\n\n  }, {\n    key: 'moveEndBackward',\n    value: function moveEndBackward(n) {\n      var range = this.setEnd(this.end.moveBackward(n));\n      return range;\n    }\n    /**\n     * Move the end offset forward `n` characters.\n     *\n     * @param {Number} n\n     * @return {Range}\n     */\n\n  }, {\n    key: 'moveEndForward',\n    value: function moveEndForward(n) {\n      var range = this.setEnd(this.end.moveForward(n));\n      return range;\n    }\n    /**\n     * Move the range's end point to a new `path` and `offset`.\n     *\n     * Optionally, the `path` can be a key string, or omitted entirely in which\n     * case it would be the offset number.\n     *\n     * @param {List|String} path\n     * @param {Number} offset\n     * @return {Range}\n     */\n\n  }, {\n    key: 'moveEndTo',\n    value: function moveEndTo(path, offset) {\n      var range = this.setEnd(this.end.moveTo(path, offset));\n      return range;\n    }\n    /**\n     * Move the range's end point to the start of a `node`.\n     *\n     * @param {Node} node\n     * @return {Range}\n     */\n\n  }, {\n    key: 'moveEndToStartOfNode',\n    value: function moveEndToStartOfNode(node) {\n      var range = this.setEnd(this.end.moveToStartOfNode(node));\n      return range;\n    }\n    /**\n     * Move the range's end point to the end of a `node`.\n     *\n     * @param {Node} node\n     * @return {Range}\n     */\n\n  }, {\n    key: 'moveEndToEndOfNode',\n    value: function moveEndToEndOfNode(node) {\n      var range = this.setEnd(this.end.moveToEndOfNode(node));\n      return range;\n    }\n    /**\n     * Move the focus offset backward `n` characters.\n     *\n     * @param {Number} n\n     * @return {Range}\n     */\n\n  }, {\n    key: 'moveFocusBackward',\n    value: function moveFocusBackward(n) {\n      var range = this.setFocus(this.focus.moveBackward(n));\n      return range;\n    }\n    /**\n     * Move the focus offset forward `n` characters.\n     *\n     * @param {Number} n\n     * @return {Range}\n     */\n\n  }, {\n    key: 'moveFocusForward',\n    value: function moveFocusForward(n) {\n      var range = this.setFocus(this.focus.moveForward(n));\n      return range;\n    }\n    /**\n     * Move the range's focus point to a new `path` and `offset`.\n     *\n     * Optionally, the `path` can be a key string, or omitted entirely in which\n     * case it would be the offset number.\n     *\n     * @param {List|String} path\n     * @param {Number} offset\n     * @return {Range}\n     */\n\n  }, {\n    key: 'moveFocusTo',\n    value: function moveFocusTo(path, offset) {\n      var range = this.setFocus(this.focus.moveTo(path, offset));\n      return range;\n    }\n    /**\n     * Move the range's focus point to the start of a `node`.\n     *\n     * @param {Node} node\n     * @return {Range}\n     */\n\n  }, {\n    key: 'moveFocusToStartOfNode',\n    value: function moveFocusToStartOfNode(node) {\n      var range = this.setFocus(this.focus.moveToStartOfNode(node));\n      return range;\n    }\n    /**\n     * Move the range's focus point to the end of a `node`.\n     *\n     * @param {Node} node\n     * @return {Range}\n     */\n\n  }, {\n    key: 'moveFocusToEndOfNode',\n    value: function moveFocusToEndOfNode(node) {\n      var range = this.setFocus(this.focus.moveToEndOfNode(node));\n      return range;\n    }\n    /**\n     * Move the start offset backward `n` characters.\n     *\n     * @param {Number} n\n     * @return {Range}\n     */\n\n  }, {\n    key: 'moveStartBackward',\n    value: function moveStartBackward(n) {\n      var range = this.setStart(this.start.moveBackward(n));\n      return range;\n    }\n    /**\n     * Move the start offset forward `n` characters.\n     *\n     * @param {Number} n\n     * @return {Range}\n     */\n\n  }, {\n    key: 'moveStartForward',\n    value: function moveStartForward(n) {\n      var range = this.setStart(this.start.moveForward(n));\n      return range;\n    }\n    /**\n     * Move the range's start point to a new `path` and `offset`.\n     *\n     * Optionally, the `path` can be a key string, or omitted entirely in which\n     * case it would be the offset number.\n     *\n     * @param {List|String} path\n     * @param {Number} offset\n     * @return {Range}\n     */\n\n  }, {\n    key: 'moveStartTo',\n    value: function moveStartTo(path, offset) {\n      var range = this.setStart(this.start.moveTo(path, offset));\n      return range;\n    }\n    /**\n     * Move the range's start point to the start of a `node`.\n     *\n     * @param {Node} node\n     * @return {Range}\n     */\n\n  }, {\n    key: 'moveStartToStartOfNode',\n    value: function moveStartToStartOfNode(node) {\n      var range = this.setStart(this.start.moveToStartOfNode(node));\n      return range;\n    }\n    /**\n     * Move the range's start point to the end of a `node`.\n     *\n     * @param {Node} node\n     * @return {Range}\n     */\n\n  }, {\n    key: 'moveStartToEndOfNode',\n    value: function moveStartToEndOfNode(node) {\n      var range = this.setStart(this.start.moveToEndOfNode(node));\n      return range;\n    }\n    /**\n     * Move range's points to a new `path` and `offset`.\n     *\n     * @param {Number} n\n     * @return {Range}\n     */\n\n  }, {\n    key: 'moveTo',\n    value: function moveTo(path, offset) {\n      return this.updatePoints(function (point) {\n        return point.moveTo(path, offset);\n      });\n    }\n    /**\n     * Move the focus point to the anchor point.\n     *\n     * @return {Range}\n     */\n\n  }, {\n    key: 'moveToAnchor',\n    value: function moveToAnchor() {\n      var range = this.setFocus(this.anchor);\n      return range;\n    }\n    /**\n     * Move the start point to the end point.\n     *\n     * @return {Range}\n     */\n\n  }, {\n    key: 'moveToEnd',\n    value: function moveToEnd() {\n      var range = this.setStart(this.end);\n      return range;\n    }\n    /**\n     * Move the range's points to the end of a `node`.\n     *\n     * @param {Node} node\n     * @return {Range}\n     */\n\n  }, {\n    key: 'moveToEndOfNode',\n    value: function moveToEndOfNode(node) {\n      return this.updatePoints(function (point) {\n        return point.moveToEndOfNode(node);\n      });\n    }\n    /**\n     * Move the anchor point to the focus point.\n     *\n     * @return {Range}\n     */\n\n  }, {\n    key: 'moveToFocus',\n    value: function moveToFocus() {\n      var range = this.setAnchor(this.focus);\n      return range;\n    }\n    /**\n     * Move to the entire range of `start` and `end` nodes.\n     *\n     * @param {Node} start\n     * @param {Node} end (optional)\n     * @return {Range}\n     */\n\n  }, {\n    key: 'moveToRangeOfNode',\n    value: function moveToRangeOfNode(start) {\n      var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : start;\n      var range = this.setPoints([this.anchor.moveToStartOfNode(start), this.focus.moveToEndOfNode(end)]);\n      return range;\n    }\n    /**\n     * Move the end point to the start point.\n     *\n     * @return {Range}\n     */\n\n  }, {\n    key: 'moveToStart',\n    value: function moveToStart() {\n      var range = this.setEnd(this.start);\n      return range;\n    }\n    /**\n     * Move the range's points to the start of a `node`.\n     *\n     * @param {Node} node\n     * @return {Range}\n     */\n\n  }, {\n    key: 'moveToStartOfNode',\n    value: function moveToStartOfNode(node) {\n      return this.updatePoints(function (point) {\n        return point.moveToStartOfNode(node);\n      });\n    }\n    /**\n     * Normalize the range, relative to a `node`, ensuring that the anchor\n     * and focus nodes of the range always refer to leaf text nodes.\n     *\n     * @param {Node} node\n     * @return {Range}\n     */\n\n  }, {\n    key: 'normalize',\n    value: function normalize(node) {\n      return this.updatePoints(function (point) {\n        return point.normalize(node);\n      });\n    }\n    /**\n     * Set the anchor point to a new `anchor`.\n     *\n     * @param {Point} anchor\n     * @return {Range}\n     */\n\n  }, {\n    key: 'setAnchor',\n    value: function setAnchor(anchor) {\n      var range = this.set('anchor', anchor);\n      return range;\n    }\n    /**\n     * Set the end point to a new `point`.\n     *\n     * @param {Point} point\n     * @return {Range}\n     */\n\n  }, {\n    key: 'setEnd',\n    value: function setEnd(point) {\n      var range = this.isBackward ? this.setAnchor(point) : this.setFocus(point);\n      return range;\n    }\n    /**\n     * Set the focus point to a new `focus`.\n     *\n     * @param {Point} focus\n     * @return {Range}\n     */\n\n  }, {\n    key: 'setFocus',\n    value: function setFocus(focus) {\n      var range = this.set('focus', focus);\n      return range;\n    }\n    /**\n     * Set the anchor and focus points to new `values`.\n     *\n     * @param {Array<Point>} values\n     * @return {Range}\n     */\n\n  }, {\n    key: 'setPoints',\n    value: function setPoints(values) {\n      var _values = slicedToArray(values, 2),\n          anchor = _values[0],\n          focus = _values[1];\n\n      var range = this.set('anchor', anchor).set('focus', focus);\n      return range;\n    }\n    /**\n     * Set the anchor and focus points with `updater` callback\n     *\n     * @param {Function} updater\n     * @return {Range}\n     */\n\n  }, {\n    key: 'updatePoints',\n    value: function updatePoints(updater) {\n      var anchor = this.anchor,\n          focus = this.focus;\n      anchor = updater(anchor);\n      focus = updater(focus);\n      return this.merge({\n        anchor: anchor,\n        focus: focus\n      });\n    }\n    /**\n     * Set the start point to a new `point`.\n     *\n     * @param {Point} point\n     * @return {Range}\n     */\n\n  }, {\n    key: 'setStart',\n    value: function setStart(point) {\n      var range = this.isBackward ? this.setFocus(point) : this.setAnchor(point);\n      return range;\n    }\n    /**\n     * Set new `properties` on the range.\n     *\n     * @param {Object|Range} properties\n     * @return {Range}\n     */\n\n  }, {\n    key: 'setProperties',\n    value: function setProperties(properties) {\n      properties = Range.createProperties(properties);\n      var _properties = properties,\n          anchor = _properties.anchor,\n          focus = _properties.focus,\n          props = objectWithoutProperties(_properties, ['anchor', 'focus']);\n\n      if (anchor) {\n        props.anchor = Point.create(anchor);\n      }\n\n      if (focus) {\n        props.focus = Point.create(focus);\n      }\n\n      var range = this.merge(props);\n      return range;\n    }\n    /**\n     * Return a JSON representation of the range.\n     *\n     * @param {Object} options\n     * @return {Object}\n     */\n\n  }, {\n    key: 'toJSON',\n    value: function toJSON() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var object = {\n        object: this.object,\n        anchor: this.anchor.toJSON(options),\n        focus: this.focus.toJSON(options)\n      };\n      return object;\n    }\n    /**\n     * Return a `Range` instance from any range-like instance.\n     *\n     * @return {Range}\n     */\n\n  }, {\n    key: 'toRange',\n    value: function toRange() {\n      var properties = Range.createProperties(this);\n      var range = Range.create(properties);\n      return range;\n    }\n    /**\n     * Unset the range.\n     *\n     * @return {Range}\n     */\n\n  }, {\n    key: 'unset',\n    value: function unset() {\n      var range = this.updatePoints(function (p) {\n        return p.unset();\n      });\n      return range;\n    }\n  }, {\n    key: 'isCollapsed',\n\n    /**\n     * Check whether the range is collapsed.\n     *\n     * @return {Boolean}\n     */\n    get: function get$$1() {\n      return this.anchor === this.focus || this.anchor.key === this.focus.key && this.anchor.offset === this.focus.offset;\n    }\n    /**\n     * Check whether the range is expanded.\n     *\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'isExpanded',\n    get: function get$$1() {\n      return !this.isCollapsed;\n    }\n    /**\n     * Check whether the range is backward.\n     *\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'isBackward',\n    get: function get$$1() {\n      var isUnset = this.isUnset,\n          anchor = this.anchor,\n          focus = this.focus;\n\n      if (isUnset) {\n        return null;\n      }\n\n      if (anchor.key === focus.key) {\n        return anchor.offset > focus.offset;\n      }\n\n      var isBackward = PathUtils.isBefore(focus.path, anchor.path);\n      return isBackward;\n    }\n    /**\n     * Check whether the range is forward.\n     *\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'isForward',\n    get: function get$$1() {\n      var isBackward = this.isBackward;\n      var isForward = isBackward == null ? null : !isBackward;\n      return isForward;\n    }\n    /**\n     * Check whether the range isn't set.\n     *\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'isUnset',\n    get: function get$$1() {\n      var anchor = this.anchor,\n          focus = this.focus;\n      var isUnset = anchor.isUnset || focus.isUnset;\n      return isUnset;\n    }\n    /**\n     * Check whether the range is set.\n     *\n     * @return {Boolean}\n     */\n\n  }, {\n    key: 'isSet',\n    get: function get$$1() {\n      return !this.isUnset;\n    }\n    /**\n     * Get the start point.\n     *\n     * @return {String}\n     */\n\n  }, {\n    key: 'start',\n    get: function get$$1() {\n      return this.isBackward ? this.focus : this.anchor;\n    }\n    /**\n     * Get the end point.\n     *\n     * @return {String}\n     */\n\n  }, {\n    key: 'end',\n    get: function get$$1() {\n      return this.isBackward ? this.anchor : this.focus;\n    }\n  }]);\n  return RangeInterface;\n}();\n/**\n * Mix in the range interface.\n *\n * @param {Record}\n */\n\n\nmixin(RangeInterface, [Decoration, Range, Selection]);\nvar index = {\n  Block: Block,\n  Change: Change,\n  Data: Data,\n  Decoration: Decoration,\n  Document: Document,\n  Editor: Editor,\n  Inline: Inline,\n  KeyUtils: KeyUtils,\n  Leaf: Leaf,\n  Mark: Mark,\n  Node: Node,\n  Operation: Operation,\n  PathUtils: PathUtils,\n  Point: Point,\n  Range: Range,\n  resetMemoization: resetMemoization,\n  Selection: Selection,\n  Text: Text,\n  TextUtils: TextUtils,\n  useMemoization: useMemoization,\n  Value: Value\n};\nexport default index;\nexport { Block, Change, Data, Decoration, Document, Editor, Inline, KeyUtils, Leaf, Mark, Node, Operation, PathUtils, Point, Range, resetMemoization, Selection, Text, TextUtils, useMemoization, Value };","map":{"version":3,"sources":["../src/utils/key-utils.js","../src/models/data.js","../src/models/document.js","../src/models/inline.js","../src/models/mark.js","../src/models/leaf.js","../src/utils/memoize.js","../src/models/text.js","../src/models/node.js","../src/models/block.js","../src/utils/path-utils.js","../src/models/point.js","../src/models/decoration.js","../src/utils/is-object.js","../src/models/range.js","../src/models/selection.js","../src/models/value.js","../src/operations/apply.js","../src/operations/invert.js","../src/models/operation.js","../src/models/change.js","../src/plugins/commands.js","../src/utils/text-utils.js","../src/commands/at-range.js","../src/commands/by-path.js","../src/commands/on-history.js","../src/commands/on-selection.js","../src/commands/on-value.js","../src/plugins/queries.js","../src/utils/slate-error.js","../src/plugins/schema.js","../src/commands/with-intent.js","../src/plugins/core.js","../src/controllers/editor.js","../src/utils/mixin.js","../src/interfaces/object.js","../src/interfaces/model.js","../src/interfaces/node.js","../src/interfaces/element.js","../src/interfaces/range.js","../src/index.js"],"names":["n","generate","key","resetGenerator","Data","attrs","Map","isPlainObject","object","fromJS","fromJSON","DEFAULTS","undefined","Document","Record","List","Array","nodes","data","KeyUtils","document","Node","options","Inline","type","elements","list","inline","any","Mark","Set","marks","props","mark","Leaf","text","leaves","invalid","result","firstLeaf","cache","leaf","offset","endOffset","index","left","right","startOffset","length","newMark","newMarks","set","string","next","m","ENABLED","LEAF","Symbol","STORE_KEY","UNDEFINED","NULL","UNSET","memoizeStore","property","properties","original","args","noArgs","hasArgs","takesArguments","cachedValue","keys","getIn","value","v","map","child","newChild","Text","node","l","first","newFirst","before","bundle","middle","after","x","decorations","d","start","end","dec","hasStart","hasEnd","leafEnd","leafStart","c","array","delta","beforeText","afterText","nextLeaves","r","newProperties","splitted","one","two","memoize","Block","block","min","i","pv","path","tv","target","size","ca","a","cb","b","increment","ancestors","newValue","newPath","p","t","crop","compare","pl","tl","isEqual","parent","relative","Math","av","bv","create","position","operation","pIndex","pEqual","pYounger","isYounger","pAbove","isAbove","decrement","np","paths","Point","PathUtils","point","is","range","last","Decoration","Range","anchor","focus","JSON","decoration","TYPES","isObject","Selection","isFocused","selection","Value","newDocument","withPath","max","newIndex","prev","iterator","sel","decs","debug","Debug","Operation","inverse","op","inversePath","transformedSibling","OPERATION_ATTRIBUTES","ATTRIBUTES","apply","inverted","invert","json","Change","operations","change","o","commands","command","fn","SURROGATE_START","SURROGATE_END","SPACE","CHAMELEON","PUNCTUATION","code","remaining","getCharLength","rest","isWord","isSurrogate","char","reverse","getCharOffset","started","getWordOffset","editor","Commands","texts","startKey","endKey","isStartVoid","isEndVoid","startBlock","endBlock","isHanging","prevText","startVoid","nextText","endVoid","startText","endText","startLength","endLength","ancestor","startChild","endChild","startParent","startParentIndex","endParentIndex","afters","startChildIndex","endChildIndex","middles","befores","lonely","voidParent","prevBlock","prevVoid","traversed","TextUtils","nextBlock","nextVoid","wordOffset","deleteExpandedAtRange","startInline","extra","atEnd","siblingText","splitRange","fragment","isAtStart","blocks","firstChild","lastChild","firstBlock","lastBlock","insertionNode","findInsertionNode","lonelyParent","lonelyChild","startIndex","excludingLonelyChild","nextChild","nextNodes","lastIndex","inlineChild","inlineIndex","hasSingleNode","firstNode","fragmentInner","matches","documentNode","documentInner","isCollapsed","sets","inlines","height","h","Infinity","exists","wrappers","children","firstMatch","lastMatch","firstText","firstblock","lastblock","siblings","p1","indexes","ind","inlineParent","endInline","endIndex","inlinekey","rng","startInner","startInnerIndex","endInner","startInlines","endInlines","startNode","endNode","suffix","prefix","startRange","endRange","bx","by","ax","ay","updated","isAtomic","previous","newParentPath","state","from","to","removals","parentPath","activeMarks","activeMark","prevProperties","pick","Object","prevIndex","parentIndex","grandPath","isFirst","isLast","updatedPath","childIndex","childPath","COMMANDS","method","textPath","save","merge","undos","lastBatch","lastOperation","shouldMerge","batch","redos","newData","omit","snapshot","skip","Edge","edge","getNode","Side","side","getDirectionNode","pointForward","hasVoidParent","isInBlock","isPreviousInVoid","pointBackward","isNextInVoid","queries","query","ret","SlateError","Error","rules","schema","schemaRules","rule","testRules","error","validateNode","failure","validateRules","every","Queries","isVoid","normalizeNode","validateObject","validateType","validateData","validateMarks","validateText","validateFirst","validateLast","validateNodes","fail","valid","def","defs","count","lastCount","err","validateParent","validatePrevious","validateNext","lastMin","nextDef","lastText","lastInline","isAppending","isInserting","newTexts","newText","depth","plugins","match","Editor","controller","construct","onChange","readOnly","core","CorePlugin","newDirtyPaths","getDirtyPaths","dirty","transformed","memo","obj","has","table","middleware","fns","overrides","normalize","nextPath","previousPath","oldAncestors","newAncestors","iterations","found","registerPlugin","plugin","commandsPlugin","CommandsPlugin","queriesPlugin","QueriesPlugin","schemaPlugin","SchemaPlugin","Class","Classes","name","desc","Interface","TYPE","camel","ObjectInterface","mixin","ModelInterface","NodeInterface","descendant","nested","dict","normalizer","ElementInterface","pathToThisNode","findLast","foundPath","startPath","endPath","startMarks","endMarks","current","closest","startAt","targetPath","targetPosition","mode","furthest","OrderedSet","childStartPath","childEndPath","currentMarks","closestBlock","previousText","nextNode","childMatch","assign","sibling","stack","onStartEdge","onEndEdge","relativeStartPath","relativeEndPath","previousNode","isSelected","dir","direction","arr","toStart","toEnd","newNode","deep","ASSERTS","RangeInterface","isUnset","isBackward","isForward","values","updater"],"mappings":"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","sourcesContent":["/**\n * An auto-incrementing index for generating keys.\n *\n * @type {Number}\n */\n\nlet n\n\n/**\n * The global key generating function.\n *\n * @type {Function}\n */\n\nlet generate\n\n/**\n * Create a key, using a provided key if available.\n *\n * @param {String|Void} key\n * @return {String}\n */\n\nfunction create(key) {\n  if (key == null) {\n    return generate()\n  }\n\n  if (typeof key === 'string') {\n    return key\n  }\n\n  throw new Error(`Keys must be strings, but you passed: ${key}`)\n}\n\n/**\n * Set a different unique ID generating `function`.\n *\n * @param {Function} func\n */\n\nfunction setGenerator(func) {\n  generate = func\n}\n\n/**\n * Reset the key generating function to its initial state.\n */\n\nfunction resetGenerator() {\n  n = 0\n  generate = () => `${n++}`\n}\n\n/**\n * Set the initial state.\n */\n\nresetGenerator()\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default {\n  create,\n  setGenerator,\n  resetGenerator,\n}\n","import isPlainObject from 'is-plain-object'\nimport { Map } from 'immutable'\n\n/**\n * Data.\n *\n * This isn't an immutable record, it's just a thin wrapper around `Map` so that\n * we can allow for more convenient creation.\n *\n * @type {Object}\n */\n\nclass Data {\n  /**\n   * Create a new `Data` with `attrs`.\n   *\n   * @param {Object|Data|Map} attrs\n   * @return {Data} data\n   */\n\n  static create(attrs = {}) {\n    if (Map.isMap(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Data.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Data.create\\` only accepts objects or maps, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Data` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Data}\n   */\n\n  static fromJSON(object) {\n    return new Map(object)\n  }\n\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS = Data.fromJSON\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Data\n","import isPlainObject from 'is-plain-object'\nimport { List, Map, Record } from 'immutable'\n\nimport KeyUtils from '../utils/key-utils'\nimport Node from './node'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: undefined,\n  key: undefined,\n  nodes: undefined,\n}\n\n/**\n * Document.\n *\n * @type {Document}\n */\n\nclass Document extends Record(DEFAULTS) {\n  /**\n   * Create a new `Document` with `attrs`.\n   *\n   * @param {Object|Array|List|Text} attrs\n   * @return {Document}\n   */\n\n  static create(attrs = {}) {\n    if (Document.isDocument(attrs)) {\n      return attrs\n    }\n\n    if (List.isList(attrs) || Array.isArray(attrs)) {\n      attrs = { nodes: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Document.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Document.create\\` only accepts objects, arrays, lists or documents, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Document` from a JSON `object`.\n   *\n   * @param {Object|Document} object\n   * @return {Document}\n   */\n\n  static fromJSON(object) {\n    if (Document.isDocument(object)) {\n      return object\n    }\n\n    const { data = {}, key = KeyUtils.create(), nodes = [] } = object\n\n    const document = new Document({\n      key,\n      data: new Map(data),\n      nodes: Node.createList(nodes),\n    })\n\n    return document\n  }\n\n  /**\n   * Return a JSON representation of the document.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      data: this.data.toJSON(),\n      nodes: this.nodes.toArray().map(n => n.toJSON(options)),\n    }\n\n    if (options.preserveKeys) {\n      object.key = this.key\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Document}\n */\n\nexport default Document\n","import isPlainObject from 'is-plain-object'\nimport { List, Map, Record } from 'immutable'\n\nimport KeyUtils from '../utils/key-utils'\nimport Node from './node'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: undefined,\n  key: undefined,\n  nodes: undefined,\n  type: undefined,\n}\n\n/**\n * Inline.\n *\n * @type {Inline}\n */\n\nclass Inline extends Record(DEFAULTS) {\n  /**\n   * Create a new `Inline` with `attrs`.\n   *\n   * @param {Object|String|Inline} attrs\n   * @return {Inline}\n   */\n\n  static create(attrs = {}) {\n    if (Inline.isInline(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs === 'string') {\n      attrs = { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Inline.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Inline.create\\` only accepts objects, strings or inlines, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Inlines` from an array.\n   *\n   * @param {Array<Inline|Object>|List<Inline|Object>} elements\n   * @return {List<Inline>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Inline.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Inline.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a `Inline` from a JSON `object`.\n   *\n   * @param {Object|Inline} object\n   * @return {Inline}\n   */\n\n  static fromJSON(object) {\n    if (Inline.isInline(object)) {\n      return object\n    }\n\n    const { data = {}, key = KeyUtils.create(), nodes = [], type } = object\n\n    if (typeof type !== 'string') {\n      throw new Error('`Inline.fromJS` requires a `type` string.')\n    }\n\n    const inline = new Inline({\n      key,\n      type,\n      data: new Map(data),\n      nodes: Node.createList(nodes),\n    })\n\n    return inline\n  }\n\n  /**\n   * Check if `any` is a list of inlines.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isInlineList(any) {\n    return List.isList(any) && any.every(item => Inline.isInline(item))\n  }\n\n  /**\n   * Return a JSON representation of the inline.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      type: this.type,\n      data: this.data.toJSON(),\n      nodes: this.nodes.toArray().map(n => n.toJSON(options)),\n    }\n\n    if (options.preserveKeys) {\n      object.key = this.key\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Inline}\n */\n\nexport default Inline\n","import isPlainObject from 'is-plain-object'\nimport { Map, Record, Set } from 'immutable'\n\nimport Data from './data'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: undefined,\n  type: undefined,\n}\n\n/**\n * Mark.\n *\n * @type {Mark}\n */\n\nclass Mark extends Record(DEFAULTS) {\n  /**\n   * Create a new `Mark` with `attrs`.\n   *\n   * @param {Object|Mark} attrs\n   * @return {Mark}\n   */\n\n  static create(attrs = {}) {\n    if (Mark.isMark(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs === 'string') {\n      attrs = { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Mark.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Mark.create\\` only accepts objects, strings or marks, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a set of marks.\n   *\n   * @param {Array<Object|Mark>} elements\n   * @return {Set<Mark>}\n   */\n\n  static createSet(elements) {\n    if (Set.isSet(elements) || Array.isArray(elements)) {\n      const marks = new Set(elements.map(Mark.create))\n      return marks\n    }\n\n    if (elements == null) {\n      return Set()\n    }\n\n    throw new Error(\n      `\\`Mark.createSet\\` only accepts sets, arrays or null, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable mark properties from `attrs`.\n   *\n   * @param {Object|String|Mark} attrs\n   * @return {Object}\n   */\n\n  static createProperties(attrs = {}) {\n    if (Mark.isMark(attrs)) {\n      return {\n        data: attrs.data,\n        type: attrs.type,\n      }\n    }\n\n    if (typeof attrs === 'string') {\n      return { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      const props = {}\n      if ('type' in attrs) props.type = attrs.type\n      if ('data' in attrs) props.data = Data.create(attrs.data)\n      return props\n    }\n\n    throw new Error(\n      `\\`Mark.createProperties\\` only accepts objects, strings or marks, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Mark` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Mark}\n   */\n\n  static fromJSON(object) {\n    const { data = {}, type } = object\n\n    if (typeof type !== 'string') {\n      throw new Error('`Mark.fromJS` requires a `type` string.')\n    }\n\n    const mark = new Mark({\n      type,\n      data: new Map(data),\n    })\n\n    return mark\n  }\n\n  /**\n   * Check if `any` is a set of marks.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isMarkSet(any) {\n    return Set.isSet(any) && any.every(item => Mark.isMark(item))\n  }\n\n  /**\n   * Return a JSON representation of the mark.\n   *\n   * @return {Object}\n   */\n\n  toJSON() {\n    const object = {\n      object: this.object,\n      type: this.type,\n      data: this.data.toJSON(),\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Mark}\n */\n\nexport default Mark\n","import isPlainObject from 'is-plain-object'\nimport { List, Record, Set } from 'immutable'\n\nimport Mark from './mark'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  marks: undefined,\n  text: undefined,\n}\n\n/**\n * Leaf.\n *\n * @type {Leaf}\n */\n\nclass Leaf extends Record(DEFAULTS) {\n  /**\n   * Create a new `Leaf` with `attrs`.\n   *\n   * @param {Object|Leaf} attrs\n   * @return {Leaf}\n   */\n\n  static create(attrs = {}) {\n    if (Leaf.isLeaf(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs === 'string') {\n      attrs = { text: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Leaf.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Leaf.create\\` only accepts objects, strings or leaves, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a valid List of `Leaf` from `leaves`\n   *\n   * @param {List<Leaf>} leaves\n   * @return {List<Leaf>}\n   */\n\n  static createLeaves(leaves) {\n    if (leaves.size <= 1) return leaves\n\n    let invalid = false\n\n    // TODO: we can make this faster with [List] and then flatten\n    const result = List().withMutations(cache => {\n      // Search from the leaves left end to find invalid node;\n      leaves.findLast((leaf, index) => {\n        const firstLeaf = cache.first()\n\n        // If the first leaf of cache exist, check whether the first leaf is connectable with the current leaf\n        if (firstLeaf) {\n          // If marks equals, then the two leaves can be connected\n          if (firstLeaf.marks.equals(leaf.marks)) {\n            invalid = true\n            cache.set(0, firstLeaf.set('text', `${leaf.text}${firstLeaf.text}`))\n            return\n          }\n\n          // If the cached leaf is empty, drop the empty leaf with the upcoming leaf\n          if (firstLeaf.text === '') {\n            invalid = true\n            cache.set(0, leaf)\n            return\n          }\n\n          // If the current leaf is empty, drop the leaf\n          if (leaf.text === '') {\n            invalid = true\n            return\n          }\n        }\n\n        cache.unshift(leaf)\n      })\n    })\n\n    if (!invalid) return leaves\n    return result\n  }\n\n  /**\n   * Split a list of leaves to two lists; if the leaves are valid leaves, the returned leaves are also valid\n   * Corner Cases:\n   *   1. if offset is smaller than 0, then return [List(), leaves]\n   *   2. if offset is bigger than the text length, then return [leaves, List()]\n   *\n   * @param {List<Leaf> leaves\n   * @return {Array<List<Leaf>>}\n   */\n\n  static splitLeaves(leaves, offset) {\n    if (offset < 0) return [List(), leaves]\n\n    if (leaves.size === 0) {\n      return [List(), List()]\n    }\n\n    let endOffset = 0\n    let index = -1\n    let left, right\n\n    leaves.find(leaf => {\n      index++\n      const startOffset = endOffset\n      const { text } = leaf\n      endOffset += text.length\n\n      if (endOffset < offset) return false\n      if (startOffset > offset) return false\n\n      const length = offset - startOffset\n      left = leaf.set('text', text.slice(0, length))\n      right = leaf.set('text', text.slice(length))\n      return true\n    })\n\n    if (!left) return [leaves, List()]\n\n    if (left.text === '') {\n      if (index === 0) {\n        return [List.of(left), leaves]\n      }\n\n      return [leaves.take(index), leaves.skip(index)]\n    }\n\n    if (right.text === '') {\n      if (index === leaves.size - 1) {\n        return [leaves, List.of(right)]\n      }\n\n      return [leaves.take(index + 1), leaves.skip(index + 1)]\n    }\n\n    return [\n      leaves.take(index).push(left),\n      leaves.skip(index + 1).unshift(right),\n    ]\n  }\n\n  /**\n   * Create a `Leaf` list from `attrs`.\n   *\n   * @param {Array<Leaf|Object>|List<Leaf|Object>} attrs\n   * @return {List<Leaf>}\n   */\n\n  static createList(attrs = []) {\n    if (List.isList(attrs) || Array.isArray(attrs)) {\n      const list = new List(attrs.map(Leaf.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Leaf.createList\\` only accepts arrays or lists, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Leaf` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Leaf}\n   */\n\n  static fromJSON(object) {\n    const { text = '', marks = [] } = object\n\n    const leaf = new Leaf({\n      text,\n      marks: Set(marks.map(Mark.fromJSON)),\n    })\n\n    return leaf\n  }\n\n  /**\n   * Check if `any` is a list of leaves.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isLeafList(any) {\n    return List.isList(any) && any.every(item => Leaf.isLeaf(item))\n  }\n\n  /**\n   * Update a `mark` at leaf, replace with newMark\n   *\n   * @param {Mark} mark\n   * @param {Mark} newMark\n   * @returns {Leaf}\n   */\n\n  updateMark(mark, newMark) {\n    const { marks } = this\n    if (newMark.equals(mark)) return this\n    if (!marks.has(mark)) return this\n    const newMarks = marks.withMutations(collection => {\n      collection.remove(mark).add(newMark)\n    })\n    return this.set('marks', newMarks)\n  }\n\n  /**\n   * Add a `mark` to the leaf.\n   *\n   * @param {Mark} mark\n   * @returns {Text}\n   */\n\n  addMark(mark) {\n    const { marks } = this\n    return this.set('marks', marks.add(mark))\n  }\n\n  /**\n   * Add a `set` of marks to the leaf.\n   *\n   * @param {Set<Mark>} set\n   * @returns {Text}\n   */\n\n  addMarks(set) {\n    const { marks } = this\n    return this.set('marks', marks.union(set))\n  }\n\n  /**\n   * Insert a text `string` into the leaf at `offset`.\n   *\n   * @param {Number} offset\n   * @param {String} string\n   * @return {Leaf}\n   */\n\n  insertText(offset, string) {\n    const { text } = this\n    const next = text.slice(0, offset) + string + text.slice(offset)\n    return this.set('text', next)\n  }\n\n  /**\n   * Remove a `mark` from the leaf.\n   *\n   * @param {Mark} mark\n   * @returns {Text}\n   */\n\n  removeMark(mark) {\n    const { marks } = this\n    return this.set('marks', marks.remove(mark))\n  }\n\n  /**\n   * Return a JSON representation of the leaf.\n   *\n   * @return {Object}\n   */\n\n  toJSON() {\n    const object = {\n      object: this.object,\n      text: this.text,\n      marks: this.marks.toArray().map(m => m.toJSON()),\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Leaf}\n */\n\nexport default Leaf\n","/* global WeakMap, Map, Symbol */\n\n/**\n * GLOBAL: True if memoization should is enabled.\n *\n * @type {Boolean}\n */\n\nlet ENABLED = true\n\n/**\n * The leaf node of a cache tree. Used to support variable argument length. A\n * unique object, so that native Maps will key it by reference.\n *\n * @type {Symbol}\n */\n\nconst LEAF = Symbol('LEAF')\n\n/**\n * The node of a cache tree for a WeakMap to store cache visited by objects\n *\n * @type {Symbol}\n */\n\nconst STORE_KEY = Symbol('STORE_KEY')\n\n/**\n * Values to represent a memoized undefined and null value. Allows efficient value\n * retrieval using Map.get only.\n *\n * @type {Symbol}\n */\n\nconst UNDEFINED = Symbol('undefined')\nconst NULL = Symbol('null')\n\n/**\n * Default value for unset keys in native Maps\n *\n * @type {Undefined}\n */\n\nconst UNSET = undefined\n\n/**\n * Global Store for all cached values\n *\n * @type {WeakMap}\n */\n\nlet memoizeStore = new WeakMap()\n\n/**\n * Memoize all of the `properties` on a `object`.\n *\n * @param {Object} object\n * @param {Array} properties\n * @return {Record}\n */\n\nfunction memoize(object, properties) {\n  for (const property of properties) {\n    const original = object[property]\n\n    if (!original) {\n      throw new Error(`Object does not have a property named \"${property}\".`)\n    }\n\n    object[property] = function(...args) {\n      // If memoization is disabled, call into the original method.\n      if (!ENABLED) return original.apply(this, args)\n\n      if (!memoizeStore.has(this)) {\n        memoizeStore.set(this, {\n          noArgs: {},\n          hasArgs: {},\n        })\n      }\n\n      const { noArgs, hasArgs } = memoizeStore.get(this)\n\n      const takesArguments = args.length !== 0\n\n      let cachedValue\n      let keys\n\n      if (takesArguments) {\n        keys = [property, ...args]\n        cachedValue = getIn(hasArgs, keys)\n      } else {\n        cachedValue = noArgs[property]\n      }\n\n      // If we've got a result already, return it.\n      if (cachedValue !== UNSET) {\n        return cachedValue === UNDEFINED ? undefined : cachedValue\n      }\n\n      // Otherwise calculate what it should be once and cache it.\n      const value = original.apply(this, args)\n      const v = value === undefined ? UNDEFINED : value\n\n      if (takesArguments) {\n        setIn(hasArgs, keys, v)\n      } else {\n        noArgs[property] = v\n      }\n\n      return value\n    }\n  }\n}\n\n/**\n * Get a value at a key path in a tree of Map.\n *\n * If not set, returns UNSET.\n * If the set value is undefined, returns UNDEFINED.\n *\n * @param {Map} map\n * @param {Array} keys\n * @return {Any|UNSET|UNDEFINED}\n */\n\nfunction getIn(map, keys) {\n  for (let key of keys) {\n    if (key === undefined) {\n      key = UNDEFINED\n    } else if (key == null) {\n      key = NULL\n    }\n\n    if (typeof key === 'object') {\n      map = map[STORE_KEY] && map[STORE_KEY].get(key)\n    } else {\n      map = map[key]\n    }\n\n    if (map === UNSET) return UNSET\n  }\n\n  return map[LEAF]\n}\n\n/**\n * Set a value at a key path in a tree of Map, creating Maps on the go.\n *\n * @param {Map} map\n * @param {Array} keys\n * @param {Any} value\n * @return {Map}\n */\n\nfunction setIn(map, keys, value) {\n  let child = map\n\n  for (let key of keys) {\n    if (key === undefined) {\n      key = UNDEFINED\n    } else if (key == null) {\n      key = NULL\n    }\n\n    if (typeof key !== 'object') {\n      if (!child[key]) {\n        child[key] = {}\n      }\n\n      child = child[key]\n      continue\n    }\n\n    if (!child[STORE_KEY]) {\n      child[STORE_KEY] = new WeakMap()\n    }\n\n    if (!child[STORE_KEY].has(key)) {\n      const newChild = {}\n      child[STORE_KEY].set(key, newChild)\n      child = newChild\n      continue\n    }\n\n    child = child[STORE_KEY].get(key)\n  }\n\n  // The whole path has been created, so set the value to the bottom most map.\n  child[LEAF] = value\n  return map\n}\n\n/**\n * In DEV mode, clears the previously memoized values, globally.\n *\n * @return {Void}\n */\n\nfunction resetMemoization() {\n  memoizeStore = new WeakMap()\n}\n\n/**\n * In DEV mode, enable or disable the use of memoize values, globally.\n *\n * @param {Boolean} enabled\n * @return {Void}\n */\n\nfunction useMemoization(enabled) {\n  ENABLED = enabled\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default memoize\nexport { resetMemoization, useMemoization }\n","import isPlainObject from 'is-plain-object'\nimport warning from 'tiny-warning'\nimport { List, OrderedSet, Record, Set } from 'immutable'\n\nimport Mark from './mark'\nimport Leaf from './leaf'\nimport KeyUtils from '../utils/key-utils'\nimport memoize from '../utils/memoize'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  leaves: undefined,\n  key: undefined,\n}\n\n/**\n * Text.\n *\n * @type {Text}\n */\n\nclass Text extends Record(DEFAULTS) {\n  /**\n   * Create a new `Text` with `attrs`.\n   *\n   * @param {Object|Array|List|String|Text} attrs\n   * @return {Text}\n   */\n\n  static create(attrs = '') {\n    if (Text.isText(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs === 'string') {\n      attrs = { leaves: [{ text: attrs }] }\n    }\n\n    if (isPlainObject(attrs)) {\n      if (attrs.text) {\n        const { text, marks, key } = attrs\n        attrs = { key, leaves: [{ text, marks }] }\n      }\n\n      return Text.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Text.create\\` only accepts objects, arrays, strings or texts, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Texts` from `elements`.\n   *\n   * @param {Array<Text|Object>|List<Text|Object>} elements\n   * @return {List<Text>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Text.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Text.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a `Text` from a JSON `object`.\n   *\n   * @param {Object|Text} object\n   * @return {Text}\n   */\n\n  static fromJSON(object) {\n    if (Text.isText(object)) {\n      return object\n    }\n\n    const { key = KeyUtils.create() } = object\n    let { leaves } = object\n\n    if (!leaves) {\n      if (object.ranges) {\n        warning(\n          false,\n          'As of slate@0.27.0, the `ranges` property of Slate objects has been renamed to `leaves`.'\n        )\n\n        leaves = object.ranges\n      } else {\n        leaves = List()\n      }\n    }\n\n    if (Array.isArray(leaves)) {\n      leaves = List(leaves.map(x => Leaf.create(x)))\n    } else if (List.isList(leaves)) {\n      leaves = leaves.map(x => Leaf.create(x))\n    } else {\n      throw new Error('leaves must be either Array or Immutable.List')\n    }\n\n    if (leaves.size === 0) {\n      leaves = leaves.push(Leaf.create())\n    }\n\n    const node = new Text({\n      leaves: Leaf.createLeaves(leaves),\n      key,\n    })\n\n    return node\n  }\n\n  /**\n   * Check if `any` is a list of texts.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isTextList(any) {\n    return List.isList(any) && any.every(item => Text.isText(item))\n  }\n\n  /**\n   * Find the 'first' leaf at offset; By 'first' the alorighthm prefers `endOffset === offset` than `startOffset === offset`\n   * Corner Cases:\n   *   1. if offset is negative, return the first leaf;\n   *   2. if offset is larger than text length, the leaf is null, startOffset, endOffset and index is of the last leaf\n   *\n   * @param {number}\n   * @returns {Object}\n   *   @property {number} startOffset\n   *   @property {number} endOffset\n   *   @property {number} index\n   *   @property {Leaf} leaf\n   */\n\n  searchLeafAtOffset(offset) {\n    let endOffset = 0\n    let startOffset = 0\n    let index = -1\n\n    const leaf = this.leaves.find(l => {\n      index++\n      startOffset = endOffset\n      endOffset = startOffset + l.text.length\n      return endOffset >= offset\n    })\n\n    return {\n      leaf,\n      endOffset,\n      index,\n      startOffset,\n    }\n  }\n\n  /**\n   * Add a `mark` at `index` and `length`.\n   *\n   * @param {Number} index\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Text}\n   */\n\n  addMark(index, length, mark) {\n    const marks = Set.of(mark)\n    return this.addMarks(index, length, marks)\n  }\n\n  /**\n   * Add a `set` of marks at `index` and `length`.\n   * Corner Cases:\n   *   1. If empty text, and if length === 0 and index === 0, will make sure the text contain an empty leaf with the given mark.\n   *\n   * @param {Number} index\n   * @param {Number} length\n   * @param {Set<Mark>} set\n   * @return {Text}\n   */\n\n  addMarks(index, length, set) {\n    if (this.text === '' && length === 0 && index === 0) {\n      const { leaves } = this\n      const first = leaves.first()\n\n      if (!first) {\n        return this.set(\n          'leaves',\n          List.of(Leaf.fromJSON({ text: '', marks: set }))\n        )\n      }\n\n      const newFirst = first.addMarks(set)\n      if (newFirst === first) return this\n      return this.set('leaves', List.of(newFirst))\n    }\n\n    if (this.text === '') return this\n    if (length === 0) return this\n    if (index >= this.text.length) return this\n\n    const [before, bundle] = Leaf.splitLeaves(this.leaves, index)\n    const [middle, after] = Leaf.splitLeaves(bundle, length)\n    const leaves = before.concat(middle.map(x => x.addMarks(set)), after)\n    return this.setLeaves(leaves)\n  }\n\n  /**\n   * Derive the leaves for a list of `decorations`.\n   *\n   * @param {List} decorations (optional)\n   * @return {List<Leaf>}\n   */\n\n  getLeaves(decorations) {\n    let { leaves } = this\n\n    // PERF: We can exit early without decorations.\n    if (!decorations || decorations.size === 0) return leaves\n\n    // HACK: We shouldn't need this, because text nodes should never be in a\n    // position of not having any leaves...\n    if (leaves.size === 0) {\n      const marks = decorations.map(d => d.mark)\n      const leaf = Leaf.create({ marks })\n      return List([leaf])\n    }\n\n    // HACK: this shouldn't be necessary, because the loop below should handle\n    // the `0` case without failures. It may already even, not sure.\n    if (this.text.length === 0) {\n      const marks = decorations.map(d => d.mark)\n      const leaf = Leaf.create({ marks })\n      return List([leaf])\n    }\n\n    const { key, text } = this\n\n    decorations.forEach(dec => {\n      const { start, end, mark } = dec\n      const hasStart = start.key === key\n      const hasEnd = end.key === key\n\n      if (hasStart && hasEnd) {\n        const index = hasStart ? start.offset : 0\n        const length = hasEnd ? end.offset - index : text.length - index\n\n        if (length < 1) return\n        if (index >= text.length) return\n\n        if (index !== 0 || length < text.length) {\n          const [before, bundle] = Leaf.splitLeaves(leaves, index)\n          const [middle, after] = Leaf.splitLeaves(bundle, length)\n          leaves = before.concat(middle.map(x => x.addMark(mark)), after)\n          return\n        }\n      }\n\n      leaves = leaves.map(x => x.addMark(mark))\n    })\n\n    if (leaves === this.leaves) return leaves\n    return Leaf.createLeaves(leaves)\n  }\n\n  /**\n   * Get all of the active marks on between two offsets\n   * Corner Cases:\n   *   1. if startOffset is equal or bigger than endOffset, then return Set();\n   *   2. If no text is selected between start and end, then return Set()\n   *\n   * @return {Set<Mark>}\n   */\n\n  getActiveMarksBetweenOffsets(startOffset, endOffset) {\n    if (startOffset <= 0 && endOffset >= this.text.length) {\n      return this.getActiveMarks()\n    }\n\n    if (startOffset >= endOffset) return Set()\n    // For empty text in a paragraph, use getActiveMarks;\n    if (this.text === '') return this.getActiveMarks()\n\n    let result = null\n    let leafEnd = 0\n\n    this.leaves.forEach(leaf => {\n      const leafStart = leafEnd\n      leafEnd = leafStart + leaf.text.length\n\n      if (leafEnd <= startOffset) return\n      if (leafStart >= endOffset) return false\n\n      if (!result) {\n        result = leaf.marks\n        return\n      }\n\n      result = result.intersect(leaf.marks)\n      if (result && result.size === 0) return false\n      return false\n    })\n\n    return result || Set()\n  }\n\n  /**\n   * Get all of the active marks on the text\n   *\n   * @return {Set<Mark>}\n   */\n\n  getActiveMarks() {\n    if (this.leaves.size === 0) return Set()\n\n    const result = this.leaves.first().marks\n    if (result.size === 0) return result\n\n    return result.toOrderedSet().withMutations(x => {\n      this.leaves.forEach(c => {\n        x.intersect(c.marks)\n        if (x.size === 0) return false\n      })\n    })\n  }\n\n  /**\n   * Get all of the marks on between two offsets\n   * Corner Cases:\n   *   1. if startOffset is equal or bigger than endOffset, then return Set();\n   *   2. If no text is selected between start and end, then return Set()\n   *\n   * @return {OrderedSet<Mark>}\n   */\n\n  getMarksBetweenOffsets(startOffset, endOffset) {\n    if (startOffset <= 0 && endOffset >= this.text.length) {\n      return this.getMarks()\n    }\n\n    if (startOffset >= endOffset) return Set()\n    // For empty text in a paragraph, use getActiveMarks;\n    if (this.text === '') return this.getActiveMarks()\n\n    let result = null\n    let leafEnd = 0\n\n    this.leaves.forEach(leaf => {\n      const leafStart = leafEnd\n      leafEnd = leafStart + leaf.text.length\n\n      if (leafEnd <= startOffset) return\n      if (leafStart >= endOffset) return false\n\n      if (!result) {\n        result = leaf.marks\n        return\n      }\n\n      result = result.union(leaf.marks)\n    })\n\n    return result || Set()\n  }\n\n  /**\n   * Get all of the marks on the text.\n   *\n   * @return {OrderedSet<Mark>}\n   */\n\n  getMarks() {\n    const array = this.getMarksAsArray()\n    return new OrderedSet(array)\n  }\n\n  /**\n   * Get all of the marks on the text as an array\n   *\n   * @return {Array}\n   */\n\n  getMarksAsArray() {\n    if (this.leaves.size === 0) return []\n    const first = this.leaves.first().marks\n    if (this.leaves.size === 1) return first.toArray()\n\n    const result = []\n\n    this.leaves.forEach(leaf => {\n      result.push(leaf.marks.toArray())\n    })\n\n    return Array.prototype.concat.apply(first.toArray(), result)\n  }\n\n  /**\n   * Get the marks on the text at `index`.\n   * Corner Cases:\n   *   1. if no text is before the index, and index !== 0, then return Set()\n   *   2. (for insert after split node or mark at range) if index === 0, and text === '', then return the leaf.marks\n   *   3. if index === 0, text !== '', return Set()\n   *\n   *\n   * @param {Number} index\n   * @return {Set<Mark>}\n   */\n\n  getMarksAtIndex(index) {\n    const { leaf } = this.searchLeafAtOffset(index)\n    if (!leaf) return Set()\n    return leaf.marks\n  }\n\n  /**\n   * Insert `text` at `index`.\n   *\n   * @param {Numbder} offset\n   * @param {String} text\n   * @param {Set} marks (optional)\n   * @return {Text}\n   */\n\n  insertText(offset, text, marks) {\n    if (this.text === '') {\n      return this.set('leaves', List.of(Leaf.create({ text, marks })))\n    }\n\n    if (text.length === 0) return this\n    if (!marks) marks = Set()\n\n    const { startOffset, leaf, index } = this.searchLeafAtOffset(offset)\n    const delta = offset - startOffset\n    const beforeText = leaf.text.slice(0, delta)\n    const afterText = leaf.text.slice(delta)\n    const { leaves } = this\n\n    if (leaf.marks.equals(marks)) {\n      return this.set(\n        'leaves',\n        leaves.set(index, leaf.set('text', beforeText + text + afterText))\n      )\n    }\n\n    const nextLeaves = leaves.splice(\n      index,\n      1,\n      leaf.set('text', beforeText),\n      Leaf.create({ text, marks }),\n      leaf.set('text', afterText)\n    )\n\n    return this.setLeaves(nextLeaves)\n  }\n\n  /**\n   * Remove a `mark` at `index` and `length`.\n   *\n   * @param {Number} index\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Text}\n   */\n\n  removeMark(index, length, mark) {\n    if (this.text === '' && index === 0 && length === 0) {\n      const first = this.leaves.first()\n      if (!first) return this\n      const newFirst = first.removeMark(mark)\n      if (newFirst === first) return this\n      return this.set('leaves', List.of(newFirst))\n    }\n\n    if (length <= 0) return this\n    if (index >= this.text.length) return this\n    const [before, bundle] = Leaf.splitLeaves(this.leaves, index)\n    const [middle, after] = Leaf.splitLeaves(bundle, length)\n    const leaves = before.concat(middle.map(x => x.removeMark(mark)), after)\n    return this.setLeaves(leaves)\n  }\n\n  /**\n   * Remove text from the text node at `start` for `length`.\n   *\n   * @param {Number} start\n   * @param {Number} length\n   * @return {Text}\n   */\n\n  removeText(start, length) {\n    if (length <= 0) return this\n    if (start >= this.text.length) return this\n\n    // PERF: For simple backspace, we can operate directly on the leaf\n    if (length === 1) {\n      const { leaf, index, startOffset } = this.searchLeafAtOffset(start + 1)\n      const offset = start - startOffset\n\n      if (leaf) {\n        if (leaf.text.length === 1) {\n          const leaves = this.leaves.remove(index)\n          return this.setLeaves(leaves)\n        }\n\n        const beforeText = leaf.text.slice(0, offset)\n        const afterText = leaf.text.slice(offset + length)\n        const text = beforeText + afterText\n\n        if (text.length > 0) {\n          return this.set(\n            'leaves',\n            this.leaves.set(index, leaf.set('text', text))\n          )\n        }\n      }\n    }\n\n    const [before, bundle] = Leaf.splitLeaves(this.leaves, start)\n    const after = Leaf.splitLeaves(bundle, length)[1]\n    const leaves = Leaf.createLeaves(before.concat(after))\n\n    if (leaves.size === 1) {\n      const first = leaves.first()\n\n      if (first.text === '') {\n        return this.set(\n          'leaves',\n          List.of(first.set('marks', this.getActiveMarks()))\n        )\n      }\n    }\n\n    return this.set('leaves', leaves)\n  }\n\n  /**\n   * Return a JSON representation of the text.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      leaves: this.getLeaves()\n        .toArray()\n        .map(r => r.toJSON()),\n    }\n\n    if (options.preserveKeys) {\n      object.key = this.key\n    }\n\n    return object\n  }\n\n  /**\n   * Update a `mark` at `index` and `length` with `properties`.\n   *\n   * @param {Number} index\n   * @param {Number} length\n   * @param {Object} properties\n   * @param {Object} newProperties\n   * @return {Text}\n   */\n\n  updateMark(index, length, properties, newProperties) {\n    const mark = Mark.create(properties)\n    const newMark = mark.merge(newProperties)\n\n    if (this.text === '' && length === 0 && index === 0) {\n      const { leaves } = this\n      const first = leaves.first()\n      if (!first) return this\n      const newFirst = first.updateMark(mark, newMark)\n      if (newFirst === first) return this\n      return this.set('leaves', List.of(newFirst))\n    }\n\n    if (length <= 0) return this\n    if (index >= this.text.length) return this\n\n    const [before, bundle] = Leaf.splitLeaves(this.leaves, index)\n    const [middle, after] = Leaf.splitLeaves(bundle, length)\n\n    const leaves = before.concat(\n      middle.map(x => x.updateMark(mark, newMark)),\n      after\n    )\n\n    return this.setLeaves(leaves)\n  }\n\n  /**\n   * Split this text and return two different texts\n   * @param {Number} position\n   * @returns {Array<Text>}\n   */\n\n  splitText(offset) {\n    const splitted = Leaf.splitLeaves(this.leaves, offset)\n    const one = this.set('leaves', splitted[0])\n    const two = this.set('leaves', splitted[1]).regenerateKey()\n    return [one, two]\n  }\n\n  /**\n   * merge this text and another text at the end\n   * @param {Text} text\n   * @returns {Text}\n   */\n\n  mergeText(text) {\n    const leaves = this.leaves.concat(text.leaves)\n    return this.setLeaves(leaves)\n  }\n\n  /**\n   * Set leaves with normalized `leaves`\n   *\n   * @param {List} leaves\n   * @returns {Text}\n   */\n\n  setLeaves(leaves) {\n    leaves = Leaf.createLeaves(leaves)\n\n    if (leaves.size === 1) {\n      const first = leaves.first()\n\n      if (!first.marks || first.marks.size === 0) {\n        if (first.text === '') {\n          return this.set('leaves', List([Leaf.create()]))\n        }\n      }\n    }\n\n    if (leaves.size === 0) {\n      leaves = leaves.push(Leaf.create())\n    }\n\n    return this.set('leaves', leaves)\n  }\n}\n\n/**\n * Memoize read methods.\n */\n\nmemoize(Text.prototype, ['getActiveMarks', 'getMarks', 'getMarksAsArray'])\n\n/**\n * Export.\n *\n * @type {Text}\n */\n\nexport default Text\n","import isPlainObject from 'is-plain-object'\nimport warning from 'tiny-warning'\nimport { List } from 'immutable'\n\nimport Block from './block'\nimport Data from './data'\nimport Document from './document'\nimport Inline from './inline'\nimport Text from './text'\n\n/**\n * A pseudo-model that is used for its static methods only.\n *\n * @type {Node}\n */\n\nclass Node {\n  /**\n   * Create a new `Node` with `attrs`.\n   *\n   * @param {Object|Node} attrs\n   * @return {Node}\n   */\n\n  static create(attrs = {}) {\n    if (Node.isNode(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      let { object } = attrs\n\n      if (!object && attrs.kind) {\n        warning(\n          false,\n          'As of slate@0.32.0, the `kind` property of Slate objects has been renamed to `object`.'\n        )\n\n        object = attrs.kind\n      }\n\n      switch (object) {\n        case 'block':\n          return Block.create(attrs)\n        case 'document':\n          return Document.create(attrs)\n        case 'inline':\n          return Inline.create(attrs)\n        case 'text':\n          return Text.create(attrs)\n\n        default: {\n          throw new Error('`Node.create` requires a `object` string.')\n        }\n      }\n    }\n\n    throw new Error(\n      `\\`Node.create\\` only accepts objects or nodes but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Nodes` from an array.\n   *\n   * @param {Array<Object|Node>} elements\n   * @return {List<Node>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = List(elements.map(Node.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Node.createList\\` only accepts lists or arrays, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable node properties from `attrs`.\n   *\n   * @param {Object|String|Node} attrs\n   * @return {Object}\n   */\n\n  static createProperties(attrs = {}) {\n    if (Block.isBlock(attrs) || Inline.isInline(attrs)) {\n      return {\n        data: attrs.data,\n        type: attrs.type,\n      }\n    }\n\n    if (typeof attrs === 'string') {\n      return { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      const props = {}\n      if ('type' in attrs) props.type = attrs.type\n      if ('data' in attrs) props.data = Data.create(attrs.data)\n      return props\n    }\n\n    throw new Error(\n      `\\`Node.createProperties\\` only accepts objects, strings, blocks or inlines, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Node` from a JSON `value`.\n   *\n   * @param {Object} value\n   * @return {Node}\n   */\n\n  static fromJSON(value) {\n    let { object } = value\n\n    if (!object && value.kind) {\n      warning(\n        false,\n        'As of slate@0.32.0, the `kind` property of Slate objects has been renamed to `object`.'\n      )\n\n      object = value.kind\n    }\n\n    switch (object) {\n      case 'block':\n        return Block.fromJSON(value)\n      case 'document':\n        return Document.fromJSON(value)\n      case 'inline':\n        return Inline.fromJSON(value)\n      case 'text':\n        return Text.fromJSON(value)\n\n      default: {\n        throw new Error(\n          `\\`Node.fromJSON\\` requires an \\`object\\` of either 'block', 'document', 'inline' or 'text', but you passed: ${value}`\n        )\n      }\n    }\n  }\n\n  /**\n   * Check if `any` is a `Node`.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isNode(any) {\n    return (\n      Block.isBlock(any) ||\n      Document.isDocument(any) ||\n      Inline.isInline(any) ||\n      Text.isText(any)\n    )\n  }\n\n  /**\n   * Check if `any` is a list of nodes.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isNodeList(any) {\n    return List.isList(any) && any.every(item => Node.isNode(item))\n  }\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Node\n","import isPlainObject from 'is-plain-object'\nimport { List, Map, Record } from 'immutable'\n\nimport KeyUtils from '../utils/key-utils'\nimport Node from './node'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: undefined,\n  key: undefined,\n  nodes: undefined,\n  type: undefined,\n}\n\n/**\n * Block.\n *\n * @type {Block}\n */\n\nclass Block extends Record(DEFAULTS) {\n  /**\n   * Create a new `Block` from `attrs`.\n   *\n   * @param {Object|String|Block} attrs\n   * @return {Block}\n   */\n\n  static create(attrs = {}) {\n    if (Block.isBlock(attrs)) {\n      return attrs\n    }\n\n    if (typeof attrs === 'string') {\n      attrs = { type: attrs }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Block.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Block.create\\` only accepts objects, strings or blocks, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Blocks` from `attrs`.\n   *\n   * @param {Array<Block|Object>|List<Block|Object>} attrs\n   * @return {List<Block>}\n   */\n\n  static createList(attrs = []) {\n    if (List.isList(attrs) || Array.isArray(attrs)) {\n      const list = new List(attrs.map(Block.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Block.createList\\` only accepts arrays or lists, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Block` from a JSON `object`.\n   *\n   * @param {Object|Block} object\n   * @return {Block}\n   */\n\n  static fromJSON(object) {\n    if (Block.isBlock(object)) {\n      return object\n    }\n\n    const { data = {}, key = KeyUtils.create(), nodes = [], type } = object\n\n    if (typeof type !== 'string') {\n      throw new Error('`Block.fromJSON` requires a `type` string.')\n    }\n\n    const block = new Block({\n      key,\n      type,\n      data: Map(data),\n      nodes: Node.createList(nodes),\n    })\n\n    return block\n  }\n\n  /**\n   * Check if `any` is a block list.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isBlockList(any) {\n    return List.isList(any) && any.every(item => Block.isBlock(item))\n  }\n\n  /**\n   * Return a JSON representation of the block.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      type: this.type,\n      data: this.data.toJSON(),\n      nodes: this.nodes.toArray().map(n => n.toJSON(options)),\n    }\n\n    if (options.preserveKeys) {\n      object.key = this.key\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Block}\n */\n\nexport default Block\n","import { List } from 'immutable'\n\n/**\n * Compare paths `path` and `target` to see which is before or after.\n *\n * @param {List} path\n * @param {List} target\n * @return {Number|Null}\n */\n\nfunction compare(path, target) {\n  const m = min(path, target)\n\n  for (let i = 0; i < m; i++) {\n    const pv = path.get(i)\n    const tv = target.get(i)\n\n    // If the path's value is ever less than the target's, it's before.\n    if (pv < tv) return -1\n\n    // If the target's value is ever less than the path's, it's after.\n    if (pv > tv) return 1\n  }\n\n  // Paths should now be equal, otherwise something is wrong\n  return path.size === target.size ? 0 : null\n}\n\n/**\n * Create a path from `attrs`.\n *\n * @param {Array|List} attrs\n * @return {List}\n */\n\nfunction create(attrs) {\n  if (attrs == null) {\n    return null\n  }\n\n  if (List.isList(attrs)) {\n    return attrs\n  }\n\n  if (Array.isArray(attrs)) {\n    return List(attrs)\n  }\n\n  throw new Error(\n    `Paths can only be created from arrays or lists, but you passed: ${attrs}`\n  )\n}\n\n/**\n * Crop paths `a` and `b` to an equal size, defaulting to the shortest.\n *\n * @param {List} a\n * @param {List} b\n */\n\nfunction crop(a, b, size = min(a, b)) {\n  const ca = a.slice(0, size)\n  const cb = b.slice(0, size)\n  return [ca, cb]\n}\n\n/**\n * Decrement a `path` by `n` at `index`, defaulting to the last index.\n *\n * @param {List} path\n * @param {Number} n\n * @param {Number} index\n */\n\nfunction decrement(path, n = 1, index = path.size - 1) {\n  return increment(path, 0 - n, index)\n}\n\n/**\n * Get all ancestor paths of th given path.\n *\n * @param {List} path\n * @returns {List}\n */\n\nfunction getAncestors(path) {\n  const ancestors = List().withMutations(list => {\n    for (let i = 0; i < path.size; i++) {\n      list.push(path.slice(0, i))\n    }\n  })\n\n  return ancestors\n}\n\n/**\n * Increment a `path` by `n` at `index`, defaulting to the last index.\n *\n * @param {List} path\n * @param {Number} n\n * @param {Number} index\n */\n\nfunction increment(path, n = 1, index = path.size - 1) {\n  const value = path.get(index)\n  const newValue = value + n\n  const newPath = path.set(index, newValue)\n  return newPath\n}\n\n/**\n * Is a `path` above another `target` path?\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isAbove(path, target) {\n  const [p, t] = crop(path, target)\n  return path.size < target.size && compare(p, t) === 0\n}\n\n/**\n * Is a `path` after another `target` path in a document?\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isAfter(path, target) {\n  const [p, t] = crop(path, target)\n  return compare(p, t) === 1\n}\n\n/**\n * Is a `path` before another `target` path in a document?\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isBefore(path, target) {\n  const [p, t] = crop(path, target)\n  return compare(p, t) === -1\n}\n\n/**\n * Is a `path` equal to another `target` path in a document?\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isEqual(path, target) {\n  return path.equals(target)\n}\n\n/**\n * Is a `path` older than a `target` path? Meaning that it ends as an older\n * sibling of one of the indexes in the target.\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isOlder(path, target) {\n  const index = path.size - 1\n  const [p, t] = crop(path, target, index)\n  const pl = path.get(index)\n  const tl = target.get(index)\n  return isEqual(p, t) && pl > tl\n}\n\n/**\n * Is a `path` a sibling of a `target` path?\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isSibling(path, target) {\n  if (path.size !== target.size) return false\n  const p = path.butLast()\n  const t = target.butLast()\n  return p.equals(t)\n}\n\n/**\n * Is a `path` younger than a `target` path? Meaning that it ends as a younger\n * sibling of one of the indexes in the target.\n *\n * @param {List} path\n * @param {List} target\n * @return {Boolean}\n */\n\nfunction isYounger(path, target) {\n  const index = path.size - 1\n  const [p, t] = crop(path, target, index)\n  const pl = path.get(index)\n  const tl = target.get(index)\n  return isEqual(p, t) && pl < tl\n}\n\n/**\n * Lift a `path` to refer to its parent.\n *\n * @param {List} path\n * @return {List}\n */\n\nfunction lift(path) {\n  const parent = path.slice(0, -1)\n  return parent\n}\n\n/**\n * Drop a `path`, returning the path from the first child.\n *\n * @param {List} path\n * @return {List}\n */\n\nfunction drop(path) {\n  const relative = path.slice(1)\n  return relative\n}\n\n/**\n * Get the maximum length of paths `a` and `b`.\n *\n * @param {List} path\n * @param {List} path\n * @return {Number}\n */\n\nfunction max(a, b) {\n  const n = Math.max(a.size, b.size)\n  return n\n}\n\n/**\n * Get the minimum length of paths `a` and `b`.\n *\n * @param {List} path\n * @param {List} path\n * @return {Number}\n */\n\nfunction min(a, b) {\n  const n = Math.min(a.size, b.size)\n  return n\n}\n\n/**\n * Get the common ancestor path of path `a` and path `b`.\n *\n * @param {List} a\n * @param {List} b\n * @return {List}\n */\n\nfunction relate(a, b) {\n  const array = []\n\n  for (let i = 0; i < a.size && i < b.size; i++) {\n    const av = a.get(i)\n    const bv = b.get(i)\n\n    // If the values aren't equal, they've diverged and don't share an ancestor.\n    if (av !== bv) break\n\n    // Otherwise, the current value is still a common ancestor.\n    array.push(av)\n  }\n\n  const path = create(array)\n  return path\n}\n\n/**\n * Transform a `path` by an `operation`, adjusting it to stay current.\n *\n * @param {List} path\n * @param {Operation} operation\n * @return {List<List>}\n */\n\nfunction transform(path, operation) {\n  const { type, position, path: p } = operation\n\n  if (\n    type === 'add_mark' ||\n    type === 'insert_text' ||\n    type === 'remove_mark' ||\n    type === 'remove_text' ||\n    type === 'set_mark' ||\n    type === 'set_node' ||\n    type === 'set_selection' ||\n    type === 'set_value' ||\n    path.size === 0\n  ) {\n    return List([path])\n  }\n\n  const pIndex = p.size - 1\n  const pEqual = isEqual(p, path)\n  const pYounger = isYounger(p, path)\n  const pAbove = isAbove(p, path)\n\n  if (type === 'insert_node') {\n    if (pEqual || pYounger || pAbove) {\n      path = increment(path, 1, pIndex)\n    }\n  }\n\n  if (type === 'remove_node') {\n    if (pYounger) {\n      path = decrement(path, 1, pIndex)\n    } else if (pEqual || pAbove) {\n      path = []\n    }\n  }\n\n  if (type === 'merge_node') {\n    if (pEqual || pYounger) {\n      path = decrement(path, 1, pIndex)\n    } else if (pAbove) {\n      path = decrement(path, 1, pIndex)\n      path = increment(path, position, pIndex + 1)\n    }\n  }\n\n  if (type === 'split_node') {\n    if (pEqual) {\n      path = [path, increment(path)]\n    } else if (pYounger) {\n      path = increment(path, 1, pIndex)\n    } else if (pAbove) {\n      if (path.get(pIndex + 1) >= position) {\n        path = increment(path, 1, pIndex)\n        path = decrement(path, position, pIndex + 1)\n      }\n    }\n  }\n\n  if (type === 'move_node') {\n    const { newPath: np } = operation\n\n    if (isEqual(p, np)) {\n      return List([path])\n    }\n\n    if (pAbove || pEqual) {\n      // We are comparing something that was moved\n      // The new path is unaffected unless the old path was the left-sibling of an ancestor\n      if (isYounger(p, np) && p.size < np.size) {\n        path = decrement(np, 1, min(np, p) - 1).concat(path.slice(p.size))\n      } else {\n        path = np.concat(path.slice(p.size))\n      }\n    } else {\n      // This is equivalent logic to remove_node for path\n      if (pYounger) {\n        path = decrement(path, 1, pIndex)\n      }\n\n      // This is the equivalent logic to insert_node for newPath\n      if (isYounger(np, path) || isEqual(np, path) || isAbove(np, path)) {\n        path = increment(path, 1, np.size - 1)\n      }\n    }\n  }\n\n  const paths = Array.isArray(path) ? path : [path]\n  return List(paths)\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default {\n  compare,\n  create,\n  crop,\n  decrement,\n  getAncestors,\n  increment,\n  isAbove,\n  isAfter,\n  isBefore,\n  isEqual,\n  isOlder,\n  isSibling,\n  isYounger,\n  lift,\n  drop,\n  max,\n  min,\n  relate,\n  transform,\n}\n","import isPlainObject from 'is-plain-object'\nimport warning from 'tiny-warning'\nimport { Record } from 'immutable'\n\nimport KeyUtils from '../utils/key-utils'\nimport PathUtils from '../utils/path-utils'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  key: undefined,\n  offset: undefined,\n  path: undefined,\n}\n\n/**\n * Point.\n *\n * @type {Point}\n */\n\nclass Point extends Record(DEFAULTS) {\n  /**\n   * Create a new `Point` with `attrs`.\n   *\n   * @param {Object|Point} attrs\n   * @return {Point}\n   */\n\n  static create(attrs = {}) {\n    if (Point.isPoint(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Point.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Point.create\\` only accepts objects or points, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable point properties from `attrs`.\n   *\n   * @param {Object|Point} attrs\n   * @return {Object}\n   */\n\n  static createProperties(a = {}) {\n    if (Point.isPoint(a)) {\n      return {\n        key: a.key,\n        offset: a.offset,\n        path: a.path,\n      }\n    }\n\n    if (isPlainObject(a)) {\n      const p = {}\n      if ('key' in a) p.key = a.key\n      if ('offset' in a) p.offset = a.offset\n      if ('path' in a) p.path = PathUtils.create(a.path)\n\n      // If only a path is set, or only a key is set, ensure that the other is\n      // set to null so that it can be normalized back to the right value.\n      // Otherwise we won't realize that the path and key don't match anymore.\n      if ('path' in a && !('key' in a)) p.key = null\n      if ('key' in a && !('path' in a)) p.path = null\n\n      return p\n    }\n\n    throw new Error(\n      `\\`Point.createProperties\\` only accepts objects or points, but you passed it: ${a}`\n    )\n  }\n\n  /**\n   * Create a `Point` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Point}\n   */\n\n  static fromJSON(object) {\n    const { key = null, offset = null, path = null } = object\n\n    const point = new Point({\n      key,\n      offset,\n      path: PathUtils.create(path),\n    })\n\n    return point\n  }\n\n  /**\n   * Check whether all properties of the point are set.\n   *\n   * @return {Boolean}\n   */\n\n  get isSet() {\n    return this.key != null && this.offset != null && this.path != null\n  }\n\n  /**\n   * Check whether any property of the point is not set.\n   *\n   * @return {Boolean}\n   */\n\n  get isUnset() {\n    return !this.isSet\n  }\n\n  /**\n   * Check whether the point is after another `point`.\n   *\n   * @return {Boolean}\n   */\n\n  isAfterPoint(point) {\n    if (this.isUnset) return false\n    const is =\n      (this.key === point.key && this.offset > point.offset) ||\n      PathUtils.compare(this.path, point.path) === 1\n    return is\n  }\n\n  /**\n   * Check whether the point is after a `range`.\n   *\n   * @return {Boolean}\n   */\n\n  isAfterRange(range) {\n    if (this.isUnset) return false\n    const is = this.isAfterPoint(range.end)\n    return is\n  }\n\n  /**\n   * Check whether the point is at the end of a `range`.\n   *\n   * @return {Boolean}\n   */\n\n  isAtEndOfRange(range) {\n    if (this.isUnset) return false\n    const is = this.equals(range.end)\n    return is\n  }\n\n  /**\n   * Check whether the point is at the start of a `range`.\n   *\n   * @return {Boolean}\n   */\n\n  isAtStartOfRange(range) {\n    if (this.isUnset) return false\n    const is = this.equals(range.start)\n    return is\n  }\n\n  /**\n   * Check whether the point is before another `point`.\n   *\n   * @return {Boolean}\n   */\n\n  isBeforePoint(point) {\n    if (this.isUnset) return false\n    const is =\n      (this.key === point.key && this.offset < point.offset) ||\n      PathUtils.compare(this.path, point.path) === -1\n    return is\n  }\n\n  /**\n   * Check whether the point is before a `range`.\n   *\n   * @return {Boolean}\n   */\n\n  isBeforeRange(range) {\n    if (this.isUnset) return false\n    const is = this.isBeforePoint(range.start)\n    return is\n  }\n\n  /**\n   * Check whether the point is inside a `range`.\n   *\n   * @return {Boolean}\n   */\n\n  isInRange(range) {\n    if (this.isUnset) return false\n    const is =\n      this.equals(range.start) ||\n      this.equals(range.end) ||\n      (this.isAfterPoint(range.start) && this.isBeforePoint(range.end))\n    return is\n  }\n\n  /**\n   * Check whether the point is at the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  isAtEndOfNode(node) {\n    if (this.isUnset) return false\n    const last = node.getLastText()\n    const is = this.key === last.key && this.offset === last.text.length\n    return is\n  }\n\n  /**\n   * Check whether the point is at the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  isAtStartOfNode(node) {\n    if (this.isUnset) return false\n\n    // PERF: Do a check for a `0` offset first since it's quickest.\n    if (this.offset !== 0) return false\n\n    const first = node.getFirstText()\n    const is = this.key === first.key\n    return is\n  }\n\n  /**\n   * Check whether the point is in a `node`.\n   *\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  isInNode(node) {\n    if (this.isUnset) return false\n    if (node.object === 'text' && node.key === this.key) return true\n    if (node.hasNode(this.key)) return true\n    return false\n  }\n\n  /**\n   * Move the point's offset backward `n` characters.\n   *\n   * @param {Number} n (optional)\n   * @return {Point}\n   */\n\n  moveBackward(n = 1) {\n    if (n === 0) return this\n    if (n < 0) return this.moveForward(-n)\n    const point = this.setOffset(this.offset - n)\n    return point\n  }\n\n  /**\n   * Move the point's offset forward `n` characters.\n   *\n   * @param {Number} n (optional)\n   * @return {Point}\n   */\n\n  moveForward(n = 1) {\n    if (n === 0) return this\n    if (n < 0) return this.moveBackward(-n)\n    const point = this.setOffset(this.offset + n)\n    return point\n  }\n\n  /**\n   * Move the point's anchor point to a new `path` and `offset`.\n   *\n   * Optionally, the `path` can be a key string, or omitted entirely in which\n   * case it would be the offset number.\n   *\n   * @param {List|String|Number} path\n   * @param {Number} offset\n   * @return {Point}\n   */\n\n  moveTo(path, offset = 0) {\n    let key = this.key\n\n    if (typeof path === 'number') {\n      offset = path\n      path = this.path\n    } else if (typeof path === 'string') {\n      key = path\n      path = key === this.key ? this.path : null\n    } else {\n      key = path.equals(this.path) ? this.key : null\n    }\n\n    const point = this.merge({ key, path, offset })\n    return point\n  }\n\n  /**\n   * Move the point's anchor point to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Point}\n   */\n\n  moveToStartOfNode(node) {\n    const first = node.getFirstText()\n    const point = this.moveTo(first.key, 0)\n    return point\n  }\n\n  /**\n   * Move the point's anchor point to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Point}\n   */\n\n  moveToEndOfNode(node) {\n    const last = node.getLastText()\n    const point = this.moveTo(last.key, last.text.length)\n    return point\n  }\n\n  /**\n   * Normalize the point relative to a `node`, ensuring that its key and path\n   * reference a text node, or that it gets unset.\n   *\n   * @param {Node} node\n   * @return {Point}\n   */\n\n  normalize(node) {\n    // If both the key and path are null, there's no reference to a node, so\n    // make sure it is entirely unset.\n    if (this.key == null && this.path == null) {\n      return this.setOffset(null)\n    }\n\n    const { key, offset, path } = this\n\n    // PERF: this function gets called a lot.\n    // to avoid creating the key -> path lookup table, we attempt to look up by path first.\n    let target = path && node.getNode(path)\n\n    if (!target) {\n      target = node.getNode(key)\n\n      if (target) {\n        // There is a misalignment of path and key\n        const point = this.merge({\n          path: node.getPath(key),\n        })\n\n        return point\n      }\n    }\n\n    if (!target) {\n      warning(false, \"A point's `path` or `key` invalid and was reset!\")\n\n      const text = node.getFirstText()\n      if (!text) return Point.create()\n\n      const point = this.merge({\n        key: text.key,\n        offset: 0,\n        path: node.getPath(text.key),\n      })\n\n      return point\n    }\n\n    if (target.object !== 'text') {\n      warning(false, 'A point should not reference a non-text node!')\n\n      const text = target.getTextAtOffset(offset)\n      const before = target.getOffset(text.key)\n      const point = this.merge({\n        offset: offset - before,\n        key: text.key,\n        path: node.getPath(text.key),\n      })\n\n      return point\n    }\n\n    if (target && path && key && key !== target.key) {\n      warning(false, \"A point's `key` did not match its `path`!\")\n\n      // TODO: if we look up by path above and it differs by key, do we want to reset it to looking up by key?\n    }\n\n    const point = this.merge({\n      key: target.key,\n      path: path == null ? node.getPath(target.key) : path,\n      offset: offset == null ? 0 : Math.min(offset, target.text.length),\n    })\n\n    return point\n  }\n\n  /**\n   * Set the point's key to a new `key`.\n   *\n   * @param {String} key\n   * @return {Point}\n   */\n\n  setKey(key) {\n    if (key != null) {\n      key = KeyUtils.create(key)\n    }\n\n    const point = this.set('key', key)\n    return point\n  }\n\n  /**\n   * Set the point's offset to a new `offset`.\n   *\n   * @param {Number} offset\n   * @return {Point}\n   */\n\n  setOffset(offset) {\n    const point = this.set('offset', offset)\n    return point\n  }\n\n  /**\n   * Set the point's path to a new `path`.\n   *\n   * @param {List|Array} path\n   * @return {Point}\n   */\n\n  setPath(path) {\n    if (path != null) {\n      path = PathUtils.create(path)\n    }\n\n    const point = this.set('path', path)\n    return point\n  }\n\n  /**\n   * Return a JSON representation of the point.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      key: this.key,\n      offset: this.offset,\n      path: this.path && this.path.toArray(),\n    }\n\n    if (!options.preserveKeys) {\n      delete object.key\n    }\n\n    return object\n  }\n\n  /**\n   * Unset the point.\n   *\n   * @return {Point}\n   */\n\n  unset() {\n    return this.merge({\n      key: null,\n      offset: null,\n      path: null,\n    })\n  }\n}\n\n/**\n * Export.\n *\n * @type {Point}\n */\n\nexport default Point\n","import isPlainObject from 'is-plain-object'\nimport { List, Record } from 'immutable'\n\nimport Mark from './mark'\nimport Point from './point'\nimport Range from './range'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  anchor: undefined,\n  focus: undefined,\n  mark: undefined,\n}\n\n/**\n * Decoration.\n *\n * @type {Decoration}\n */\n\nclass Decoration extends Record(DEFAULTS) {\n  /**\n   * Create a new `Decoration` with `attrs`.\n   *\n   * @param {Object|Decoration} attrs\n   * @return {Decoration}\n   */\n\n  static create(attrs = {}) {\n    if (Decoration.isDecoration(attrs)) {\n      return attrs\n    }\n\n    if (Range.isRange(attrs)) {\n      return Decoration.fromJSON(Range.createProperties(attrs))\n    }\n\n    if (isPlainObject(attrs)) {\n      return Decoration.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Decoration.create\\` only accepts objects or decorations, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Ranges` from `elements`.\n   *\n   * @param {Array<Decoration|Object>|List<Decoration|Object>} elements\n   * @return {List<Decoration>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Decoration.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Decoration.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable decoration properties from `attrs`.\n   *\n   * @param {Object|String|Decoration} attrs\n   * @return {Object}\n   */\n\n  static createProperties(a = {}) {\n    if (Decoration.isDecoration(a)) {\n      return {\n        anchor: Point.createProperties(a.anchor),\n        focus: Point.createProperties(a.focus),\n        mark: Mark.create(a.mark),\n      }\n    }\n\n    if (isPlainObject(a)) {\n      const p = {}\n      if ('anchor' in a) p.anchor = Point.create(a.anchor)\n      if ('focus' in a) p.focus = Point.create(a.focus)\n      if ('mark' in a) p.mark = Mark.create(a.mark)\n      return p\n    }\n\n    throw new Error(\n      `\\`Decoration.createProperties\\` only accepts objects or decorations, but you passed it: ${a}`\n    )\n  }\n\n  /**\n   * Create a `Decoration` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Decoration}\n   */\n\n  static fromJSON(object) {\n    const { anchor, focus, mark } = object\n\n    if (!mark) {\n      throw new Error(\n        `Decorations must be created with a \\`mark\\`, but you passed: ${JSON.stringify(\n          object\n        )}`\n      )\n    }\n\n    const decoration = new Decoration({\n      anchor: Point.fromJSON(anchor || {}),\n      focus: Point.fromJSON(focus || {}),\n      mark: Mark.fromJSON(mark),\n    })\n\n    return decoration\n  }\n\n  /**\n   * Set new `properties` on the decoration.\n   *\n   * @param {Object|Range|Selection} properties\n   * @return {Range}\n   */\n\n  setProperties(properties) {\n    properties = Decoration.createProperties(properties)\n    const { anchor, focus, mark } = properties\n    const props = {}\n\n    if (anchor) {\n      props.anchor = Point.create(anchor)\n    }\n\n    if (focus) {\n      props.focus = Point.create(focus)\n    }\n\n    if (mark) {\n      props.mark = Mark.create(mark)\n    }\n\n    const decoration = this.merge(props)\n    return decoration\n  }\n\n  /**\n   * Return a JSON representation of the decoration.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      anchor: this.anchor.toJSON(options),\n      focus: this.focus.toJSON(options),\n      mark: this.mark.toJSON(options),\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Decoration}\n */\n\nexport default Decoration\n","/**\n * Slate-specific object types.\n *\n * @type {Object}\n */\n\nexport const TYPES = {\n  block: '@@__SLATE_BLOCK__@@',\n  change: '@@__SLATE_CHANGE__@@',\n  decoration: '@@__SLATE_DECORATION__@@',\n  document: '@@__SLATE_DOCUMENT__@@',\n  editor: '@@__SLATE_EDITOR__@@',\n  inline: '@@__SLATE_INLINE__@@',\n  mark: '@@__SLATE_MARK__@@',\n  operation: '@@__SLATE_OPERATION__@@',\n  point: '@@__SLATE_POINT__@@',\n  range: '@@__SLATE_RANGE__@@',\n  selection: '@@__SLATE_SELECTION__@@',\n  text: '@@__SLATE_TEXT__@@',\n  value: '@@__SLATE_VALUE__@@',\n}\n\n/**\n * Determine whether a `value` is of `type`.\n *\n * @param {string} type\n * @param {any} value\n * @return {boolean}\n */\n\nexport default function isObject(type, value) {\n  return !!(value && value[TYPES[type]])\n}\n","import isPlainObject from 'is-plain-object'\nimport { List, Record } from 'immutable'\n\nimport Decoration from './decoration'\nimport Point from './point'\nimport Selection from './selection'\nimport isObject from '../utils/is-object'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  anchor: undefined,\n  focus: undefined,\n}\n\n/**\n * Range.\n *\n * @type {Range}\n */\n\nclass Range extends Record(DEFAULTS) {\n  /**\n   * Create a new `Range` with `attrs`.\n   *\n   * @param {Object|Range} attrs\n   * @return {Range}\n   */\n\n  static create(attrs = {}) {\n    if (Range.isRange(attrs)) {\n      if (attrs.object === 'range') {\n        return attrs\n      } else {\n        return Range.fromJSON(Range.createProperties(attrs))\n      }\n    }\n\n    if (isPlainObject(attrs)) {\n      return Range.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Range.create\\` only accepts objects or ranges, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Ranges` from `elements`.\n   *\n   * @param {Array<Range|Object>|List<Range|Object>} elements\n   * @return {List<Range>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Range.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Range.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable range properties from `attrs`.\n   *\n   * @param {Object|String|Range} attrs\n   * @return {Object}\n   */\n\n  static createProperties(a = {}) {\n    if (Range.isRange(a)) {\n      return {\n        anchor: Point.createProperties(a.anchor),\n        focus: Point.createProperties(a.focus),\n      }\n    }\n\n    if (isPlainObject(a)) {\n      const p = {}\n      if ('anchor' in a) p.anchor = Point.create(a.anchor)\n      if ('focus' in a) p.focus = Point.create(a.focus)\n      return p\n    }\n\n    throw new Error(\n      `\\`Range.createProperties\\` only accepts objects, decorations, ranges or selections, but you passed it: ${a}`\n    )\n  }\n\n  /**\n   * Create a `Range` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Range}\n   */\n\n  static fromJSON(object) {\n    const { anchor, focus } = object\n    const range = new Range({\n      anchor: Point.fromJSON(anchor || {}),\n      focus: Point.fromJSON(focus || {}),\n    })\n\n    return range\n  }\n\n  /**\n   * Check if a `value` is a `Range`, or is range-like.\n   *\n   * @param {Any} value\n   * @return {Boolean}\n   */\n\n  static isRange(value) {\n    return (\n      isObject('range', value) ||\n      Decoration.isDecoration(value) ||\n      Selection.isSelection(value)\n    )\n  }\n\n  /**\n   * Return a JSON representation of the range.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      anchor: this.anchor.toJSON(options),\n      focus: this.focus.toJSON(options),\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Range}\n */\n\nexport default Range\n","import isPlainObject from 'is-plain-object'\nimport { Record, Set } from 'immutable'\n\nimport Mark from './mark'\nimport Point from './point'\nimport Range from './range'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  anchor: undefined,\n  focus: undefined,\n  isFocused: undefined,\n  marks: undefined,\n}\n\n/**\n * Selection.\n *\n * @type {Selection}\n */\n\nclass Selection extends Record(DEFAULTS) {\n  /**\n   * Create a new `Selection` with `attrs`.\n   *\n   * @param {Object|Selection} attrs\n   * @return {Selection}\n   */\n\n  static create(attrs = {}) {\n    if (Selection.isSelection(attrs)) {\n      return attrs\n    }\n\n    if (Range.isRange(attrs)) {\n      return Selection.fromJSON(Range.createProperties(attrs))\n    }\n\n    if (isPlainObject(attrs)) {\n      return Selection.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Selection.create\\` only accepts objects, ranges or selections, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable selection properties from `attrs`.\n   *\n   * @param {Object|String|Selection} attrs\n   * @return {Object}\n   */\n\n  static createProperties(a = {}) {\n    if (Selection.isSelection(a)) {\n      return {\n        anchor: Point.createProperties(a.anchor),\n        focus: Point.createProperties(a.focus),\n        isFocused: a.isFocused,\n        marks: a.marks,\n      }\n    }\n\n    if (Range.isRange(a)) {\n      return {\n        anchor: Point.createProperties(a.anchor),\n        focus: Point.createProperties(a.focus),\n      }\n    }\n\n    if (isPlainObject(a)) {\n      const p = {}\n      if ('anchor' in a) p.anchor = Point.create(a.anchor)\n      if ('focus' in a) p.focus = Point.create(a.focus)\n      if ('isFocused' in a) p.isFocused = a.isFocused\n      if ('marks' in a)\n        p.marks = a.marks == null ? null : Mark.createSet(a.marks)\n      return p\n    }\n\n    throw new Error(\n      `\\`Selection.createProperties\\` only accepts objects, ranges or selections, but you passed it: ${a}`\n    )\n  }\n\n  /**\n   * Create a `Selection` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Selection}\n   */\n\n  static fromJSON(object) {\n    const { anchor, focus, isFocused = false, marks = null } = object\n    const selection = new Selection({\n      anchor: Point.fromJSON(anchor || {}),\n      focus: Point.fromJSON(focus || {}),\n      isFocused,\n      marks: marks == null ? null : new Set(marks.map(Mark.fromJSON)),\n    })\n\n    return selection\n  }\n\n  /**\n   * Check whether the selection is blurred.\n   *\n   * @return {Boolean}\n   */\n\n  get isBlurred() {\n    return !this.isFocused\n  }\n\n  /**\n   * Set the `isFocused` property to a new `value`.\n   *\n   * @param {Boolean} value\n   * @return {Selection}\n   */\n\n  setIsFocused(value) {\n    const selection = this.set('isFocused', value)\n    return selection\n  }\n\n  /**\n   * Set the `marks` property to a new set of `marks`.\n   *\n   * @param {Set} marks\n   * @return {Selection}\n   */\n\n  setMarks(marks) {\n    const selection = this.set('marks', marks)\n    return selection\n  }\n\n  /**\n   * Set new `properties` on the selection.\n   *\n   * @param {Object|Range|Selection} properties\n   * @return {Range}\n   */\n\n  setProperties(properties) {\n    properties = Selection.createProperties(properties)\n    const { anchor, focus, ...props } = properties\n\n    if (anchor) {\n      props.anchor = Point.create(anchor)\n    }\n\n    if (focus) {\n      props.focus = Point.create(focus)\n    }\n\n    const selection = this.merge(props)\n    return selection\n  }\n\n  /**\n   * Return a JSON representation of the selection.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      anchor: this.anchor.toJSON(options),\n      focus: this.focus.toJSON(options),\n      isFocused: this.isFocused,\n      marks:\n        this.marks == null ? null : this.marks.toArray().map(m => m.toJSON()),\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Selection}\n */\n\nexport default Selection\n","import isPlainObject from 'is-plain-object'\nimport invariant from 'tiny-invariant'\nimport { Record, Set, List } from 'immutable'\n\nimport PathUtils from '../utils/path-utils'\nimport Data from './data'\nimport Decoration from './decoration'\nimport Document from './document'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  data: undefined,\n  decorations: undefined,\n  document: undefined,\n  selection: undefined,\n}\n\n/**\n * Value.\n *\n * @type {Value}\n */\n\nclass Value extends Record(DEFAULTS) {\n  /**\n   * Create a new `Value` with `attrs`.\n   *\n   * @param {Object|Value} attrs\n   * @param {Object} options\n   * @return {Value}\n   */\n\n  static create(attrs = {}, options = {}) {\n    if (Value.isValue(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Value.fromJSON(attrs, options)\n    }\n\n    throw new Error(\n      `\\`Value.create\\` only accepts objects or values, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a dictionary of settable value properties from `attrs`.\n   *\n   * @param {Object|Value} attrs\n   * @return {Object}\n   */\n\n  static createProperties(a = {}) {\n    if (Value.isValue(a)) {\n      return {\n        data: a.data,\n        decorations: a.decorations,\n      }\n    }\n\n    if (isPlainObject(a)) {\n      const p = {}\n      if ('data' in a) p.data = Data.create(a.data)\n      if ('decorations' in a)\n        p.decorations = Decoration.createList(a.decorations)\n      return p\n    }\n\n    throw new Error(\n      `\\`Value.createProperties\\` only accepts objects or values, but you passed it: ${a}`\n    )\n  }\n\n  /**\n   * Create a `Value` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @param {Object} options\n   *   @property {Boolean} normalize\n   *   @property {Array} plugins\n   * @return {Value}\n   */\n\n  static fromJSON(object, options = {}) {\n    let { data = {}, decorations = [], document = {}, selection = {} } = object\n    data = Data.fromJSON(data)\n    document = Document.fromJSON(document)\n    selection = document.createSelection(selection)\n    decorations = List(decorations.map(d => Decoration.fromJSON(d)))\n\n    if (selection.isUnset) {\n      const text = document.getFirstText()\n      if (text) selection = selection.moveToStartOfNode(text)\n      selection = document.createSelection(selection)\n    }\n\n    const value = new Value({\n      data,\n      decorations,\n      document,\n      selection,\n    })\n\n    return value\n  }\n\n  /**\n   * Get the current start text node's closest block parent.\n   *\n   * @return {Block}\n   */\n\n  get startBlock() {\n    return (\n      this.selection.start.key &&\n      this.document.getClosestBlock(this.selection.start.key)\n    )\n  }\n\n  /**\n   * Get the current end text node's closest block parent.\n   *\n   * @return {Block}\n   */\n\n  get endBlock() {\n    return (\n      this.selection.end.key &&\n      this.document.getClosestBlock(this.selection.end.key)\n    )\n  }\n\n  /**\n   * Get the current anchor text node's closest block parent.\n   *\n   * @return {Block}\n   */\n\n  get anchorBlock() {\n    return (\n      this.selection.anchor.key &&\n      this.document.getClosestBlock(this.selection.anchor.key)\n    )\n  }\n\n  /**\n   * Get the current focus text node's closest block parent.\n   *\n   * @return {Block}\n   */\n\n  get focusBlock() {\n    return (\n      this.selection.focus.key &&\n      this.document.getClosestBlock(this.selection.focus.key)\n    )\n  }\n\n  /**\n   * Get the current start text node's closest inline parent.\n   *\n   * @return {Inline}\n   */\n\n  get startInline() {\n    return (\n      this.selection.start.key &&\n      this.document.getClosestInline(this.selection.start.key)\n    )\n  }\n\n  /**\n   * Get the current end text node's closest inline parent.\n   *\n   * @return {Inline}\n   */\n\n  get endInline() {\n    return (\n      this.selection.end.key &&\n      this.document.getClosestInline(this.selection.end.key)\n    )\n  }\n\n  /**\n   * Get the current anchor text node's closest inline parent.\n   *\n   * @return {Inline}\n   */\n\n  get anchorInline() {\n    return (\n      this.selection.anchor.key &&\n      this.document.getClosestInline(this.selection.anchor.key)\n    )\n  }\n\n  /**\n   * Get the current focus text node's closest inline parent.\n   *\n   * @return {Inline}\n   */\n\n  get focusInline() {\n    return (\n      this.selection.focus.key &&\n      this.document.getClosestInline(this.selection.focus.key)\n    )\n  }\n\n  /**\n   * Get the current start text node.\n   *\n   * @return {Text}\n   */\n\n  get startText() {\n    return (\n      this.selection.start.key &&\n      this.document.getDescendant(this.selection.start.key)\n    )\n  }\n\n  /**\n   * Get the current end node.\n   *\n   * @return {Text}\n   */\n\n  get endText() {\n    return (\n      this.selection.end.key &&\n      this.document.getDescendant(this.selection.end.key)\n    )\n  }\n\n  /**\n   * Get the current anchor node.\n   *\n   * @return {Text}\n   */\n\n  get anchorText() {\n    return (\n      this.selection.anchor.key &&\n      this.document.getDescendant(this.selection.anchor.key)\n    )\n  }\n\n  /**\n   * Get the current focus node.\n   *\n   * @return {Text}\n   */\n\n  get focusText() {\n    return (\n      this.selection.focus.key &&\n      this.document.getDescendant(this.selection.focus.key)\n    )\n  }\n\n  /**\n   * Get the next block node.\n   *\n   * @return {Block}\n   */\n\n  get nextBlock() {\n    return (\n      this.selection.end.key &&\n      this.document.getNextBlock(this.selection.end.key)\n    )\n  }\n\n  /**\n   * Get the previous block node.\n   *\n   * @return {Block}\n   */\n\n  get previousBlock() {\n    return (\n      this.selection.start.key &&\n      this.document.getPreviousBlock(this.selection.start.key)\n    )\n  }\n\n  /**\n   * Get the next inline node.\n   *\n   * @return {Inline}\n   */\n\n  get nextInline() {\n    return (\n      this.selection.end.key &&\n      this.document.getNextInline(this.selection.end.key)\n    )\n  }\n\n  /**\n   * Get the previous inline node.\n   *\n   * @return {Inline}\n   */\n\n  get previousInline() {\n    return (\n      this.selection.start.key &&\n      this.document.getPreviousInline(this.selection.start.key)\n    )\n  }\n\n  /**\n   * Get the next text node.\n   *\n   * @return {Text}\n   */\n\n  get nextText() {\n    return (\n      this.selection.end.key &&\n      this.document.getNextText(this.selection.end.key)\n    )\n  }\n\n  /**\n   * Get the previous text node.\n   *\n   * @return {Text}\n   */\n\n  get previousText() {\n    return (\n      this.selection.start.key &&\n      this.document.getPreviousText(this.selection.start.key)\n    )\n  }\n\n  /**\n   * Get the marks of the current selection.\n   *\n   * @return {Set<Mark>}\n   */\n\n  get marks() {\n    return this.selection.isUnset\n      ? new Set()\n      : this.selection.marks || this.document.getMarksAtRange(this.selection)\n  }\n\n  /**\n   * Get the active marks of the current selection.\n   *\n   * @return {Set<Mark>}\n   */\n\n  get activeMarks() {\n    return this.selection.isUnset\n      ? new Set()\n      : this.selection.marks ||\n          this.document.getActiveMarksAtRange(this.selection)\n  }\n\n  /**\n   * Get the block nodes in the current selection.\n   *\n   * @return {List<Block>}\n   */\n\n  get blocks() {\n    return this.selection.isUnset\n      ? new List()\n      : this.document.getLeafBlocksAtRange(this.selection)\n  }\n\n  /**\n   * Get the fragment of the current selection.\n   *\n   * @return {Document}\n   */\n\n  get fragment() {\n    return this.selection.isUnset\n      ? Document.create()\n      : this.document.getFragmentAtRange(this.selection)\n  }\n\n  /**\n   * Get the bottom-most inline nodes in the current selection.\n   *\n   * @return {List<Inline>}\n   */\n\n  get inlines() {\n    return this.selection.isUnset\n      ? new List()\n      : this.document.getLeafInlinesAtRange(this.selection)\n  }\n\n  /**\n   * Get the text nodes in the current selection.\n   *\n   * @return {List<Text>}\n   */\n\n  get texts() {\n    return this.selection.isUnset\n      ? new List()\n      : this.document.getTextsAtRange(this.selection)\n  }\n\n  /**\n   * Add mark to text at `offset` and `length` in node by `path`.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Value}\n   */\n\n  addMark(path, offset, length, mark) {\n    let value = this\n    let { document } = value\n    document = document.addMark(path, offset, length, mark)\n    value = this.set('document', document)\n    return value\n  }\n\n  /**\n   * Insert a `node`.\n   *\n   * @param {List|String} path\n   * @param {Node} node\n   * @return {Value}\n   */\n\n  insertNode(path, node) {\n    let value = this\n    let { document } = value\n    document = document.insertNode(path, node)\n    value = value.set('document', document)\n\n    value = value.mapRanges(range =>\n      range.updatePoints(point => point.setPath(null))\n    )\n\n    return value\n  }\n\n  /**\n   * Insert `text` at `offset` in node by `path`.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {String} text\n   * @param {Set} marks\n   * @return {Value}\n   */\n\n  insertText(path, offset, text, marks) {\n    let value = this\n    let { document } = value\n    const node = document.assertNode(path)\n    document = document.insertText(path, offset, text, marks)\n    value = value.set('document', document)\n\n    value = value.mapRanges(range => {\n      return range.updatePoints(point => {\n        return point.key === node.key && point.offset >= offset\n          ? point.setOffset(point.offset + text.length)\n          : point\n      })\n    })\n\n    return value\n  }\n\n  /**\n   * Merge a node backwards its previous sibling.\n   *\n   * @param {List|Key} path\n   * @return {Value}\n   */\n\n  mergeNode(path) {\n    let value = this\n    const { document } = value\n    const newDocument = document.mergeNode(path)\n    path = document.resolvePath(path)\n    const withPath = PathUtils.decrement(path)\n    const one = document.getNode(withPath)\n    const two = document.getNode(path)\n    value = value.set('document', newDocument)\n\n    value = value.mapRanges(range => {\n      if (two.object === 'text') {\n        const max = one.text.length\n\n        if (range.anchor.key === two.key) {\n          range = range.moveAnchorTo(one.key, max + range.anchor.offset)\n        }\n\n        if (range.focus.key === two.key) {\n          range = range.moveFocusTo(one.key, max + range.focus.offset)\n        }\n      }\n\n      range = range.updatePoints(point => point.setPath(null))\n\n      return range\n    })\n\n    return value\n  }\n\n  /**\n   * Move a node by `path` to `newPath`.\n   *\n   * A `newIndex` can be provided when move nodes by `key`, to account for not\n   * being able to have a key for a location in the tree that doesn't exist yet.\n   *\n   * @param {List|Key} path\n   * @param {List|Key} newPath\n   * @param {Number} newIndex\n   * @return {Value}\n   */\n\n  moveNode(path, newPath, newIndex = 0) {\n    let value = this\n    let { document } = value\n    document = document.moveNode(path, newPath, newIndex)\n    value = value.set('document', document)\n\n    value = value.mapRanges(range =>\n      range.updatePoints(point => point.setPath(null))\n    )\n\n    return value\n  }\n\n  /**\n   * Remove mark from text at `offset` and `length` in node.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Value}\n   */\n\n  removeMark(path, offset, length, mark) {\n    let value = this\n    let { document } = value\n    document = document.removeMark(path, offset, length, mark)\n    value = this.set('document', document)\n    return value\n  }\n\n  /**\n   * Remove a node by `path`.\n   *\n   * @param {List|String} path\n   * @return {Value}\n   */\n\n  removeNode(path) {\n    let value = this\n    let { document } = value\n    const node = document.assertNode(path)\n    const first = node.object === 'text' ? node : node.getFirstText() || node\n    const last = node.object === 'text' ? node : node.getLastText() || node\n    const prev = document.getPreviousText(first.key)\n    const next = document.getNextText(last.key)\n\n    document = document.removeNode(path)\n    value = value.set('document', document)\n\n    value = value.mapRanges(range => {\n      const { start, end } = range\n\n      if (node.hasNode(start.key)) {\n        range = prev\n          ? range.moveStartTo(prev.key, prev.text.length)\n          : next ? range.moveStartTo(next.key, 0) : range.unset()\n      }\n\n      if (node.hasNode(end.key)) {\n        range = prev\n          ? range.moveEndTo(prev.key, prev.text.length)\n          : next ? range.moveEndTo(next.key, 0) : range.unset()\n      }\n\n      range = range.updatePoints(point => point.setPath(null))\n\n      return range\n    })\n\n    return value\n  }\n\n  /**\n   * Remove `text` at `offset` in node by `path`.\n   *\n   * @param {List|Key} path\n   * @param {Number} offset\n   * @param {String} text\n   * @return {Value}\n   */\n\n  removeText(path, offset, text) {\n    let value = this\n    let { document } = value\n    const node = document.assertNode(path)\n    document = document.removeText(path, offset, text)\n    value = value.set('document', document)\n\n    const { length } = text\n    const start = offset\n    const end = offset + length\n\n    value = value.mapRanges(range => {\n      return range.updatePoints(point => {\n        if (point.key !== node.key) {\n          return point\n        }\n\n        if (point.offset >= end) {\n          return point.setOffset(point.offset - length)\n        }\n\n        if (point.offset > start) {\n          return point.setOffset(start)\n        }\n\n        return point\n      })\n    })\n\n    return value\n  }\n\n  /**\n   * Set `properties` on a node.\n   *\n   * @param {List|String} path\n   * @param {Object} properties\n   * @return {Value}\n   */\n\n  setNode(path, properties) {\n    let value = this\n    let { document } = value\n    document = document.setNode(path, properties)\n    value = value.set('document', document)\n    return value\n  }\n\n  /**\n   * Set `properties` on `mark` on text at `offset` and `length` in node.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {Number} length\n   * @param {Mark} mark\n   * @param {Object} properties\n   * @return {Value}\n   */\n\n  setMark(path, offset, length, mark, properties) {\n    let value = this\n    let { document } = value\n    document = document.setMark(path, offset, length, mark, properties)\n    value = value.set('document', document)\n    return value\n  }\n\n  /**\n   * Set `properties` on the value.\n   *\n   * @param {Object} properties\n   * @return {Value}\n   */\n\n  setProperties(properties) {\n    let value = this\n    const { document } = value\n    const { data, decorations } = properties\n    const props = {}\n\n    if (data) {\n      props.data = data\n    }\n\n    if (decorations) {\n      props.decorations = decorations.map(d => {\n        return d.isSet ? d : document.resolveDecoration(d)\n      })\n    }\n\n    value = value.merge(props)\n    return value\n  }\n\n  /**\n   * Set `properties` on the selection.\n   *\n   * @param {Value} value\n   * @param {Operation} operation\n   * @return {Value}\n   */\n\n  setSelection(properties) {\n    let value = this\n    let { document, selection } = value\n    const next = selection.setProperties(properties)\n    selection = document.resolveSelection(next)\n    value = value.set('selection', selection)\n    return value\n  }\n\n  /**\n   * Split a node by `path` at `position` with optional `properties` to apply\n   * to the newly split node.\n   *\n   * @param {List|String} path\n   * @param {Number} position\n   * @param {Object} properties\n   * @return {Value}\n   */\n\n  splitNode(path, position, properties) {\n    let value = this\n    const { document } = value\n    const newDocument = document.splitNode(path, position, properties)\n    const node = document.assertNode(path)\n    value = value.set('document', newDocument)\n\n    value = value.mapRanges(range => {\n      const next = newDocument.getNextText(node.key)\n      const { start, end } = range\n\n      // If the start was after the split, move it to the next node.\n      if (node.key === start.key && position <= start.offset) {\n        range = range.moveStartTo(next.key, start.offset - position)\n      }\n\n      // If the end was after the split, move it to the next node.\n      if (node.key === end.key && position <= end.offset) {\n        range = range.moveEndTo(next.key, end.offset - position)\n      }\n\n      range = range.updatePoints(point => point.setPath(null))\n\n      return range\n    })\n\n    return value\n  }\n\n  /**\n   * Map all range objects to apply adjustments with an `iterator`.\n   *\n   * @param {Function} iterator\n   * @return {Value}\n   */\n\n  mapRanges(iterator) {\n    let value = this\n    const { document, selection, decorations } = value\n\n    let sel = selection.isSet ? iterator(selection) : selection\n    if (!sel) sel = selection.unset()\n    if (sel !== selection) sel = document.createSelection(sel)\n    value = value.set('selection', sel)\n\n    let decs = decorations.map(decoration => {\n      let n = decoration.isSet ? iterator(decoration) : decoration\n      if (n && n !== decoration) n = document.createDecoration(n)\n      return n\n    })\n\n    decs = decs.filter(decoration => !!decoration)\n    value = value.set('decorations', decs)\n    return value\n  }\n\n  /**\n   * Return a JSON representation of the value.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      document: this.document.toJSON(options),\n    }\n\n    if (options.preserveData) {\n      object.data = this.data.toJSON(options)\n    }\n\n    if (options.preserveDecorations) {\n      object.decorations = this.decorations\n        .toArray()\n        .map(d => d.toJSON(options))\n    }\n\n    if (options.preserveSelection) {\n      object.selection = this.selection.toJSON(options)\n    }\n\n    return object\n  }\n\n  /**\n   * Deprecated.\n   */\n\n  get history() {\n    invariant(\n      false,\n      'As of Slate 0.42.0, the `value.history` model no longer exists, and the history is stored in `value.data` instead using plugins.'\n    )\n  }\n\n  change() {\n    invariant(\n      false,\n      'As of Slate 0.42.0, value object are no longer schema-aware, and the `value.change()` method is no longer available. Use the `editor.change()` method on the new `Editor` controller instead.'\n    )\n  }\n}\n\n/**\n * Export.\n */\n\nexport default Value\n","import Debug from 'debug'\n\nimport Operation from '../models/operation'\nimport PathUtils from '../utils/path-utils'\n\n/**\n * Debug.\n *\n * @type {Function}\n */\n\nconst debug = Debug('slate:operation:apply')\n\n/**\n * Apply an `op` to a `value`.\n *\n * @param {Value} value\n * @param {Object|Operation} op\n * @return {Value} value\n */\n\nfunction applyOperation(value, op) {\n  op = Operation.create(op)\n  const { type } = op\n  debug(type, op)\n\n  switch (type) {\n    case 'add_mark': {\n      const { path, offset, length, mark } = op\n      const next = value.addMark(path, offset, length, mark)\n      return next\n    }\n\n    case 'insert_node': {\n      const { path, node } = op\n      const next = value.insertNode(path, node)\n      return next\n    }\n\n    case 'insert_text': {\n      const { path, offset, text, marks } = op\n      const next = value.insertText(path, offset, text, marks)\n      return next\n    }\n\n    case 'merge_node': {\n      const { path } = op\n      const next = value.mergeNode(path)\n      return next\n    }\n\n    case 'move_node': {\n      const { path, newPath } = op\n\n      if (PathUtils.isEqual(path, newPath)) {\n        return value\n      }\n\n      const next = value.moveNode(path, newPath)\n      return next\n    }\n\n    case 'remove_mark': {\n      const { path, offset, length, mark } = op\n      const next = value.removeMark(path, offset, length, mark)\n      return next\n    }\n\n    case 'remove_node': {\n      const { path } = op\n      const next = value.removeNode(path)\n      return next\n    }\n\n    case 'remove_text': {\n      const { path, offset, text } = op\n      const next = value.removeText(path, offset, text)\n      return next\n    }\n\n    case 'set_mark': {\n      const { path, offset, length, properties, newProperties } = op\n      const next = value.setMark(\n        path,\n        offset,\n        length,\n        properties,\n        newProperties\n      )\n      return next\n    }\n\n    case 'set_node': {\n      const { path, newProperties } = op\n      const next = value.setNode(path, newProperties)\n      return next\n    }\n\n    case 'set_selection': {\n      const { newProperties } = op\n      const next = value.setSelection(newProperties)\n      return next\n    }\n\n    case 'set_value': {\n      const { newProperties } = op\n      const next = value.setProperties(newProperties)\n      return next\n    }\n\n    case 'split_node': {\n      const { path, position, properties } = op\n      const next = value.splitNode(path, position, properties)\n      return next\n    }\n\n    default: {\n      throw new Error(`Unknown operation type: \"${type}\".`)\n    }\n  }\n}\n\n/**\n * Export.\n *\n * @type {Function}\n */\n\nexport default applyOperation\n","import Debug from 'debug'\n\nimport Operation from '../models/operation'\nimport PathUtils from '../utils/path-utils'\n\n/**\n * Debug.\n *\n * @type {Function}\n */\n\nconst debug = Debug('slate:operation:invert')\n\n/**\n * Invert an `op`.\n *\n * @param {Object} op\n * @return {Object}\n */\n\nfunction invertOperation(op) {\n  op = Operation.create(op)\n  const { type } = op\n  debug(type, op)\n\n  switch (type) {\n    case 'insert_node': {\n      const inverse = op.set('type', 'remove_node')\n      return inverse\n    }\n\n    case 'remove_node': {\n      const inverse = op.set('type', 'insert_node')\n      return inverse\n    }\n\n    case 'move_node': {\n      const { newPath, path } = op\n\n      if (PathUtils.isEqual(newPath, path)) {\n        return op\n      }\n\n      // Get the true path that the moved node ended up at\n      const inversePath = PathUtils.transform(path, op).first()\n\n      // Get the true path we are trying to move back to\n      // We transform the right-sibling of the path\n      // This will end up at the operation.path most of the time\n      // But if the newPath is a left-sibling or left-ancestor-sibling, this will account for it\n      const transformedSibling = PathUtils.transform(\n        PathUtils.increment(path),\n        op\n      ).first()\n\n      const inverse = op\n        .set('path', inversePath)\n        .set('newPath', transformedSibling)\n      return inverse\n    }\n\n    case 'merge_node': {\n      const { path } = op\n      const inversePath = PathUtils.decrement(path)\n      const inverse = op.set('type', 'split_node').set('path', inversePath)\n      return inverse\n    }\n\n    case 'split_node': {\n      const { path } = op\n      const inversePath = PathUtils.increment(path)\n      const inverse = op.set('type', 'merge_node').set('path', inversePath)\n      return inverse\n    }\n\n    case 'set_node':\n    case 'set_value':\n    case 'set_selection':\n    case 'set_mark': {\n      const { properties, newProperties } = op\n      const inverse = op\n        .set('properties', newProperties)\n        .set('newProperties', properties)\n      return inverse\n    }\n\n    case 'insert_text': {\n      const inverse = op.set('type', 'remove_text')\n      return inverse\n    }\n\n    case 'remove_text': {\n      const inverse = op.set('type', 'insert_text')\n      return inverse\n    }\n\n    case 'add_mark': {\n      const inverse = op.set('type', 'remove_mark')\n      return inverse\n    }\n\n    case 'remove_mark': {\n      const inverse = op.set('type', 'add_mark')\n      return inverse\n    }\n\n    default: {\n      throw new Error(`Unknown operation type: \"${type}\".`)\n    }\n  }\n}\n\n/**\n * Export.\n *\n * @type {Function}\n */\n\nexport default invertOperation\n","import isPlainObject from 'is-plain-object'\nimport { List, Record, Map } from 'immutable'\n\nimport Mark from './mark'\nimport Node from './node'\nimport PathUtils from '../utils/path-utils'\nimport Selection from './selection'\nimport Value from './value'\nimport apply from '../operations/apply'\nimport invert from '../operations/invert'\n\n/**\n * Operation attributes.\n *\n * @type {Array}\n */\n\nconst OPERATION_ATTRIBUTES = {\n  add_mark: ['path', 'offset', 'length', 'mark', 'data'],\n  insert_node: ['path', 'node', 'data'],\n  insert_text: ['path', 'offset', 'text', 'marks', 'data'],\n  merge_node: ['path', 'position', 'properties', 'target', 'data'],\n  move_node: ['path', 'newPath', 'data'],\n  remove_mark: ['path', 'offset', 'length', 'mark', 'data'],\n  remove_node: ['path', 'node', 'data'],\n  remove_text: ['path', 'offset', 'text', 'marks', 'data'],\n  set_mark: ['path', 'offset', 'length', 'properties', 'newProperties', 'data'],\n  set_node: ['path', 'properties', 'newProperties', 'data'],\n  set_selection: ['properties', 'newProperties', 'data'],\n  set_value: ['properties', 'newProperties', 'data'],\n  split_node: ['path', 'position', 'properties', 'target', 'data'],\n}\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  length: undefined,\n  mark: undefined,\n  marks: undefined,\n  newPath: undefined,\n  node: undefined,\n  offset: undefined,\n  path: undefined,\n  position: undefined,\n  properties: undefined,\n  newProperties: undefined,\n  target: undefined,\n  text: undefined,\n  type: undefined,\n  data: undefined,\n}\n\n/**\n * Operation.\n *\n * @type {Operation}\n */\n\nclass Operation extends Record(DEFAULTS) {\n  /**\n   * Create a new `Operation` with `attrs`.\n   *\n   * @param {Object|Array|List|String|Operation} attrs\n   * @return {Operation}\n   */\n\n  static create(attrs = {}) {\n    if (Operation.isOperation(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Operation.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Operation.create\\` only accepts objects or operations, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a list of `Operations` from `elements`.\n   *\n   * @param {Array<Operation|Object>|List<Operation|Object>} elements\n   * @return {List<Operation>}\n   */\n\n  static createList(elements = []) {\n    if (List.isList(elements) || Array.isArray(elements)) {\n      const list = new List(elements.map(Operation.create))\n      return list\n    }\n\n    throw new Error(\n      `\\`Operation.createList\\` only accepts arrays or lists, but you passed it: ${elements}`\n    )\n  }\n\n  /**\n   * Create a `Operation` from a JSON `object`.\n   *\n   * @param {Object|Operation} object\n   * @return {Operation}\n   */\n\n  static fromJSON(object) {\n    if (Operation.isOperation(object)) {\n      return object\n    }\n\n    const { type } = object\n    const ATTRIBUTES = OPERATION_ATTRIBUTES[type]\n    const attrs = { type }\n\n    if (!ATTRIBUTES) {\n      throw new Error(\n        `\\`Operation.fromJSON\\` was passed an unrecognized operation type: \"${type}\"`\n      )\n    }\n\n    for (const key of ATTRIBUTES) {\n      let v = object[key]\n\n      // Default `data` to an empty object.\n      if (key === 'data' && v === undefined) {\n        v = {}\n      }\n\n      if (v === undefined) {\n        throw new Error(\n          `\\`Operation.fromJSON\\` was passed a \"${type}\" operation without the required \"${key}\" attribute.`\n        )\n      }\n\n      if (key === 'path' || key === 'newPath') {\n        v = PathUtils.create(v)\n      }\n\n      if (key === 'mark') {\n        v = Mark.create(v)\n      }\n\n      if (key === 'marks' && v != null) {\n        v = Mark.createSet(v)\n      }\n\n      if (key === 'node') {\n        v = Node.create(v)\n      }\n\n      if (key === 'properties' && type === 'merge_node') {\n        v = Node.createProperties(v)\n      }\n\n      if (\n        (key === 'properties' || key === 'newProperties') &&\n        type === 'set_mark'\n      ) {\n        v = Mark.createProperties(v)\n      }\n\n      if (\n        (key === 'properties' || key === 'newProperties') &&\n        type === 'set_node'\n      ) {\n        v = Node.createProperties(v)\n      }\n\n      if (\n        (key === 'properties' || key === 'newProperties') &&\n        type === 'set_selection'\n      ) {\n        v = Selection.createProperties(v)\n      }\n\n      if (\n        (key === 'properties' || key === 'newProperties') &&\n        type === 'set_value'\n      ) {\n        v = Value.createProperties(v)\n      }\n\n      if (key === 'properties' && type === 'split_node') {\n        v = Node.createProperties(v)\n      }\n\n      if (key === 'data') {\n        v = Map(v)\n      }\n\n      attrs[key] = v\n    }\n\n    const node = new Operation(attrs)\n    return node\n  }\n\n  /**\n   * Check if `any` is a list of operations.\n   *\n   * @param {Any} any\n   * @return {Boolean}\n   */\n\n  static isOperationList(any) {\n    return List.isList(any) && any.every(item => Operation.isOperation(item))\n  }\n\n  /**\n   * Apply the operation to a `value`.\n   *\n   * @param {Value} value\n   * @return {Value}\n   */\n\n  apply(value) {\n    const next = apply(value, this)\n    return next\n  }\n\n  /**\n   * Invert the operation.\n   *\n   * @return {Operation}\n   */\n\n  invert() {\n    const inverted = invert(this)\n    return inverted\n  }\n\n  /**\n   * Return a JSON representation of the operation.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const { object, type } = this\n    const json = { object, type }\n    const ATTRIBUTES = OPERATION_ATTRIBUTES[type]\n\n    for (const key of ATTRIBUTES) {\n      let value = this[key]\n\n      if (\n        key === 'mark' ||\n        key === 'marks' ||\n        key === 'node' ||\n        key === 'path' ||\n        key === 'newPath'\n      ) {\n        value = value.toJSON()\n      }\n\n      if (key === 'properties' && type === 'merge_node') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('type' in value) v.type = value.type\n        value = v\n      }\n\n      if (\n        (key === 'properties' || key === 'newProperties') &&\n        type === 'set_mark'\n      ) {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('type' in value) v.type = value.type\n        value = v\n      }\n\n      if (\n        (key === 'properties' || key === 'newProperties') &&\n        type === 'set_node'\n      ) {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('type' in value) v.type = value.type\n        value = v\n      }\n\n      if (\n        (key === 'properties' || key === 'newProperties') &&\n        type === 'set_selection'\n      ) {\n        const v = {}\n        if ('anchor' in value) v.anchor = value.anchor.toJSON()\n        if ('focus' in value) v.focus = value.focus.toJSON()\n        if ('isFocused' in value) v.isFocused = value.isFocused\n        if ('marks' in value) v.marks = value.marks && value.marks.toJSON()\n        value = v\n      }\n\n      if (\n        (key === 'properties' || key === 'newProperties') &&\n        type === 'set_value'\n      ) {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('decorations' in value) v.decorations = value.decorations.toJS()\n        value = v\n      }\n\n      if (key === 'properties' && type === 'split_node') {\n        const v = {}\n        if ('data' in value) v.data = value.data.toJS()\n        if ('type' in value) v.type = value.type\n        value = v\n      }\n\n      if (key === 'data') {\n        value = value.toJSON()\n      }\n\n      json[key] = value\n    }\n\n    return json\n  }\n}\n\n/**\n * Export.\n *\n * @type {Operation}\n */\n\nexport default Operation\n","import isPlainObject from 'is-plain-object'\nimport { Record } from 'immutable'\n\nimport Operation from './operation'\nimport Value from './value'\n\n/**\n * Default properties.\n *\n * @type {Object}\n */\n\nconst DEFAULTS = {\n  operations: undefined,\n  value: undefined,\n}\n\n/**\n * Change.\n *\n * @type {Change}\n */\n\nclass Change extends Record(DEFAULTS) {\n  /**\n   * Create a new `Change` with `attrs`.\n   *\n   * @param {Object|Change} attrs\n   * @return {Change}\n   */\n\n  static create(attrs = {}) {\n    if (Change.isChange(attrs)) {\n      return attrs\n    }\n\n    if (isPlainObject(attrs)) {\n      return Change.fromJSON(attrs)\n    }\n\n    throw new Error(\n      `\\`Change.create\\` only accepts objects or changes, but you passed it: ${attrs}`\n    )\n  }\n\n  /**\n   * Create a `Change` from a JSON `object`.\n   *\n   * @param {Object} object\n   * @return {Change}\n   */\n\n  static fromJSON(object) {\n    const { value, operations = [] } = object\n\n    const change = new Change({\n      value: Value.create(value),\n      operations: Operation.createList(operations),\n    })\n\n    return change\n  }\n\n  /**\n   * Return a JSON representation of the change.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      value: this.value.toJSON(options),\n      operations: this.operations.toArray().map(o => o.toJSON(options)),\n    }\n\n    return object\n  }\n}\n\n/**\n * Export.\n *\n * @type {Change}\n */\n\nexport default Change\n","/**\n * A plugin that adds a set of commands to the editor.\n *\n * @param {Object} commands\n * @return {Object}\n */\n\nfunction CommandsPlugin(commands = {}) {\n  /**\n   * On command, if it exists in our list of commands, call it.\n   *\n   * @param {Object} command\n   * @param {Editor} editor\n   * @param {Function} next\n   */\n\n  function onCommand(command, editor, next) {\n    const { type, args } = command\n    const fn = commands[type]\n    if (!fn) return next()\n    editor.command(fn, ...args)\n  }\n\n  /**\n   * On construct, register all the commands.\n   *\n   * @param {Editor} editor\n   * @param {Function} next\n   */\n\n  function onConstruct(editor, next) {\n    for (const command in commands) {\n      editor.registerCommand(command)\n    }\n\n    return next()\n  }\n\n  /**\n   * Return the plugin.\n   *\n   * @type {Object}\n   */\n\n  return {\n    onCommand,\n    onConstruct,\n  }\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default CommandsPlugin\n","import { reverse } from 'esrever'\n\n/**\n * Surrogate pair start and end points.\n *\n * @type {Number}\n */\n\nconst SURROGATE_START = 0xd800\nconst SURROGATE_END = 0xdfff\n\n/**\n * A regex to match space characters.\n *\n * @type {RegExp}\n */\n\nconst SPACE = /\\s/\n\n/**\n * A regex to match chameleon characters, that count as word characters as long\n * as they are inside of a word.\n *\n * @type {RegExp}\n */\n\nconst CHAMELEON = /['\\u2018\\u2019]/\n\n/**\n * A regex that matches punctuation.\n *\n * @type {RegExp}\n */\n\nconst PUNCTUATION = /[\\u0021-\\u0023\\u0025-\\u002A\\u002C-\\u002F\\u003A\\u003B\\u003F\\u0040\\u005B-\\u005D\\u005F\\u007B\\u007D\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E3B\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\n\n/**\n * Is a character `code` in a surrogate character.\n *\n * @param {Number} code\n * @return {Boolean}\n */\n\nfunction isSurrogate(code) {\n  return SURROGATE_START <= code && code <= SURROGATE_END\n}\n\n/**\n * Is a character a word character? Needs the `remaining` characters too.\n *\n * @param {String} char\n * @param {String|Void} remaining\n * @return {Boolean}\n */\n\nfunction isWord(char, remaining) {\n  if (SPACE.test(char)) return false\n\n  // If it's a chameleon character, recurse to see if the next one is or not.\n  if (CHAMELEON.test(char)) {\n    let next = remaining.charAt(0)\n    const length = getCharLength(next)\n    next = remaining.slice(0, length)\n    const rest = remaining.slice(length)\n    if (isWord(next, rest)) return true\n  }\n\n  if (PUNCTUATION.test(char)) return false\n  return true\n}\n\n/**\n * Get the length of a `character`.\n *\n * @param {String} char\n * @return {Number}\n */\n\nfunction getCharLength(char) {\n  return isSurrogate(char.charCodeAt(0)) ? 2 : 1\n}\n\n/**\n * Get the offset to the end of the first character in `text`.\n *\n * @param {String} text\n * @return {Number}\n */\n\nfunction getCharOffset(text) {\n  const char = text.charAt(0)\n  return getCharLength(char)\n}\n\n/**\n * Get the offset to the end of the character before an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\nfunction getCharOffsetBackward(text, offset) {\n  text = text.slice(0, offset)\n  text = reverse(text)\n  return getCharOffset(text)\n}\n\n/**\n * Get the offset to the end of the character after an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\nfunction getCharOffsetForward(text, offset) {\n  text = text.slice(offset)\n  return getCharOffset(text)\n}\n\n/**\n * Get the offset to the end of the first word in `text`.\n *\n * @param {String} text\n * @return {Number}\n */\n\nfunction getWordOffset(text) {\n  let length = 0\n  let i = 0\n  let started = false\n  let char\n\n  while ((char = text.charAt(i))) {\n    const l = getCharLength(char)\n    char = text.slice(i, i + l)\n    const rest = text.slice(i + l)\n\n    if (isWord(char, rest)) {\n      started = true\n      length += l\n    } else if (!started) {\n      length += l\n    } else {\n      break\n    }\n\n    i += l\n  }\n\n  return length\n}\n\n/**\n * Get the offset to the end of the word before an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\nfunction getWordOffsetBackward(text, offset) {\n  text = text.slice(0, offset)\n  text = reverse(text)\n  const o = getWordOffset(text)\n  return o\n}\n\n/**\n * Get the offset to the end of the word after an `offset` in `text`.\n *\n * @param {String} text\n * @param {Number} offset\n * @return {Number}\n */\n\nfunction getWordOffsetForward(text, offset) {\n  text = text.slice(offset)\n  const o = getWordOffset(text)\n  return o\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default {\n  getCharLength,\n  getCharOffset,\n  getCharOffsetBackward,\n  getCharOffsetForward,\n  getWordOffset,\n  getWordOffsetBackward,\n  getWordOffsetForward,\n  isSurrogate,\n  isWord,\n}\n","import { List } from 'immutable'\nimport Block from '../models/block'\nimport Inline from '../models/inline'\nimport Mark from '../models/mark'\nimport Node from '../models/node'\nimport TextUtils from '../utils/text-utils'\n\n/**\n * Ensure that an expanded selection is deleted first, and return the updated\n * range to account for the deleted part.\n *\n * @param {Editor}\n */\n\nfunction deleteExpandedAtRange(editor, range) {\n  if (range.isExpanded) {\n    editor.deleteAtRange(range)\n  }\n\n  const { value } = editor\n  const { document } = value\n  const { start, end } = range\n\n  if (document.hasDescendant(start.key)) {\n    range = range.moveToStart()\n  } else {\n    range = range.moveTo(end.key, 0).normalize(document)\n  }\n\n  return range\n}\n\n/**\n * Commands.\n *\n * @type {Object}\n */\n\nconst Commands = {}\n\n/**\n * Add a new `mark` to the characters at `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Mixed} mark\n */\n\nCommands.addMarkAtRange = (editor, range, mark) => {\n  if (range.isCollapsed) return\n\n  const { value } = editor\n  const { document } = value\n  const { start, end } = range\n  const texts = document.getTextsAtRange(range)\n\n  editor.withoutNormalizing(() => {\n    texts.forEach(node => {\n      const { key } = node\n      let index = 0\n      let length = node.text.length\n\n      if (key === start.key) index = start.offset\n      if (key === end.key) length = end.offset\n      if (key === start.key && key === end.key)\n        length = end.offset - start.offset\n\n      editor.addMarkByKey(key, index, length, mark)\n    })\n  })\n}\n\n/**\n * Add a list of `marks` to the characters at `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Array<Mixed>} mark\n */\n\nCommands.addMarksAtRange = (editor, range, marks) => {\n  marks.forEach(mark => editor.addMarkAtRange(range, mark))\n}\n\n/**\n * Delete everything in a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n */\n\nCommands.deleteAtRange = (editor, range) => {\n  // Snapshot the selection, which creates an extra undo save point, so that\n  // when you undo a delete, the expanded selection will be retained.\n  editor.snapshotSelection()\n\n  const { value } = editor\n  const { start, end } = range\n  let startKey = start.key\n  let startOffset = start.offset\n  let endKey = end.key\n  let endOffset = end.offset\n  let { document } = value\n  let isStartVoid = document.hasVoidParent(startKey, editor)\n  let isEndVoid = document.hasVoidParent(endKey, editor)\n  let startBlock = document.getClosestBlock(startKey)\n  let endBlock = document.getClosestBlock(endKey)\n\n  // Check if we have a \"hanging\" selection case where the even though the\n  // selection extends into the start of the end node, we actually want to\n  // ignore that for UX reasons.\n  const isHanging =\n    startOffset === 0 &&\n    endOffset === 0 &&\n    isStartVoid === false &&\n    startKey === startBlock.getFirstText().key &&\n    endKey === endBlock.getFirstText().key\n\n  // If it's a hanging selection, nudge it back to end in the previous text.\n  if (isHanging && isEndVoid) {\n    const prevText = document.getPreviousText(endKey)\n    endKey = prevText.key\n    endOffset = prevText.text.length\n    isEndVoid = document.hasVoidParent(endKey, editor)\n  }\n\n  editor.withoutNormalizing(() => {\n    // If the start node is inside a void node, remove the void node and update\n    // the starting point to be right after it, continuously until the start point\n    // is not a void, or until the entire range is handled.\n    while (isStartVoid) {\n      const startVoid = document.getClosestVoid(startKey, editor)\n      const nextText = document.getNextText(startKey)\n      editor.removeNodeByKey(startVoid.key)\n\n      // If the start and end keys are the same, we're done.\n      if (startKey === endKey) return\n\n      // If there is no next text node, we're done.\n      if (!nextText) return\n\n      // Continue...\n      document = editor.value.document\n      startKey = nextText.key\n      startOffset = 0\n      isStartVoid = document.hasVoidParent(startKey, editor)\n    }\n\n    // If the end node is inside a void node, do the same thing but backwards. But\n    // we don't need any aborting checks because if we've gotten this far there\n    // must be a non-void node that will exit the loop.\n    while (isEndVoid) {\n      const endVoid = document.getClosestVoid(endKey, editor)\n      const prevText = document.getPreviousText(endKey)\n      editor.removeNodeByKey(endVoid.key)\n\n      // Continue...\n      document = editor.value.document\n      endKey = prevText.key\n      endOffset = prevText.text.length\n      isEndVoid = document.hasVoidParent(endKey, editor)\n    }\n\n    // If the start and end key are the same, and it was a hanging selection, we\n    // can just remove the entire block.\n    if (startKey === endKey && isHanging) {\n      editor.removeNodeByKey(startBlock.key)\n      return\n    } else if (startKey === endKey) {\n      // Otherwise, if it wasn't hanging, we're inside a single text node, so we can\n      // simply remove the text in the range.\n      const index = startOffset\n      const length = endOffset - startOffset\n      editor.removeTextByKey(startKey, index, length)\n      return\n    } else {\n      // Otherwise, we need to recursively remove text and nodes inside the start\n      // block after the start offset and inside the end block before the end\n      // offset. Then remove any blocks that are in between the start and end\n      // blocks. Then finally merge the start and end nodes.\n      startBlock = document.getClosestBlock(startKey)\n      endBlock = document.getClosestBlock(endKey)\n      const startText = document.getNode(startKey)\n      const endText = document.getNode(endKey)\n      const startLength = startText.text.length - startOffset\n      const endLength = endOffset\n\n      const ancestor = document.getCommonAncestor(startKey, endKey)\n      const startChild = ancestor.getFurthestAncestor(startKey)\n      const endChild = ancestor.getFurthestAncestor(endKey)\n\n      const startParent = document.getParent(startBlock.key)\n      const startParentIndex = startParent.nodes.indexOf(startBlock)\n      const endParentIndex = startParent.nodes.indexOf(endBlock)\n\n      let child\n\n      // Iterate through all of the nodes in the tree after the start text node\n      // but inside the end child, and remove them.\n      child = startText\n\n      while (child.key !== startChild.key) {\n        const parent = document.getParent(child.key)\n        const index = parent.nodes.indexOf(child)\n        const afters = parent.nodes.slice(index + 1)\n\n        afters.reverse().forEach(node => {\n          editor.removeNodeByKey(node.key)\n        })\n\n        child = parent\n      }\n\n      // Remove all of the middle children.\n      const startChildIndex = ancestor.nodes.indexOf(startChild)\n      const endChildIndex = ancestor.nodes.indexOf(endChild)\n      const middles = ancestor.nodes.slice(startChildIndex + 1, endChildIndex)\n\n      middles.reverse().forEach(node => {\n        editor.removeNodeByKey(node.key)\n      })\n\n      // Remove the nodes before the end text node in the tree.\n      child = endText\n\n      while (child.key !== endChild.key) {\n        const parent = document.getParent(child.key)\n        const index = parent.nodes.indexOf(child)\n        const befores = parent.nodes.slice(0, index)\n\n        befores.reverse().forEach(node => {\n          editor.removeNodeByKey(node.key)\n        })\n\n        child = parent\n      }\n\n      // Remove any overlapping text content from the leaf text nodes.\n      if (startLength !== 0) {\n        editor.removeTextByKey(startKey, startOffset, startLength)\n      }\n\n      if (endLength !== 0) {\n        editor.removeTextByKey(endKey, 0, endOffset)\n      }\n\n      // If the start and end blocks aren't the same, move and merge the end block\n      // into the start block.\n      if (startBlock.key !== endBlock.key) {\n        document = editor.value.document\n        const lonely = document.getFurthestOnlyChildAncestor(endBlock.key)\n\n        // Move the end block to be right after the start block.\n        if (endParentIndex !== startParentIndex + 1) {\n          editor.moveNodeByKey(\n            endBlock.key,\n            startParent.key,\n            startParentIndex + 1\n          )\n        }\n\n        // If the selection is hanging, just remove the start block, otherwise\n        // merge the end block into it.\n        if (isHanging) {\n          editor.removeNodeByKey(startBlock.key)\n        } else {\n          editor.mergeNodeByKey(endBlock.key)\n        }\n\n        // If nested empty blocks are left over above the end block, remove them.\n        if (lonely) {\n          editor.removeNodeByKey(lonely.key)\n        }\n      }\n    }\n  })\n}\n\n/**\n * Delete backward `n` characters at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Number} n (optional)\n */\n\nCommands.deleteBackwardAtRange = (editor, range, n = 1) => {\n  if (n === 0) return\n  const { value } = editor\n  const { document } = value\n  const { start, focus } = range\n\n  // If the range is expanded, perform a regular delete instead.\n  if (range.isExpanded) {\n    editor.deleteAtRange(range)\n    return\n  }\n\n  const voidParent = document.getClosestVoid(start.key, editor)\n\n  // If there is a void parent, delete it.\n  if (voidParent) {\n    editor.removeNodeByKey(voidParent.key)\n    return\n  }\n\n  // If the range is at the start of the document, abort.\n  if (start.isAtStartOfNode(document)) {\n    return\n  }\n\n  const block = document.getClosestBlock(start.key)\n\n  // PERF: If the closest block is empty, remove it. This is just a shortcut,\n  // since merging it would result in the same outcome.\n  if (\n    document.nodes.size !== 1 &&\n    block &&\n    block.text === '' &&\n    block.nodes.size === 1\n  ) {\n    editor.removeNodeByKey(block.key)\n    return\n  }\n\n  // If the range is at the start of the text node, we need to figure out what\n  // is behind it to know how to delete...\n  const text = document.getDescendant(start.key)\n\n  if (start.isAtStartOfNode(text)) {\n    let prev = document.getPreviousText(text.key)\n    const inline = document.getClosestInline(text.key)\n\n    // If the range is at the start of the inline node, and previous text node\n    // is empty, take the text node before that, or \"prevBlock\" would be the\n    // same node as \"block\"\n    if (inline && prev.text === '') {\n      prev = document.getPreviousText(prev.key)\n    }\n\n    const prevBlock = document.getClosestBlock(prev.key)\n    const prevVoid = document.getClosestVoid(prev.key, editor)\n\n    // If the previous text node has a void parent, remove it.\n    if (prevVoid) {\n      editor.removeNodeByKey(prevVoid.key)\n      return\n    }\n\n    // If we're deleting by one character and the previous text node is not\n    // inside the current block, we need to merge the two blocks together.\n    if (n === 1 && prevBlock !== block) {\n      range = range.moveAnchorTo(prev.key, prev.text.length)\n      editor.deleteAtRange(range)\n      return\n    }\n  }\n\n  // If the focus offset is farther than the number of characters to delete,\n  // just remove the characters backwards inside the current node.\n  if (n < focus.offset) {\n    range = range.moveFocusBackward(n)\n    editor.deleteAtRange(range)\n    return\n  }\n\n  // Otherwise, we need to see how many nodes backwards to go.\n  let node = text\n  let offset = 0\n  let traversed = focus.offset\n\n  while (n > traversed) {\n    node = document.getPreviousText(node.key)\n    const next = traversed + node.text.length\n\n    if (n <= next) {\n      offset = next - n\n      break\n    } else {\n      traversed = next\n    }\n  }\n\n  range = range.moveAnchorTo(node.key, offset)\n  editor.deleteAtRange(range)\n}\n\n/**\n * Delete backward until the character boundary at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n */\n\nCommands.deleteCharBackwardAtRange = (editor, range) => {\n  if (range.isExpanded) {\n    editor.deleteAtRange(range)\n    return\n  }\n\n  const { value } = editor\n  const { document } = value\n  const { start } = range\n  const startBlock = document.getClosestBlock(start.key)\n  const offset = startBlock.getOffset(start.key)\n  const o = offset + start.offset\n  const { text } = startBlock\n  const n = TextUtils.getCharOffsetBackward(text, o)\n  editor.deleteBackwardAtRange(range, n)\n}\n\n/**\n * Delete forward until the character boundary at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n */\n\nCommands.deleteCharForwardAtRange = (editor, range) => {\n  if (range.isExpanded) {\n    editor.deleteAtRange(range)\n    return\n  }\n\n  const { value } = editor\n  const { document } = value\n  const { start } = range\n  const startBlock = document.getClosestBlock(start.key)\n  const offset = startBlock.getOffset(start.key)\n  const o = offset + start.offset\n  const { text } = startBlock\n  const n = TextUtils.getCharOffsetForward(text, o)\n  editor.deleteForwardAtRange(range, n)\n}\n\n/**\n * Delete forward `n` characters at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Number} n (optional)\n */\n\nCommands.deleteForwardAtRange = (editor, range, n = 1) => {\n  if (n === 0) return\n  const { value } = editor\n  const { document } = value\n  const { start, focus } = range\n\n  // If the range is expanded, perform a regular delete instead.\n  if (range.isExpanded) {\n    editor.deleteAtRange(range)\n    return\n  }\n\n  const voidParent = document.getClosestVoid(start.key, editor)\n\n  // If the node has a void parent, delete it.\n  if (voidParent) {\n    editor.removeNodeByKey(voidParent.key)\n    return\n  }\n\n  const block = document.getClosestBlock(start.key)\n\n  // If the closest is not void, but empty, remove it\n  if (\n    block &&\n    !editor.isVoid(block) &&\n    block.text === '' &&\n    document.nodes.size !== 1\n  ) {\n    const nextBlock = document.getNextBlock(block.key)\n    editor.removeNodeByKey(block.key)\n\n    if (nextBlock && nextBlock.key) {\n      editor.moveToStartOfNode(nextBlock)\n    }\n\n    return\n  }\n\n  // If the range is at the start of the document, abort.\n  if (start.isAtEndOfNode(document)) {\n    return\n  }\n\n  // If the range is at the start of the text node, we need to figure out what\n  // is behind it to know how to delete...\n  const text = document.getDescendant(start.key)\n\n  if (start.isAtEndOfNode(text)) {\n    const next = document.getNextText(text.key)\n    const nextBlock = document.getClosestBlock(next.key)\n    const nextVoid = document.getClosestVoid(next.key, editor)\n\n    // If the next text node has a void parent, remove it.\n    if (nextVoid) {\n      editor.removeNodeByKey(nextVoid.key)\n      return\n    }\n\n    // If we're deleting by one character and the previous text node is not\n    // inside the current block, we need to merge the two blocks together.\n    if (n === 1 && nextBlock !== block) {\n      range = range.moveFocusTo(next.key, 0)\n      editor.deleteAtRange(range)\n      return\n    }\n  }\n\n  // If the remaining characters to the end of the node is greater than or equal\n  // to the number of characters to delete, just remove the characters forwards\n  // inside the current node.\n  if (n <= text.text.length - focus.offset) {\n    range = range.moveFocusForward(n)\n    editor.deleteAtRange(range)\n    return\n  }\n\n  // Otherwise, we need to see how many nodes forwards to go.\n  let node = text\n  let offset = focus.offset\n  let traversed = text.text.length - focus.offset\n\n  while (n > traversed) {\n    node = document.getNextText(node.key)\n    const next = traversed + node.text.length\n\n    if (n <= next) {\n      offset = n - traversed\n      break\n    } else {\n      traversed = next\n    }\n  }\n\n  range = range.moveFocusTo(node.key, offset)\n  editor.deleteAtRange(range)\n}\n\n/**\n * Delete backward until the line boundary at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n */\n\nCommands.deleteLineBackwardAtRange = (editor, range) => {\n  if (range.isExpanded) {\n    editor.deleteAtRange(range)\n    return\n  }\n\n  const { value } = editor\n  const { document } = value\n  const { start } = range\n  const startBlock = document.getClosestBlock(start.key)\n  const offset = startBlock.getOffset(start.key)\n  const o = offset + start.offset\n  editor.deleteBackwardAtRange(range, o)\n}\n\n/**\n * Delete forward until the line boundary at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n */\n\nCommands.deleteLineForwardAtRange = (editor, range) => {\n  if (range.isExpanded) {\n    editor.deleteAtRange(range)\n    return\n  }\n\n  const { value } = editor\n  const { document } = value\n  const { start } = range\n  const startBlock = document.getClosestBlock(start.key)\n  const offset = startBlock.getOffset(start.key)\n  const o = offset + start.offset\n  editor.deleteForwardAtRange(range, startBlock.text.length - o)\n}\n\n/**\n * Delete backward until the word boundary at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n */\n\nCommands.deleteWordBackwardAtRange = (editor, range) => {\n  if (range.isExpanded) {\n    editor.deleteAtRange(range)\n    return\n  }\n\n  const { value } = editor\n  const { document } = value\n  const { start } = range\n  const startBlock = document.getClosestBlock(start.key)\n  const offset = startBlock.getOffset(start.key)\n  const o = offset + start.offset\n  const { text } = startBlock\n  const n = o === 0 ? 1 : TextUtils.getWordOffsetBackward(text, o)\n  editor.deleteBackwardAtRange(range, n)\n}\n\n/**\n * Delete forward until the word boundary at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n */\n\nCommands.deleteWordForwardAtRange = (editor, range) => {\n  if (range.isExpanded) {\n    editor.deleteAtRange(range)\n    return\n  }\n\n  const { value } = editor\n  const { document } = value\n  const { start } = range\n  const startBlock = document.getClosestBlock(start.key)\n  const offset = startBlock.getOffset(start.key)\n  const o = offset + start.offset\n  const { text } = startBlock\n  const wordOffset = TextUtils.getWordOffsetForward(text, o)\n  const n = wordOffset === 0 ? 1 : wordOffset\n  editor.deleteForwardAtRange(range, n)\n}\n\n/**\n * Insert a `block` node at `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Block|String|Object} block\n */\n\nCommands.insertBlockAtRange = (editor, range, block) => {\n  range = deleteExpandedAtRange(editor, range)\n  block = Block.create(block)\n\n  const { value } = editor\n  const { document } = value\n  const { start } = range\n  let startKey = start.key\n  let startOffset = start.offset\n  const startBlock = document.getClosestBlock(startKey)\n  const startInline = document.getClosestInline(startKey)\n  const parent = document.getParent(startBlock.key)\n  const index = parent.nodes.indexOf(startBlock)\n\n  if (editor.isVoid(startBlock)) {\n    const extra = start.isAtEndOfNode(startBlock) ? 1 : 0\n    editor.insertNodeByKey(parent.key, index + extra, block)\n  } else if (!startInline && startBlock.text === '') {\n    editor.insertNodeByKey(parent.key, index + 1, block)\n  } else if (start.isAtStartOfNode(startBlock)) {\n    editor.insertNodeByKey(parent.key, index, block)\n  } else if (start.isAtEndOfNode(startBlock)) {\n    editor.insertNodeByKey(parent.key, index + 1, block)\n  } else {\n    if (startInline && editor.isVoid(startInline)) {\n      const atEnd = start.isAtEndOfNode(startInline)\n      const siblingText = atEnd\n        ? document.getNextText(startKey)\n        : document.getPreviousText(startKey)\n\n      const splitRange = atEnd\n        ? range.moveToStartOfNode(siblingText)\n        : range.moveToEndOfNode(siblingText)\n\n      startKey = splitRange.start.key\n      startOffset = splitRange.start.offset\n    }\n\n    editor.withoutNormalizing(() => {\n      editor.splitDescendantsByKey(startBlock.key, startKey, startOffset)\n      editor.insertNodeByKey(parent.key, index + 1, block)\n    })\n  }\n}\n\n/**\n * Insert a `fragment` at a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Document} fragment\n */\n\nCommands.insertFragmentAtRange = (editor, range, fragment) => {\n  editor.withoutNormalizing(() => {\n    range = deleteExpandedAtRange(editor, range)\n\n    // If the fragment is empty, there's nothing to do after deleting.\n    if (!fragment.nodes.size) return\n\n    // Regenerate the keys for all of the fragments nodes, so that they're\n    // guaranteed not to collide with the existing keys in the document. Otherwise\n    // they will be rengerated automatically and we won't have an easy way to\n    // reference them.\n    fragment = fragment.mapDescendants(child => child.regenerateKey())\n\n    // Calculate a few things...\n    const { start } = range\n    const { value } = editor\n    let { document } = value\n    let startText = document.getDescendant(start.key)\n    let startBlock = document.getClosestBlock(startText.key)\n    let startChild = startBlock.getFurthestAncestor(startText.key)\n    const isAtStart = start.isAtStartOfNode(startBlock)\n    const parent = document.getParent(startBlock.key)\n    const index = parent.nodes.indexOf(startBlock)\n    const blocks = fragment.getBlocks()\n    const firstChild = fragment.nodes.first()\n    const lastChild = fragment.nodes.last()\n    const firstBlock = blocks.first()\n    const lastBlock = blocks.last()\n    const insertionNode = findInsertionNode(fragment, document, startBlock.key)\n\n    // If the fragment only contains a void block, use `insertBlock` instead.\n    if (firstBlock === lastBlock && editor.isVoid(firstBlock)) {\n      editor.insertBlockAtRange(range, firstBlock)\n      return\n    }\n\n    // If inserting the entire fragment and it starts or ends with a single\n    // nested block, e.g. a table, we do not merge it with existing blocks.\n    if (\n      insertionNode === fragment &&\n      (firstChild.hasBlockChildren() || lastChild.hasBlockChildren())\n    ) {\n      fragment.nodes.reverse().forEach(node => {\n        editor.insertBlockAtRange(range, node)\n      })\n      return\n    }\n\n    // If the first and last block aren't the same, we need to insert all of the\n    // nodes after the insertion node's first block at the index.\n    if (firstBlock !== lastBlock) {\n      const lonelyParent = insertionNode.getFurthest(\n        firstBlock.key,\n        p => p.nodes.size === 1\n      )\n      const lonelyChild = lonelyParent || firstBlock\n\n      const startIndex = parent.nodes.indexOf(startBlock)\n      const excludingLonelyChild = insertionNode.removeNode(lonelyChild.key)\n\n      excludingLonelyChild.nodes.forEach((node, i) => {\n        const newIndex = startIndex + i + 1\n        editor.insertNodeByKey(parent.key, newIndex, node)\n      })\n    }\n\n    // Check if we need to split the node.\n    if (start.offset !== 0) {\n      editor.splitDescendantsByKey(startChild.key, start.key, start.offset)\n    }\n\n    // Update our variables with the new value.\n    document = editor.value.document\n    startText = document.getDescendant(start.key)\n    startBlock = document.getClosestBlock(start.key)\n    startChild = startBlock.getFurthestAncestor(startText.key)\n\n    // If the first and last block aren't the same, we need to move any of the\n    // starting block's children after the split into the last block of the\n    // fragment, which has already been inserted.\n    if (firstBlock !== lastBlock) {\n      const nextChild = isAtStart\n        ? startChild\n        : startBlock.getNextSibling(startChild.key)\n      const nextNodes = nextChild\n        ? startBlock.nodes.skipUntil(n => n.key === nextChild.key)\n        : List()\n      const lastIndex = lastBlock.nodes.size\n\n      nextNodes.forEach((node, i) => {\n        const newIndex = lastIndex + i\n        editor.moveNodeByKey(node.key, lastBlock.key, newIndex)\n      })\n    }\n\n    // If the starting block is empty, we replace it entirely with the first block\n    // of the fragment, since this leads to a more expected behavior for the user.\n    if (\n      !editor.isVoid(startBlock) &&\n      startBlock.text === '' &&\n      !startBlock.findDescendant(n => editor.isVoid(n))\n    ) {\n      editor.removeNodeByKey(startBlock.key)\n      editor.insertNodeByKey(parent.key, index, firstBlock)\n    } else {\n      // Otherwise, we maintain the starting block, and insert all of the first\n      // block's inline nodes into it at the split point.\n      const inlineChild = startBlock.getFurthestAncestor(startText.key)\n      const inlineIndex = startBlock.nodes.indexOf(inlineChild)\n\n      firstBlock.nodes.forEach((inline, i) => {\n        const o = start.offset === 0 ? 0 : 1\n        const newIndex = inlineIndex + i + o\n        editor.insertNodeByKey(startBlock.key, newIndex, inline)\n      })\n    }\n  })\n}\n\nconst findInsertionNode = (fragment, document, startKey) => {\n  const hasSingleNode = object => {\n    if (!object || object.object === 'text') return\n    return object.nodes.size === 1\n  }\n\n  const firstNode = object => object && object.nodes.first()\n  let node = fragment\n\n  if (hasSingleNode(fragment)) {\n    let fragmentInner = firstNode(fragment)\n\n    const matches = documentNode => documentNode.type === fragmentInner.type\n    let documentInner = document.getFurthest(startKey, matches)\n\n    if (documentInner === document.getParent(startKey)) node = fragmentInner\n\n    while (hasSingleNode(fragmentInner) && hasSingleNode(documentInner)) {\n      fragmentInner = firstNode(fragmentInner)\n      documentInner = firstNode(documentInner)\n\n      if (fragmentInner.type === documentInner.type) {\n        node = fragmentInner\n      } else {\n        break\n      }\n    }\n  }\n\n  return node\n}\n\n/**\n * Insert an `inline` node at `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Inline|String|Object} inline\n */\n\nCommands.insertInlineAtRange = (editor, range, inline) => {\n  inline = Inline.create(inline)\n\n  editor.withoutNormalizing(() => {\n    range = deleteExpandedAtRange(editor, range)\n\n    const { value } = editor\n    const { document } = value\n    const { start } = range\n    const parent = document.getParent(start.key)\n    const startText = document.assertDescendant(start.key)\n    const index = parent.nodes.indexOf(startText)\n\n    if (editor.isVoid(parent)) return\n\n    editor.splitNodeByKey(start.key, start.offset)\n    editor.insertNodeByKey(parent.key, index + 1, inline)\n  })\n}\n\n/**\n * Insert `text` at a `range`, with optional `marks`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n */\n\nCommands.insertTextAtRange = (editor, range, text, marks) => {\n  range = deleteExpandedAtRange(editor, range)\n\n  const { value } = editor\n  const { document } = value\n  const { start } = range\n  const offset = start.offset\n  const parent = document.getParent(start.key)\n\n  if (editor.isVoid(parent)) {\n    return\n  }\n\n  editor.insertTextByKey(start.key, offset, text, marks)\n}\n\n/**\n * Remove an existing `mark` to the characters at `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Mark|String} mark (optional)\n */\n\nCommands.removeMarkAtRange = (editor, range, mark) => {\n  if (range.isCollapsed) return\n\n  const { value } = editor\n  const { document } = value\n  const texts = document.getTextsAtRange(range)\n  const { start, end } = range\n\n  editor.withoutNormalizing(() => {\n    texts.forEach(node => {\n      const { key } = node\n      let index = 0\n      let length = node.text.length\n\n      if (key === start.key) index = start.offset\n      if (key === end.key) length = end.offset\n      if (key === start.key && key === end.key)\n        length = end.offset - start.offset\n\n      editor.removeMarkByKey(key, index, length, mark)\n    })\n  })\n}\n\n/**\n * Set the `properties` of block nodes in a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Object|String} properties\n */\n\nCommands.setBlocksAtRange = (editor, range, properties) => {\n  const { value } = editor\n  const { document } = value\n  const blocks = document.getLeafBlocksAtRange(range)\n\n  const { start, end, isCollapsed } = range\n  const isStartVoid = document.hasVoidParent(start.key, editor)\n  const startBlock = document.getClosestBlock(start.key)\n  const endBlock = document.getClosestBlock(end.key)\n\n  // Check if we have a \"hanging\" selection case where the even though the\n  // selection extends into the start of the end node, we actually want to\n  // ignore that for UX reasons.\n  const isHanging =\n    isCollapsed === false &&\n    start.offset === 0 &&\n    end.offset === 0 &&\n    isStartVoid === false &&\n    start.key === startBlock.getFirstText().key &&\n    end.key === endBlock.getFirstText().key\n\n  // If it's a hanging selection, ignore the last block.\n  const sets = isHanging ? blocks.slice(0, -1) : blocks\n\n  editor.withoutNormalizing(() => {\n    sets.forEach(block => {\n      editor.setNodeByKey(block.key, properties)\n    })\n  })\n}\n\n/**\n * Set the `properties` of inline nodes in a `range`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Object|String} properties\n */\n\nCommands.setInlinesAtRange = (editor, range, properties) => {\n  const { value } = editor\n  const { document } = value\n  const inlines = document.getLeafInlinesAtRange(range)\n\n  editor.withoutNormalizing(() => {\n    inlines.forEach(inline => {\n      editor.setNodeByKey(inline.key, properties)\n    })\n  })\n}\n\n/**\n * Split the block nodes at a `range`, to optional `height`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Number} height (optional)\n */\n\nCommands.splitBlockAtRange = (editor, range, height = 1) => {\n  range = deleteExpandedAtRange(editor, range)\n\n  const { start, end } = range\n  let { value } = editor\n  let { document } = value\n  let node = document.assertDescendant(start.key)\n  let parent = document.getClosestBlock(node.key)\n  let h = 0\n\n  while (parent && parent.object === 'block' && h < height) {\n    node = parent\n    parent = document.getClosestBlock(parent.key)\n    h++\n  }\n\n  editor.withoutNormalizing(() => {\n    editor.splitDescendantsByKey(node.key, start.key, start.offset)\n\n    value = editor.value\n    document = value.document\n\n    if (range.isExpanded) {\n      if (range.isBackward) range = range.flip()\n      const nextBlock = document.getNextBlock(node.key)\n      range = range.moveAnchorToStartOfNode(nextBlock)\n      range = range.setFocus(range.focus.setPath(null))\n\n      if (start.key === end.key) {\n        range = range.moveFocusTo(range.anchor.key, end.offset - start.offset)\n      }\n\n      range = document.resolveRange(range)\n      editor.deleteAtRange(range)\n    }\n  })\n}\n\n/**\n * Split the inline nodes at a `range`, to optional `height`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Number} height (optional)\n */\n\nCommands.splitInlineAtRange = (editor, range, height = Infinity) => {\n  range = deleteExpandedAtRange(editor, range)\n\n  const { start } = range\n  const { value } = editor\n  const { document } = value\n  let node = document.assertDescendant(start.key)\n  let parent = document.getClosestInline(node.key)\n  let h = 0\n\n  while (parent && parent.object === 'inline' && h < height) {\n    node = parent\n    parent = document.getClosestInline(parent.key)\n    h++\n  }\n\n  editor.splitDescendantsByKey(node.key, start.key, start.offset)\n}\n\n/**\n * Add or remove a `mark` from the characters at `range`, depending on whether\n * it's already there.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Mixed} mark\n */\n\nCommands.toggleMarkAtRange = (editor, range, mark) => {\n  if (range.isCollapsed) return\n\n  mark = Mark.create(mark)\n\n  const { value } = editor\n  const { document } = value\n  const marks = document.getActiveMarksAtRange(range)\n  const exists = marks.some(m => m.equals(mark))\n\n  if (exists) {\n    editor.removeMarkAtRange(range, mark)\n  } else {\n    editor.addMarkAtRange(range, mark)\n  }\n}\n\n/**\n * Unwrap all of the block nodes in a `range` from a block with `properties`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {String|Object} properties\n */\n\nCommands.unwrapBlockAtRange = (editor, range, properties) => {\n  properties = Node.createProperties(properties)\n\n  const { value } = editor\n  let { document } = value\n  const blocks = document.getLeafBlocksAtRange(range)\n  const wrappers = blocks\n    .map(block => {\n      return document.getClosest(block.key, parent => {\n        if (parent.object !== 'block') return false\n        if (properties.type != null && parent.type !== properties.type)\n          return false\n        if (properties.data != null && !parent.data.isSuperset(properties.data))\n          return false\n        return true\n      })\n    })\n    .filter(exists => exists)\n    .toOrderedSet()\n    .toList()\n\n  editor.withoutNormalizing(() => {\n    wrappers.forEach(block => {\n      const first = block.nodes.first()\n      const last = block.nodes.last()\n      const parent = editor.value.document.getParent(block.key)\n      const index = parent.nodes.indexOf(block)\n\n      const children = block.nodes.filter(child => {\n        return blocks.some(b => child === b || child.hasDescendant(b.key))\n      })\n\n      const firstMatch = children.first()\n      const lastMatch = children.last()\n\n      if (first === firstMatch && last === lastMatch) {\n        block.nodes.forEach((child, i) => {\n          editor.moveNodeByKey(child.key, parent.key, index + i)\n        })\n\n        editor.removeNodeByKey(block.key)\n      } else if (last === lastMatch) {\n        block.nodes.skipUntil(n => n === firstMatch).forEach((child, i) => {\n          editor.moveNodeByKey(child.key, parent.key, index + 1 + i)\n        })\n      } else if (first === firstMatch) {\n        block.nodes\n          .takeUntil(n => n === lastMatch)\n          .push(lastMatch)\n          .forEach((child, i) => {\n            editor.moveNodeByKey(child.key, parent.key, index + i)\n          })\n      } else {\n        const firstText = firstMatch.getFirstText()\n\n        editor.splitDescendantsByKey(block.key, firstText.key, 0)\n\n        document = editor.value.document\n\n        children.forEach((child, i) => {\n          if (i === 0) {\n            const extra = child\n            child = document.getNextBlock(child.key)\n            editor.removeNodeByKey(extra.key)\n          }\n\n          editor.moveNodeByKey(child.key, parent.key, index + 1 + i)\n        })\n      }\n    })\n  })\n}\n\n/**\n * Unwrap the inline nodes in a `range` from an inline with `properties`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {String|Object} properties\n */\n\nCommands.unwrapInlineAtRange = (editor, range, properties) => {\n  properties = Node.createProperties(properties)\n\n  const { value } = editor\n  const { document } = value\n  const texts = document.getTextsAtRange(range)\n  const inlines = texts\n    .map(text => {\n      return document.getClosest(text.key, parent => {\n        if (parent.object !== 'inline') return false\n        if (properties.type != null && parent.type !== properties.type)\n          return false\n        if (properties.data != null && !parent.data.isSuperset(properties.data))\n          return false\n        return true\n      })\n    })\n    .filter(exists => exists)\n    .toOrderedSet()\n    .toList()\n\n  editor.withoutNormalizing(() => {\n    inlines.forEach(inline => {\n      const parent = editor.value.document.getParent(inline.key)\n      const index = parent.nodes.indexOf(inline)\n\n      inline.nodes.forEach((child, i) => {\n        editor.moveNodeByKey(child.key, parent.key, index + i)\n      })\n\n      editor.removeNodeByKey(inline.key)\n    })\n  })\n}\n\n/**\n * Wrap all of the blocks in a `range` in a new `block`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Block|Object|String} block\n */\n\nCommands.wrapBlockAtRange = (editor, range, block) => {\n  block = Block.create(block)\n  block = block.set('nodes', block.nodes.clear())\n\n  const { value } = editor\n  const { document } = value\n\n  const blocks = document.getLeafBlocksAtRange(range)\n  const firstblock = blocks.first()\n  const lastblock = blocks.last()\n  let parent, siblings, index\n\n  // If there is only one block in the selection then we know the parent and\n  // siblings.\n  if (blocks.length === 1) {\n    parent = document.getParent(firstblock.key)\n    siblings = blocks\n  } else {\n    // Determine closest shared parent to all blocks in selection.\n    parent = document.getClosest(firstblock.key, p1 => {\n      return !!document.getClosest(lastblock.key, p2 => p1 === p2)\n    })\n  }\n\n  // If no shared parent could be found then the parent is the document.\n  if (parent == null) parent = document\n\n  // Create a list of direct children siblings of parent that fall in the\n  // selection.\n  if (siblings == null) {\n    const indexes = parent.nodes.reduce((ind, node, i) => {\n      if (node === firstblock || node.hasDescendant(firstblock.key)) ind[0] = i\n      if (node === lastblock || node.hasDescendant(lastblock.key)) ind[1] = i\n      return ind\n    }, [])\n\n    index = indexes[0]\n    siblings = parent.nodes.slice(indexes[0], indexes[1] + 1)\n  }\n\n  // Get the index to place the new wrapped node at.\n  if (index == null) {\n    index = parent.nodes.indexOf(siblings.first())\n  }\n\n  editor.withoutNormalizing(() => {\n    // Inject the new block node into the parent.\n    editor.insertNodeByKey(parent.key, index, block)\n\n    // Move the sibling nodes into the new block node.\n    siblings.forEach((node, i) => {\n      editor.moveNodeByKey(node.key, block.key, i)\n    })\n  })\n}\n\n/**\n * Wrap the text and inlines in a `range` in a new `inline`.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {Inline|Object|String} inline\n */\n\nCommands.wrapInlineAtRange = (editor, range, inline) => {\n  const { value } = editor\n  let { document } = value\n  const { start, end } = range\n\n  if (range.isCollapsed) {\n    // Wrapping an inline void\n    const inlineParent = document.getClosestInline(start.key)\n\n    if (!inlineParent) {\n      return\n    }\n\n    if (!editor.isVoid(inlineParent)) {\n      return\n    }\n\n    return editor.wrapInlineByKey(inlineParent.key, inline)\n  }\n\n  inline = Inline.create(inline)\n  inline = inline.set('nodes', inline.nodes.clear())\n\n  const blocks = document.getLeafBlocksAtRange(range)\n  let startBlock = document.getClosestBlock(start.key)\n  let endBlock = document.getClosestBlock(end.key)\n  const startInline = document.getClosestInline(start.key)\n  const endInline = document.getClosestInline(end.key)\n  let startChild = startBlock.getFurthestAncestor(start.key)\n  let endChild = endBlock.getFurthestAncestor(end.key)\n\n  editor.withoutNormalizing(() => {\n    if (!startInline || startInline !== endInline) {\n      editor.splitDescendantsByKey(endChild.key, end.key, end.offset)\n      editor.splitDescendantsByKey(startChild.key, start.key, start.offset)\n    }\n\n    document = editor.value.document\n    startBlock = document.getDescendant(startBlock.key)\n    endBlock = document.getDescendant(endBlock.key)\n    startChild = startBlock.getFurthestAncestor(start.key)\n    endChild = endBlock.getFurthestAncestor(end.key)\n    const startIndex = startBlock.nodes.indexOf(startChild)\n    const endIndex = endBlock.nodes.indexOf(endChild)\n\n    if (startInline && startInline === endInline) {\n      const text = startBlock\n        .getTextsAtRange(range)\n        .get(0)\n        .splitText(start.offset)[1]\n        .splitText(end.offset - start.offset)[0]\n\n      inline = inline.set('nodes', List([text]))\n      editor.insertInlineAtRange(range, inline)\n\n      const inlinekey = inline.getFirstText().key\n      const rng = {\n        anchor: {\n          key: inlinekey,\n          offset: 0,\n        },\n        focus: {\n          key: inlinekey,\n          offset: end.offset - start.offset,\n        },\n        isFocused: true,\n      }\n      editor.select(rng)\n    } else if (startBlock === endBlock) {\n      document = editor.value.document\n      startBlock = document.getClosestBlock(start.key)\n      startChild = startBlock.getFurthestAncestor(start.key)\n\n      const startInner = document.getNextSibling(startChild.key)\n      const startInnerIndex = startBlock.nodes.indexOf(startInner)\n      const endInner =\n        start.key === end.key\n          ? startInner\n          : startBlock.getFurthestAncestor(end.key)\n      const inlines = startBlock.nodes\n        .skipUntil(n => n === startInner)\n        .takeUntil(n => n === endInner)\n        .push(endInner)\n\n      const node = inline.regenerateKey()\n\n      editor.insertNodeByKey(startBlock.key, startInnerIndex, node)\n\n      inlines.forEach((child, i) => {\n        editor.moveNodeByKey(child.key, node.key, i)\n      })\n    } else {\n      const startInlines = startBlock.nodes.slice(startIndex + 1)\n      const endInlines = endBlock.nodes.slice(0, endIndex + 1)\n      const startNode = inline.regenerateKey()\n      const endNode = inline.regenerateKey()\n\n      editor.insertNodeByKey(startBlock.key, startIndex + 1, startNode)\n      editor.insertNodeByKey(endBlock.key, endIndex, endNode)\n\n      startInlines.forEach((child, i) => {\n        editor.moveNodeByKey(child.key, startNode.key, i)\n      })\n\n      endInlines.forEach((child, i) => {\n        editor.moveNodeByKey(child.key, endNode.key, i)\n      })\n\n      blocks.slice(1, -1).forEach(block => {\n        const node = inline.regenerateKey()\n        editor.insertNodeByKey(block.key, 0, node)\n\n        block.nodes.forEach((child, i) => {\n          editor.moveNodeByKey(child.key, node.key, i)\n        })\n      })\n    }\n  })\n}\n\n/**\n * Wrap the text in a `range` in a prefix/suffix.\n *\n * @param {Editor} editor\n * @param {Range} range\n * @param {String} prefix\n * @param {String} suffix (optional)\n */\n\nCommands.wrapTextAtRange = (editor, range, prefix, suffix = prefix) => {\n  const { start, end } = range\n  const startRange = range.moveToStart()\n  let endRange = range.moveToEnd()\n\n  if (start.key === end.key) {\n    endRange = endRange.moveForward(prefix.length)\n  }\n\n  editor.withoutNormalizing(() => {\n    editor.insertTextAtRange(startRange, prefix, [])\n    editor.insertTextAtRange(endRange, suffix, [])\n  })\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Commands\n","import pick from 'lodash/pick'\nimport Block from '../models/block'\nimport Inline from '../models/inline'\nimport Mark from '../models/mark'\nimport Node from '../models/node'\nimport PathUtils from '../utils/path-utils'\n\n/**\n * Commands.\n *\n * @type {Object}\n */\n\nconst Commands = {}\n\n/**\n * Add mark to text at `offset` and `length` in node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} offset\n * @param {Number} length\n * @param {Mixed} mark\n */\n\nCommands.addMarkByPath = (editor, path, offset, length, mark) => {\n  mark = Mark.create(mark)\n  const { value } = editor\n  const { document } = value\n  const node = document.assertNode(path)\n  const leaves = node.getLeaves()\n\n  const operations = []\n  const bx = offset\n  const by = offset + length\n  let o = 0\n\n  leaves.forEach(leaf => {\n    const ax = o\n    const ay = ax + leaf.text.length\n\n    o += leaf.text.length\n\n    // If the leaf doesn't overlap with the operation, continue on.\n    if (ay < bx || by < ax) return\n\n    // If the leaf already has the mark, continue on.\n    if (leaf.marks.has(mark)) return\n\n    // Otherwise, determine which offset and characters overlap.\n    const start = Math.max(ax, bx)\n    const end = Math.min(ay, by)\n\n    operations.push({\n      type: 'add_mark',\n      path,\n      offset: start,\n      length: end - start,\n      mark,\n    })\n  })\n\n  operations.forEach(op => editor.applyOperation(op))\n}\n\n/**\n * Insert a `fragment` at `index` in a node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} index\n * @param {Fragment} fragment\n */\n\nCommands.insertFragmentByPath = (editor, path, index, fragment) => {\n  fragment.nodes.forEach((node, i) => {\n    editor.insertNodeByPath(path, index + i, node)\n  })\n}\n\n/**\n * Insert a `node` at `index` in a node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} index\n * @param {Node} node\n */\n\nCommands.insertNodeByPath = (editor, path, index, node) => {\n  editor.applyOperation({\n    type: 'insert_node',\n    path: path.concat(index),\n    node,\n  })\n}\n\n/**\n * Insert `text` at `offset` in node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} offset\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n */\n\nCommands.insertTextByPath = (editor, path, offset, text, marks) => {\n  const { value } = editor\n  const { decorations, document } = value\n  const node = document.assertNode(path)\n  marks = marks || node.getMarksAtIndex(offset)\n\n  let updated = false\n  const { key } = node\n\n  const decs = decorations.filter(dec => {\n    const { start, end, mark } = dec\n    const isAtomic = editor.isAtomic(mark)\n    if (!isAtomic) return true\n    if (start.key !== key) return true\n\n    if (start.offset < offset && (end.key !== key || end.offset > offset)) {\n      updated = true\n      return false\n    }\n\n    return true\n  })\n\n  if (updated) {\n    editor.setDecorations(decs)\n  }\n\n  editor.applyOperation({\n    type: 'insert_text',\n    path,\n    offset,\n    text,\n    marks,\n  })\n}\n\n/**\n * Merge a node by `path` with the previous node.\n *\n * @param {Editor} editor\n * @param {Array} path\n */\n\nCommands.mergeNodeByPath = (editor, path) => {\n  const { value } = editor\n  const { document } = value\n  const original = document.getDescendant(path)\n  const previous = document.getPreviousSibling(path)\n\n  if (!previous) {\n    throw new Error(\n      `Unable to merge node with path \"${path}\", because it has no previous sibling.`\n    )\n  }\n\n  const position =\n    previous.object === 'text' ? previous.text.length : previous.nodes.size\n\n  editor.applyOperation({\n    type: 'merge_node',\n    path,\n    position,\n    // for undos to succeed we only need the type and data because\n    // these are the only properties that get changed in the merge operation\n    properties: {\n      type: original.type,\n      data: original.data,\n    },\n    target: null,\n  })\n}\n\n/**\n * Move a node by `path` to a new parent by `newParentPath` and `newIndex`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {String} newParentPath\n * @param {Number} newIndex\n */\n\nCommands.moveNodeByPath = (editor, path, newParentPath, newIndex) => {\n  // If the operation path and newParentPath are the same,\n  // this should be considered a NOOP\n  if (PathUtils.isEqual(path, newParentPath)) {\n    return editor\n  }\n\n  const newPath = newParentPath.concat(newIndex)\n\n  if (PathUtils.isEqual(path, newPath)) {\n    return editor\n  }\n\n  editor.applyOperation({\n    type: 'move_node',\n    path,\n    newPath,\n  })\n}\n\n/**\n * Remove mark from text at `offset` and `length` in node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} offset\n * @param {Number} length\n * @param {Mark} mark\n */\n\nCommands.removeMarkByPath = (editor, path, offset, length, mark) => {\n  mark = Mark.create(mark)\n  const { value } = editor\n  const { document } = value\n  const node = document.assertNode(path)\n  const leaves = node.getLeaves()\n\n  const operations = []\n  const bx = offset\n  const by = offset + length\n  let o = 0\n\n  leaves.forEach(leaf => {\n    const ax = o\n    const ay = ax + leaf.text.length\n\n    o += leaf.text.length\n\n    // If the leaf doesn't overlap with the operation, continue on.\n    if (ay < bx || by < ax) return\n\n    // If the leaf already has the mark, continue on.\n    if (!leaf.marks.has(mark)) return\n\n    // Otherwise, determine which offset and characters overlap.\n    const start = Math.max(ax, bx)\n    const end = Math.min(ay, by)\n\n    operations.push({\n      type: 'remove_mark',\n      path,\n      offset: start,\n      length: end - start,\n      mark,\n    })\n  })\n\n  operations.forEach(op => editor.applyOperation(op))\n}\n\n/**\n * Remove all `marks` from node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n */\n\nCommands.removeAllMarksByPath = (editor, path) => {\n  const { state } = editor\n  const { document } = state\n  const node = document.assertNode(path)\n  const texts = node.object === 'text' ? [node] : node.getTextsAsArray()\n\n  texts.forEach(text => {\n    text.getMarksAsArray().forEach(mark => {\n      editor.removeMarkByKey(text.key, 0, text.text.length, mark)\n    })\n  })\n}\n\n/**\n * Remove a node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n */\n\nCommands.removeNodeByPath = (editor, path) => {\n  const { value } = editor\n  const { document } = value\n  const node = document.assertNode(path)\n\n  editor.applyOperation({\n    type: 'remove_node',\n    path,\n    node,\n  })\n}\n\n/**\n * Remove text at `offset` and `length` in node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} offset\n * @param {Number} length\n */\n\nCommands.removeTextByPath = (editor, path, offset, length) => {\n  const { value } = editor\n  const { decorations, document } = value\n  const node = document.assertNode(path)\n  const leaves = node.getLeaves()\n  const { text } = node\n\n  let updated = false\n  const { key } = node\n  const from = offset\n  const to = offset + length\n\n  const decs = decorations.filter(dec => {\n    const { start, end, mark } = dec\n    const isAtomic = editor.isAtomic(mark)\n    if (!isAtomic) return true\n    if (start.key !== key) return true\n\n    if (start.offset < from && (end.key !== key || end.offset > from)) {\n      updated = true\n      return false\n    }\n\n    if (start.offset < to && (end.key !== key || end.offset > to)) {\n      updated = true\n      return null\n    }\n\n    return true\n  })\n\n  if (updated) {\n    editor.setDecorations(decs)\n  }\n\n  const removals = []\n  const bx = offset\n  const by = offset + length\n  let o = 0\n\n  leaves.forEach(leaf => {\n    const ax = o\n    const ay = ax + leaf.text.length\n\n    o += leaf.text.length\n\n    // If the leaf doesn't overlap with the removal, continue on.\n    if (ay < bx || by < ax) return\n\n    // Otherwise, determine which offset and characters overlap.\n    const start = Math.max(ax, bx)\n    const end = Math.min(ay, by)\n    const string = text.slice(start, end)\n\n    removals.push({\n      type: 'remove_text',\n      path,\n      offset: start,\n      text: string,\n      marks: leaf.marks,\n    })\n  })\n\n  // Apply in reverse order, so subsequent removals don't impact previous ones.\n  removals.reverse().forEach(op => editor.applyOperation(op))\n}\n\n/**\n`* Replace a `node` with another `node`\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Object|Node} node\n */\n\nCommands.replaceNodeByPath = (editor, path, newNode) => {\n  newNode = Node.create(newNode)\n  const index = path.last()\n  const parentPath = PathUtils.lift(path)\n\n  editor.withoutNormalizing(() => {\n    editor.removeNodeByPath(path)\n    editor.insertNodeByPath(parentPath, index, newNode)\n  })\n}\n\n/**\n * Replace A Length of Text with another string or text\n * @param {Editor} editor\n * @param {String} key\n * @param {Number} offset\n * @param {Number} length\n * @param {string} text\n * @param {Set<Mark>} marks (optional)\n */\n\nCommands.replaceTextByPath = (editor, path, offset, length, text, marks) => {\n  const { document } = editor.value\n  const node = document.assertNode(path)\n\n  if (length + offset > node.text.length) {\n    length = node.text.length - offset\n  }\n\n  const range = document.createRange({\n    anchor: { path, offset },\n    focus: { path, offset: offset + length },\n  })\n\n  let activeMarks = document.getActiveMarksAtRange(range)\n\n  editor.withoutNormalizing(() => {\n    editor.removeTextByPath(path, offset, length)\n\n    if (!marks) {\n      // Do not use mark at index when marks and activeMarks are both empty\n      marks = activeMarks ? activeMarks : []\n    } else if (activeMarks) {\n      // Do not use `has` because we may want to reset marks like font-size with\n      // an updated data;\n      activeMarks = activeMarks.filter(\n        activeMark => !marks.find(m => activeMark.type === m.type)\n      )\n\n      marks = activeMarks.merge(marks)\n    }\n\n    editor.insertTextByPath(path, offset, text, marks)\n  })\n}\n\n/**\n * Set `newProperties` on mark on text at `offset` and `length` in node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} offset\n * @param {Number} length\n * @param {Object|Mark} properties\n * @param {Object} newProperties\n */\n\nCommands.setMarkByPath = (\n  editor,\n  path,\n  offset,\n  length,\n  properties,\n  newProperties\n) => {\n  // we call Mark.create() here because we need the complete previous mark instance\n  properties = Mark.create(properties)\n  newProperties = Mark.createProperties(newProperties)\n\n  editor.applyOperation({\n    type: 'set_mark',\n    path,\n    offset,\n    length,\n    properties,\n    newProperties,\n  })\n}\n\n/**\n * Set `properties` on a node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Object|String} newProperties\n */\n\nCommands.setNodeByPath = (editor, path, newProperties) => {\n  const { value } = editor\n  const { document } = value\n  const node = document.assertNode(path)\n  newProperties = Node.createProperties(newProperties)\n  const prevProperties = pick(node, Object.keys(newProperties))\n\n  editor.applyOperation({\n    type: 'set_node',\n    path,\n    properties: prevProperties,\n    newProperties,\n  })\n}\n\n/**\n * Insert `text` at `offset` in node by `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n */\n\nCommands.setTextByPath = (editor, path, text, marks) => {\n  const { value } = editor\n  const { document } = value\n  const node = document.assertNode(path)\n  const end = node.text.length\n  editor.replaceTextByPath(path, 0, end, text, marks)\n}\n\n/**\n * Split a node by `path` at `position`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Number} position\n * @param {Object} options\n */\n\nCommands.splitNodeByPath = (editor, path, position, options = {}) => {\n  const { target = null } = options\n  const { value } = editor\n  const { document } = value\n  const node = document.getDescendant(path)\n\n  editor.applyOperation({\n    type: 'split_node',\n    path,\n    position,\n    target,\n    properties: {\n      type: node.type,\n      data: node.data,\n    },\n  })\n}\n\n/**\n * Split a node deeply down the tree by `path`, `textPath` and `textOffset`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Array} textPath\n * @param {Number} textOffset\n */\n\nCommands.splitDescendantsByPath = (editor, path, textPath, textOffset) => {\n  if (path.equals(textPath)) {\n    editor.splitNodeByPath(textPath, textOffset)\n    return\n  }\n\n  const { value } = editor\n  const { document } = value\n  const node = document.assertNode(path)\n  const text = document.assertNode(textPath)\n  const ancestors = document.getAncestors(textPath)\n  const nodes = ancestors\n    .skipUntil(a => a.key === node.key)\n    .reverse()\n    .unshift(text)\n\n  let previous\n  let index\n\n  editor.withoutNormalizing(() => {\n    nodes.forEach(n => {\n      const prevIndex = index == null ? null : index\n      index = previous ? n.nodes.indexOf(previous) + 1 : textOffset\n      previous = n\n      editor.splitNodeByKey(n.key, index, { target: prevIndex })\n    })\n  })\n}\n\n/**\n * Unwrap content from an inline parent with `properties`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Object|String} properties\n */\n\nCommands.unwrapInlineByPath = (editor, path, properties) => {\n  const { value } = editor\n  const { document, selection } = value\n  const node = document.assertNode(path)\n  const first = node.getFirstText()\n  const last = node.getLastText()\n  const range = selection.moveToRangeOfNode(first, last)\n  editor.unwrapInlineAtRange(range, properties)\n}\n\n/**\n * Unwrap content from a block parent with `properties`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Object|String} properties\n */\n\nCommands.unwrapBlockByPath = (editor, path, properties) => {\n  const { value } = editor\n  const { document, selection } = value\n  const node = document.assertNode(path)\n  const first = node.getFirstText()\n  const last = node.getLastText()\n  const range = selection.moveToRangeOfNode(first, last)\n  editor.unwrapBlockAtRange(range, properties)\n}\n\n/**\n * Unwrap a single node from its parent.\n *\n * If the node is surrounded with siblings, its parent will be\n * split. If the node is the only child, the parent is removed, and\n * simply replaced by the node itself.  Cannot unwrap a root node.\n *\n * @param {Editor} editor\n * @param {Array} path\n */\n\nCommands.unwrapNodeByPath = (editor, path) => {\n  const { value } = editor\n  const { document } = value\n  document.assertNode(path)\n\n  const parentPath = PathUtils.lift(path)\n  const parent = document.assertNode(parentPath)\n  const index = path.last()\n  const parentIndex = parentPath.last()\n  const grandPath = PathUtils.lift(parentPath)\n  const isFirst = index === 0\n  const isLast = index === parent.nodes.size - 1\n\n  editor.withoutNormalizing(() => {\n    if (parent.nodes.size === 1) {\n      editor.moveNodeByPath(path, grandPath, parentIndex + 1)\n      editor.removeNodeByPath(parentPath)\n    } else if (isFirst) {\n      editor.moveNodeByPath(path, grandPath, parentIndex)\n    } else if (isLast) {\n      editor.moveNodeByPath(path, grandPath, parentIndex + 1)\n    } else {\n      let updatedPath = PathUtils.increment(path, 1, parentPath.size - 1)\n      updatedPath = updatedPath.set(updatedPath.size - 1, 0)\n      editor.splitNodeByPath(parentPath, index)\n      editor.moveNodeByPath(updatedPath, grandPath, parentIndex + 1)\n    }\n  })\n}\n\n/**\n * Unwrap all of the children of a node, by removing the node and replacing it\n * with the children in the tree.\n *\n * @param {Editor} editor\n * @param {Array} path\n */\n\nCommands.unwrapChildrenByPath = (editor, path) => {\n  path = PathUtils.create(path)\n  const { value } = editor\n  const { document } = value\n  const node = document.assertNode(path)\n  const parentPath = PathUtils.lift(path)\n  const index = path.last()\n  const { nodes } = node\n\n  editor.withoutNormalizing(() => {\n    nodes.reverse().forEach((child, i) => {\n      const childIndex = nodes.size - i - 1\n      const childPath = path.push(childIndex)\n      editor.moveNodeByPath(childPath, parentPath, index + 1)\n    })\n\n    editor.removeNodeByPath(path)\n  })\n}\n\n/**\n * Wrap a node in a block with `properties`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Block|Object|String} block\n */\n\nCommands.wrapBlockByPath = (editor, path, block) => {\n  block = Block.create(block)\n  block = block.set('nodes', block.nodes.clear())\n  const parentPath = PathUtils.lift(path)\n  const index = path.last()\n  const newPath = PathUtils.increment(path)\n\n  editor.withoutNormalizing(() => {\n    editor.insertNodeByPath(parentPath, index, block)\n    editor.moveNodeByPath(newPath, path, 0)\n  })\n}\n\n/**\n * Wrap a node in an inline with `properties`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Block|Object|String} inline\n */\n\nCommands.wrapInlineByPath = (editor, path, inline) => {\n  inline = Inline.create(inline)\n  inline = inline.set('nodes', inline.nodes.clear())\n  const parentPath = PathUtils.lift(path)\n  const index = path.last()\n  const newPath = PathUtils.increment(path)\n\n  editor.withoutNormalizing(() => {\n    editor.insertNodeByPath(parentPath, index, inline)\n    editor.moveNodeByPath(newPath, path, 0)\n  })\n}\n\n/**\n * Wrap a node by `path` with `node`.\n *\n * @param {Editor} editor\n * @param {Array} path\n * @param {Node|Object} node\n */\n\nCommands.wrapNodeByPath = (editor, path, node) => {\n  node = Node.create(node)\n\n  if (node.object === 'block') {\n    editor.wrapBlockByPath(path, node)\n  } else if (node.object === 'inline') {\n    editor.wrapInlineByPath(path, node)\n  }\n}\n\n/**\n * Mix in `*ByKey` variants.\n */\n\nconst COMMANDS = [\n  'addMark',\n  'insertFragment',\n  'insertNode',\n  'insertText',\n  'mergeNode',\n  'removeAllMarks',\n  'removeMark',\n  'removeNode',\n  'removeText',\n  'replaceNode',\n  'replaceText',\n  'setMark',\n  'setNode',\n  'setText',\n  'splitNode',\n  'unwrapBlock',\n  'unwrapChildren',\n  'unwrapInline',\n  'unwrapNode',\n  'wrapBlock',\n  'wrapInline',\n  'wrapNode',\n]\n\nfor (const method of COMMANDS) {\n  Commands[`${method}ByKey`] = (editor, key, ...args) => {\n    const { value } = editor\n    const { document } = value\n    const path = document.assertPath(key)\n    editor[`${method}ByPath`](path, ...args)\n  }\n}\n\n// Moving nodes takes two keys, so it's slightly different.\nCommands.moveNodeByKey = (editor, key, newKey, ...args) => {\n  const { value } = editor\n  const { document } = value\n  const path = document.assertPath(key)\n  const newPath = document.assertPath(newKey)\n  editor.moveNodeByPath(path, newPath, ...args)\n}\n\n// Splitting descendants takes two keys, so it's slightly different.\nCommands.splitDescendantsByKey = (editor, key, textKey, ...args) => {\n  const { value } = editor\n  const { document } = value\n  const path = document.assertPath(key)\n  const textPath = document.assertPath(textKey)\n  editor.splitDescendantsByPath(path, textPath, ...args)\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Commands\n","import omit from 'lodash/omit'\nimport { List } from 'immutable'\n\n/**\n * Commands.\n *\n * @type {Object}\n */\n\nconst Commands = {}\n\n/**\n * Save an `operation` into the history.\n *\n * @param {Editor} editor\n * @param {Object} operation\n */\n\nCommands.save = (editor, operation) => {\n  const { operations, value } = editor\n  const { data } = value\n  let { save, merge } = editor.tmp\n  if (save === false) return\n\n  let undos = data.get('undos') || List()\n  const lastBatch = undos.last()\n  const lastOperation = lastBatch && lastBatch.last()\n\n  // If `merge` is non-commital, and this is not the first operation in a new\n  // editor, then merge, otherwise merge based on the last operation.\n  if (merge == null) {\n    if (operations.size !== 0) {\n      merge = true\n    } else {\n      merge = shouldMerge(operation, lastOperation)\n    }\n  }\n\n  // If the `merge` flag is true, add the operation to the last batch.\n  if (merge && lastBatch) {\n    const batch = lastBatch.push(operation)\n    undos = undos.pop()\n    undos = undos.push(batch)\n  } else {\n    // Otherwise, create a new batch with the operation.\n    const batch = List([operation])\n    undos = undos.push(batch)\n  }\n\n  // Constrain the history to 100 entries for memory's sake.\n  if (undos.size > 100) {\n    undos = undos.takeLast(100)\n  }\n\n  // Clear the redos and update the history.\n  editor.withoutSaving(() => {\n    const redos = List()\n    const newData = data.set('undos', undos).set('redos', redos)\n    editor.setData(newData)\n  })\n}\n\n/**\n * Redo to the next value in the history.\n *\n * @param {Editor} editor\n */\n\nCommands.redo = editor => {\n  const { value } = editor\n  const { data } = value\n  let redos = data.get('redos') || List()\n  let undos = data.get('undos') || List()\n  const batch = redos.last()\n  if (!batch) return\n\n  editor.withoutSaving(() => {\n    editor.withoutNormalizing(() => {\n      // Replay the batch of operations.\n      batch.forEach(op => {\n        const { type, properties } = op\n\n        // When the operation mutates the selection, omit its `isFocused` value to\n        // prevent the editor focus from changing during redoing.\n        if (type === 'set_selection') {\n          op = op.set('properties', omit(properties, 'isFocused'))\n        }\n\n        editor.applyOperation(op)\n      })\n\n      // Shift the next value into the undo stack.\n      redos = redos.pop()\n      undos = undos.push(batch)\n      const newData = data.set('undos', undos).set('redos', redos)\n      editor.setData(newData)\n    })\n  })\n}\n\n/**\n * Undo the previous operations in the history.\n *\n * @param {Editor} editor\n */\n\nCommands.undo = editor => {\n  const { value } = editor\n  const { data } = value\n  let redos = data.get('redos') || List()\n  let undos = data.get('undos') || List()\n  const batch = undos.last()\n  if (!batch) return\n\n  editor.withoutSaving(() => {\n    editor.withoutNormalizing(() => {\n      // Replay the inverse of the previous operations.\n      batch\n        .slice()\n        .reverse()\n        .map(op => op.invert())\n        .forEach(inverse => {\n          const { type, properties } = inverse\n\n          // When the operation mutates the selection, omit its `isFocused` value to\n          // prevent the editor focus from changing during undoing.\n          if (type === 'set_selection') {\n            inverse = inverse.set('properties', omit(properties, 'isFocused'))\n          }\n\n          editor.applyOperation(inverse)\n        })\n\n      // Shift the previous operations into the redo stack.\n      redos = redos.push(batch)\n      undos = undos.pop()\n      const newData = data.set('undos', undos).set('redos', redos)\n      editor.setData(newData)\n    })\n  })\n}\n\n/**\n * Apply a series of changes inside a synchronous `fn`, without merging any of\n * the new operations into previous save point in the history.\n *\n * @param {Editor} editor\n * @param {Function} fn\n */\n\nCommands.withoutMerging = (editor, fn) => {\n  const value = editor.tmp.merge\n  editor.tmp.merge = false\n  fn(editor)\n  editor.tmp.merge = value\n}\n\n/**\n * Apply a series of changes inside a synchronous `fn`, without saving any of\n * their operations into the history.\n *\n * @param {Editor} editor\n * @param {Function} fn\n */\n\nCommands.withoutSaving = (editor, fn) => {\n  const value = editor.tmp.save\n  editor.tmp.save = false\n  fn(editor)\n  editor.tmp.save = value\n}\n\n/**\n * Check whether to merge a new operation `o` into the previous operation `p`.\n *\n * @param {Object} o\n * @param {Object} p\n * @return {Boolean}\n */\n\nfunction shouldMerge(o, p) {\n  if (!p) return false\n\n  const merge =\n    (o.type === 'set_selection' && p.type === 'set_selection') ||\n    (o.type === 'insert_text' &&\n      p.type === 'insert_text' &&\n      o.offset === p.offset + p.text.length &&\n      o.path.equals(p.path)) ||\n    (o.type === 'remove_text' &&\n      p.type === 'remove_text' &&\n      o.offset + o.text.length === p.offset &&\n      o.path.equals(p.path))\n\n  return merge\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Commands\n","import { is } from 'immutable'\nimport pick from 'lodash/pick'\n\nimport Selection from '../models/selection'\nimport TextUtils from '../utils/text-utils'\n\nconst Commands = {}\n\nCommands.blur = editor => {\n  editor.select({ isFocused: false })\n}\n\nCommands.deselect = editor => {\n  const range = Selection.create()\n  editor.select(range)\n}\n\nCommands.focus = editor => {\n  editor.select({ isFocused: true })\n}\n\nCommands.flip = editor => {\n  editor.command(proxy, 'flip')\n}\n\nCommands.moveAnchorBackward = (editor, ...args) => {\n  editor.command(pointBackward, 'anchor', ...args)\n}\n\nCommands.moveAnchorWordBackward = (editor, ...args) => {\n  editor.command(pointWordBackward, 'anchor', ...args)\n}\n\nCommands.moveAnchorForward = (editor, ...args) => {\n  editor.command(pointForward, 'anchor', ...args)\n}\n\nCommands.moveAnchorWordForward = (editor, ...args) => {\n  editor.command(pointWordForward, 'anchor', ...args)\n}\n\nCommands.moveAnchorTo = (editor, ...args) => {\n  editor.command(proxy, 'moveAnchorTo', ...args)\n}\n\nCommands.moveAnchorToEndOfBlock = editor => {\n  editor.command(pointEdgeObject, 'anchor', 'end', 'block')\n}\n\nCommands.moveAnchorToEndOfInline = editor => {\n  editor.command(pointEdgeObject, 'anchor', 'end', 'inline')\n}\n\nCommands.moveAnchorToEndOfDocument = editor => {\n  editor.moveAnchorToEndOfNode(editor.value.document).moveToAnchor()\n}\n\nCommands.moveAnchorToEndOfNextBlock = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'end', 'next', 'block')\n}\n\nCommands.moveAnchorToEndOfNextInline = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'end', 'next', 'inline')\n}\n\nCommands.moveAnchorToEndOfNextText = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'end', 'next', 'text')\n}\n\nCommands.moveAnchorToEndOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveAnchorToEndOfNode', ...args)\n}\n\nCommands.moveAnchorToEndOfPreviousBlock = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'end', 'previous', 'block')\n}\n\nCommands.moveAnchorToEndOfPreviousInline = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'end', 'previous', 'inline')\n}\n\nCommands.moveAnchorToEndOfPreviousText = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'end', 'previous', 'text')\n}\n\nCommands.moveAnchorToEndOfText = editor => {\n  editor.command(pointEdgeObject, 'anchor', 'end', 'text')\n}\n\nCommands.moveAnchorToStartOfBlock = editor => {\n  editor.command(pointEdgeObject, 'anchor', 'start', 'block')\n}\n\nCommands.moveAnchorToStartOfDocument = editor => {\n  editor.moveAnchorToStartOfNode(editor.value.document).moveToAnchor()\n}\n\nCommands.moveAnchorToStartOfInline = editor => {\n  editor.command(pointEdgeObject, 'anchor', 'start', 'inline')\n}\n\nCommands.moveAnchorToStartOfNextBlock = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'start', 'next', 'block')\n}\n\nCommands.moveAnchorToStartOfNextInline = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'start', 'next', 'inline')\n}\n\nCommands.moveAnchorToStartOfNextText = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'start', 'next', 'text')\n}\n\nCommands.moveAnchorToStartOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveAnchorToStartOfNode', ...args)\n}\n\nCommands.moveAnchorToStartOfPreviousBlock = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'start', 'previous', 'block')\n}\n\nCommands.moveAnchorToStartOfPreviousInline = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'start', 'previous', 'inline')\n}\n\nCommands.moveAnchorToStartOfPreviousText = editor => {\n  editor.command(pointEdgeSideObject, 'anchor', 'start', 'previous', 'text')\n}\n\nCommands.moveAnchorToStartOfText = editor => {\n  editor.command(pointEdgeObject, 'anchor', 'start', 'text')\n}\n\nCommands.moveBackward = (editor, ...args) => {\n  editor.moveAnchorBackward(...args).moveFocusBackward(...args)\n}\n\nCommands.moveWordBackward = (editor, ...args) => {\n  editor.moveFocusWordBackward(...args).moveToFocus()\n}\n\nCommands.moveEndBackward = (editor, ...args) => {\n  editor.command(pointBackward, 'end', ...args)\n}\n\nCommands.moveEndWordBackward = (editor, ...args) => {\n  editor.command(pointWordBackward, 'end', ...args)\n}\n\nCommands.moveEndForward = (editor, ...args) => {\n  editor.command(pointForward, 'end', ...args)\n}\n\nCommands.moveEndWordForward = (editor, ...args) => {\n  editor.command(pointWordForward, 'end', ...args)\n}\n\nCommands.moveEndTo = (editor, ...args) => {\n  editor.command(proxy, 'moveEndTo', ...args)\n}\n\nCommands.moveEndToEndOfBlock = editor => {\n  editor.command(pointEdgeObject, 'end', 'end', 'block')\n}\n\nCommands.moveEndToEndOfDocument = editor => {\n  editor.moveEndToEndOfNode(editor.value.document).moveToEnd()\n}\n\nCommands.moveEndToEndOfInline = editor => {\n  editor.command(pointEdgeObject, 'end', 'end', 'inline')\n}\n\nCommands.moveEndToEndOfNextBlock = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'end', 'next', 'block')\n}\n\nCommands.moveEndToEndOfNextInline = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'end', 'next', 'inline')\n}\n\nCommands.moveEndToEndOfNextText = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'end', 'next', 'text')\n}\n\nCommands.moveEndToEndOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveEndToEndOfNode', ...args)\n}\n\nCommands.moveEndToEndOfPreviousBlock = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'end', 'previous', 'block')\n}\n\nCommands.moveEndToEndOfPreviousInline = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'end', 'previous', 'inline')\n}\n\nCommands.moveEndToEndOfPreviousText = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'end', 'previous', 'text')\n}\n\nCommands.moveEndToEndOfText = editor => {\n  editor.command(pointEdgeObject, 'end', 'end', 'text')\n}\n\nCommands.moveEndToStartOfBlock = editor => {\n  editor.command(pointEdgeObject, 'end', 'start', 'block')\n}\n\nCommands.moveEndToStartOfDocument = editor => {\n  editor.moveEndToStartOfNode(editor.value.document).moveToEnd()\n}\n\nCommands.moveEndToStartOfInline = editor => {\n  editor.command(pointEdgeObject, 'end', 'start', 'inline')\n}\n\nCommands.moveEndToStartOfNextBlock = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'start', 'next', 'block')\n}\n\nCommands.moveEndToStartOfNextInline = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'start', 'next', 'inline')\n}\n\nCommands.moveEndToStartOfNextText = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'start', 'next', 'text')\n}\n\nCommands.moveEndToStartOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveEndToStartOfNode', ...args)\n}\n\nCommands.moveEndToStartOfPreviousBlock = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'start', 'previous', 'block')\n}\n\nCommands.moveEndToStartOfPreviousInline = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'start', 'previous', 'inline')\n}\n\nCommands.moveEndToStartOfPreviousText = editor => {\n  editor.command(pointEdgeSideObject, 'end', 'start', 'previous', 'text')\n}\n\nCommands.moveEndToStartOfText = editor => {\n  editor.command(pointEdgeObject, 'end', 'start', 'text')\n}\n\nCommands.moveFocusBackward = (editor, ...args) => {\n  editor.command(pointBackward, 'focus', ...args)\n}\n\nCommands.moveFocusWordBackward = (editor, ...args) => {\n  editor.command(pointWordBackward, 'focus', ...args)\n}\n\nCommands.moveFocusForward = (editor, ...args) => {\n  editor.command(pointForward, 'focus', ...args)\n}\n\nCommands.moveFocusWordForward = (editor, ...args) => {\n  editor.command(pointWordForward, 'focus', ...args)\n}\n\nCommands.moveFocusTo = (editor, ...args) => {\n  editor.command(proxy, 'moveFocusTo', ...args)\n}\n\nCommands.moveFocusToEndOfBlock = editor => {\n  editor.command(pointEdgeObject, 'focus', 'end', 'block')\n}\n\nCommands.moveFocusToEndOfDocument = editor => {\n  editor.moveFocusToEndOfNode(editor.value.document).moveToFocus()\n}\n\nCommands.moveFocusToEndOfInline = editor => {\n  editor.command(pointEdgeObject, 'focus', 'end', 'inline')\n}\n\nCommands.moveFocusToEndOfNextBlock = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'end', 'next', 'block')\n}\n\nCommands.moveFocusToEndOfNextInline = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'end', 'next', 'inline')\n}\n\nCommands.moveFocusToEndOfNextText = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'end', 'next', 'text')\n}\n\nCommands.moveFocusToEndOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveFocusToEndOfNode', ...args)\n}\n\nCommands.moveFocusToEndOfPreviousBlock = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'end', 'previous', 'block')\n}\n\nCommands.moveFocusToEndOfPreviousInline = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'end', 'previous', 'inline')\n}\n\nCommands.moveFocusToEndOfPreviousText = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'end', 'previous', 'text')\n}\n\nCommands.moveFocusToEndOfText = editor => {\n  editor.command(pointEdgeObject, 'focus', 'end', 'text')\n}\n\nCommands.moveFocusToStartOfBlock = editor => {\n  editor.command(pointEdgeObject, 'focus', 'start', 'block')\n}\n\nCommands.moveFocusToStartOfDocument = editor => {\n  editor.moveFocusToStartOfNode(editor.value.document).moveToFocus()\n}\n\nCommands.moveFocusToStartOfInline = editor => {\n  editor.command(pointEdgeObject, 'focus', 'start', 'inline')\n}\n\nCommands.moveFocusToStartOfNextBlock = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'start', 'next', 'block')\n}\n\nCommands.moveFocusToStartOfNextInline = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'start', 'next', 'inline')\n}\n\nCommands.moveFocusToStartOfNextText = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'start', 'next', 'text')\n}\n\nCommands.moveFocusToStartOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveFocusToStartOfNode', ...args)\n}\n\nCommands.moveFocusToStartOfPreviousBlock = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'start', 'previous', 'block')\n}\n\nCommands.moveFocusToStartOfPreviousInline = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'start', 'previous', 'inline')\n}\n\nCommands.moveFocusToStartOfPreviousText = editor => {\n  editor.command(pointEdgeSideObject, 'focus', 'start', 'previous', 'text')\n}\n\nCommands.moveFocusToStartOfText = editor => {\n  editor.command(pointEdgeObject, 'focus', 'start', 'text')\n}\n\nCommands.moveForward = (editor, ...args) => {\n  editor.moveAnchorForward(...args).moveFocusForward(...args)\n}\n\nCommands.moveWordForward = (editor, ...args) => {\n  editor.moveFocusWordForward(...args).moveToFocus(...args)\n}\n\nCommands.moveStartBackward = (editor, ...args) => {\n  editor.command(pointBackward, 'start', ...args)\n}\n\nCommands.moveStartWordBackward = (editor, ...args) => {\n  editor.command(pointWordBackward, 'start', ...args)\n}\n\nCommands.moveStartForward = (editor, ...args) => {\n  editor.command(pointForward, 'start', ...args)\n}\n\nCommands.moveStartWordForward = (editor, ...args) => {\n  editor.command(pointWordForward, 'start', ...args)\n}\n\nCommands.moveStartTo = (editor, ...args) => {\n  editor.command(proxy, 'moveStartTo', ...args)\n}\n\nCommands.moveStartToEndOfBlock = editor => {\n  editor.command(pointEdgeObject, 'start', 'end', 'block')\n}\n\nCommands.moveStartToEndOfDocument = editor => {\n  editor.moveStartToEndOfNode(editor.value.document).moveToStart()\n}\n\nCommands.moveStartToEndOfInline = editor => {\n  editor.command(pointEdgeObject, 'start', 'end', 'inline')\n}\n\nCommands.moveStartToEndOfNextBlock = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'end', 'next', 'block')\n}\n\nCommands.moveStartToEndOfNextInline = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'end', 'next', 'inline')\n}\n\nCommands.moveStartToEndOfNextText = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'end', 'next', 'text')\n}\n\nCommands.moveStartToEndOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveStartToEndOfNode', ...args)\n}\n\nCommands.moveStartToEndOfPreviousBlock = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'end', 'previous', 'block')\n}\n\nCommands.moveStartToEndOfPreviousInline = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'end', 'previous', 'inline')\n}\n\nCommands.moveStartToEndOfPreviousText = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'end', 'previous', 'text')\n}\n\nCommands.moveStartToEndOfText = editor => {\n  editor.command(pointEdgeObject, 'start', 'end', 'text')\n}\n\nCommands.moveStartToStartOfBlock = editor => {\n  editor.command(pointEdgeObject, 'start', 'start', 'block')\n}\n\nCommands.moveStartToStartOfDocument = editor => {\n  editor.moveStartToStartOfNode(editor.value.document).moveToStart()\n}\n\nCommands.moveStartToStartOfInline = editor => {\n  editor.command(pointEdgeObject, 'start', 'start', 'inline')\n}\n\nCommands.moveStartToStartOfNextBlock = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'start', 'next', 'block')\n}\n\nCommands.moveStartToStartOfNextInline = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'start', 'next', 'inline')\n}\n\nCommands.moveStartToStartOfNextText = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'start', 'next', 'text')\n}\n\nCommands.moveStartToStartOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveStartToStartOfNode', ...args)\n}\n\nCommands.moveStartToStartOfPreviousBlock = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'start', 'previous', 'block')\n}\n\nCommands.moveStartToStartOfPreviousInline = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'start', 'previous', 'inline')\n}\n\nCommands.moveStartToStartOfPreviousText = editor => {\n  editor.command(pointEdgeSideObject, 'start', 'start', 'previous', 'text')\n}\n\nCommands.moveStartToStartOfText = editor => {\n  editor.command(pointEdgeObject, 'start', 'start', 'text')\n}\n\nCommands.moveTo = (editor, ...args) => {\n  editor.command(proxy, 'moveTo', ...args)\n}\n\nCommands.moveToAnchor = editor => {\n  editor.command(proxy, 'moveToAnchor')\n}\n\nCommands.moveToEnd = editor => {\n  editor.command(proxy, 'moveToEnd')\n}\n\nCommands.moveToEndOfBlock = editor => {\n  editor.moveEndToEndOfBlock().moveToEnd()\n}\n\nCommands.moveToEndOfDocument = editor => {\n  editor.moveEndToEndOfNode(editor.value.document).moveToEnd()\n}\n\nCommands.moveToEndOfInline = editor => {\n  editor.moveEndToEndOfInline().moveToEnd()\n}\n\nCommands.moveToEndOfNextBlock = editor => {\n  editor.moveEndToEndOfNextBlock().moveToEnd()\n}\n\nCommands.moveToEndOfNextInline = editor => {\n  editor.moveEndToEndOfNextInline().moveToEnd()\n}\n\nCommands.moveToEndOfNextText = editor => {\n  editor.moveEndToEndOfNextText().moveToEnd()\n}\n\nCommands.moveToEndOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveToEndOfNode', ...args)\n}\n\nCommands.moveToEndOfPreviousBlock = editor => {\n  editor.moveStartToEndOfPreviousBlock().moveToStart()\n}\n\nCommands.moveToEndOfPreviousInline = editor => {\n  editor.moveStartToEndOfPreviousInline().moveToStart()\n}\n\nCommands.moveToEndOfPreviousText = editor => {\n  editor.moveStartToEndOfPreviousText().moveToStart()\n}\n\nCommands.moveToEndOfText = editor => {\n  editor.moveEndToEndOfText().moveToEnd()\n}\n\nCommands.moveToFocus = editor => {\n  editor.command(proxy, 'moveToFocus')\n}\n\nCommands.moveToRangeOfDocument = editor => {\n  editor.moveToRangeOfNode(editor.value.document)\n}\n\nCommands.moveToRangeOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveToRangeOfNode', ...args)\n}\n\nCommands.moveToStart = editor => {\n  editor.command(proxy, 'moveToStart')\n}\n\nCommands.moveToStartOfBlock = editor => {\n  editor.moveStartToStartOfBlock().moveToStart()\n}\n\nCommands.moveToStartOfDocument = editor => {\n  editor.moveStartToStartOfNode(editor.value.document).moveToStart()\n}\n\nCommands.moveToStartOfInline = editor => {\n  editor.moveStartToStartOfInline().moveToStart()\n}\n\nCommands.moveToStartOfNextBlock = editor => {\n  editor.moveEndToStartOfNextBlock().moveToEnd()\n}\n\nCommands.moveToStartOfNextInline = editor => {\n  editor.moveEndToStartOfNextInline().moveToEnd()\n}\n\nCommands.moveToStartOfNextText = editor => {\n  editor.moveEndToStartOfNextText().moveToEnd()\n}\n\nCommands.moveToStartOfNode = (editor, ...args) => {\n  editor.command(proxy, 'moveToStartOfNode', ...args)\n}\n\nCommands.moveToStartOfPreviousBlock = editor => {\n  editor.moveStartToStartOfPreviousBlock().moveToStart()\n}\n\nCommands.moveToStartOfPreviousInline = editor => {\n  editor.moveStartToStartOfPreviousInline().moveToStart()\n}\n\nCommands.moveToStartOfPreviousText = editor => {\n  editor.moveStartToStartOfPreviousText().moveToStart()\n}\n\nCommands.moveToStartOfText = editor => {\n  editor.moveStartToStartOfText().moveToStart()\n}\n\nCommands.select = (editor, properties, options = {}) => {\n  properties = Selection.createProperties(properties)\n  const { snapshot = false } = options\n  const { value } = editor\n  const { document, selection } = value\n  const newProperties = {}\n  let next = selection.setProperties(properties)\n  next = document.resolveSelection(next)\n\n  // Re-compute the properties, to ensure that we get their normalized values.\n  properties = pick(next, Object.keys(properties))\n\n  // Remove any properties that are already equal to the current selection. And\n  // create a dictionary of the previous values for all of the properties that\n  // are being changed, for the inverse operation.\n  for (const k in properties) {\n    if (snapshot === true || !is(properties[k], selection[k])) {\n      newProperties[k] = properties[k]\n    }\n  }\n\n  // If the selection moves, clear any marks, unless the new selection\n  // properties change the marks in some way.\n  if (\n    selection.marks &&\n    !newProperties.marks &&\n    (newProperties.anchor || newProperties.focus)\n  ) {\n    newProperties.marks = null\n  }\n\n  // If there are no new properties to set, abort to avoid extra operations.\n  if (Object.keys(newProperties).length === 0) {\n    return\n  }\n\n  // TODO: for some reason toJSON() is required here (it breaks selections between blocks)? - 2018-10-10\n  const prevProperties = pick(selection.toJSON(), Object.keys(newProperties))\n\n  editor.applyOperation(\n    {\n      type: 'set_selection',\n      value,\n      properties: prevProperties,\n      newProperties,\n    },\n    snapshot ? { skip: false, merge: false } : {}\n  )\n}\n\nCommands.setAnchor = (editor, ...args) => {\n  editor.command(proxy, 'setAnchor', ...args)\n}\n\nCommands.setEnd = (editor, ...args) => {\n  editor.command(proxy, 'setEnd', ...args)\n}\n\nCommands.setFocus = (editor, ...args) => {\n  editor.command(proxy, 'setFocus', ...args)\n}\n\nCommands.setStart = (editor, ...args) => {\n  editor.command(proxy, 'setStart', ...args)\n}\n\nCommands.snapshotSelection = editor => {\n  editor.withoutMerging(() => {\n    editor.select(editor.value.selection, { snapshot: true })\n  })\n}\n\n/**\n * Helpers.\n */\n\nfunction proxy(editor, method, ...args) {\n  const range = editor.value.selection[method](...args)\n  editor.select(range)\n}\n\nfunction pointEdgeObject(editor, point, edge, object) {\n  const Point = point.slice(0, 1).toUpperCase() + point.slice(1)\n  const Edge = edge.slice(0, 1).toUpperCase() + edge.slice(1)\n  const Object = object.slice(0, 1).toUpperCase() + object.slice(1)\n  const method = `move${Point}To${Edge}OfNode`\n  const getNode = object === 'text' ? 'getNode' : `getClosest${Object}`\n  const { value } = editor\n  const { document, selection } = value\n  const p = selection[point]\n  const node = document[getNode](p.key)\n  if (!node) return\n  editor[method](node)\n}\n\nfunction pointEdgeSideObject(editor, point, edge, side, object) {\n  const Point = point.slice(0, 1).toUpperCase() + point.slice(1)\n  const Edge = edge.slice(0, 1).toUpperCase() + edge.slice(1)\n  const Side = side.slice(0, 1).toUpperCase() + side.slice(1)\n  const Object = object.slice(0, 1).toUpperCase() + object.slice(1)\n  const method = `move${Point}To${Edge}OfNode`\n  const getNode = object === 'text' ? 'getNode' : `getClosest${Object}`\n  const getDirectionNode = `get${Side}${Object}`\n  const { value } = editor\n  const { document, selection } = value\n  const p = selection[point]\n  const node = document[getNode](p.key)\n  if (!node) return\n  const target = document[getDirectionNode](node.key)\n  if (!target) return\n  editor[method](target)\n}\n\nfunction pointBackward(editor, point, n = 1) {\n  if (n === 0) return\n  if (n < 0) return pointForward(editor, point, -n)\n\n  const Point = point.slice(0, 1).toUpperCase() + point.slice(1)\n  const { value } = editor\n  const { document, selection } = value\n  const p = selection[point]\n  const hasVoidParent = document.hasVoidParent(p.path, editor)\n\n  // what is this?\n  if (!hasVoidParent && p.offset - n >= 0) {\n    const range = selection[`move${Point}Backward`](n)\n    editor.select(range)\n    return\n  }\n\n  const previous = document.getPreviousText(p.path)\n  if (!previous) return\n\n  const block = document.getClosestBlock(p.path)\n  const isInBlock = block.hasNode(previous.key)\n  const isPreviousInVoid =\n    previous && document.hasVoidParent(previous.key, editor)\n  editor[`move${Point}ToEndOfNode`](previous)\n\n  // when is this called?\n  if (!hasVoidParent && !isPreviousInVoid && isInBlock) {\n    const range = editor.value.selection[`move${Point}Backward`](n)\n    editor.select(range)\n  }\n}\n\nfunction pointForward(editor, point, n = 1) {\n  if (n === 0) return\n  if (n < 0) return pointBackward(editor, point, -n)\n\n  const Point = point.slice(0, 1).toUpperCase() + point.slice(1)\n  const { value } = editor\n  const { document, selection } = value\n  const p = selection[point]\n  const text = document.getNode(p.path)\n  const hasVoidParent = document.hasVoidParent(p.path, editor)\n\n  // what is this?\n  if (!hasVoidParent && p.offset + n <= text.text.length) {\n    const range = selection[`move${Point}Forward`](n)\n    editor.select(range)\n    return\n  }\n\n  const next = document.getNextText(p.path)\n  if (!next) return\n\n  const block = document.getClosestBlock(p.path)\n  const isInBlock = block.hasNode(next.key)\n  const isNextInVoid = document.hasVoidParent(next.key, editor)\n  editor[`move${Point}ToStartOfNode`](next)\n\n  // when is this called?\n  if (!hasVoidParent && !isNextInVoid && isInBlock) {\n    const range = editor.value.selection[`move${Point}Forward`](n)\n    editor.select(range)\n  }\n}\n\nfunction pointWordBackward(editor, pointName) {\n  const { value } = editor\n  const { document, selection } = value\n  const point = selection[pointName]\n  const block = document.getClosestBlock(point.key)\n  const offset = block.getOffset(point.key)\n  const o = offset + point.offset\n  const { text } = block\n  const n = TextUtils.getWordOffsetBackward(text, o)\n  editor.command(pointBackward, pointName, n > 0 ? n : 1)\n}\n\nfunction pointWordForward(editor, pointName) {\n  const { value } = editor\n  const { document, selection } = value\n  const point = selection[pointName]\n  const block = document.getClosestBlock(point.key)\n  const offset = block.getOffset(point.key)\n  const o = offset + point.offset\n  const { text } = block\n  const n = TextUtils.getWordOffsetForward(text, o)\n  editor.command(pointForward, pointName, n > 0 ? n : 1)\n}\n\nexport default Commands\n","import pick from 'lodash/pick'\nimport Value from '../models/value'\n\n/**\n * Commands.\n *\n * @type {Object}\n */\n\nconst Commands = {}\n\n/**\n * Set `properties` on the value.\n *\n * @param {Editor} editor\n * @param {Object|Value} properties\n */\n\nCommands.setData = (editor, data = {}) => {\n  const { value } = editor\n  const newProperties = Value.createProperties({ data })\n  const prevProperties = pick(value, Object.keys(newProperties))\n\n  editor.applyOperation({\n    type: 'set_value',\n    properties: prevProperties,\n    newProperties,\n  })\n}\n\n/**\n * Set `properties` on the value.\n *\n * @param {Editor} editor\n * @param {Object|Value} properties\n */\n\nCommands.setDecorations = (editor, decorations = []) => {\n  const { value } = editor\n  const newProperties = Value.createProperties({ decorations })\n  const prevProperties = pick(value, Object.keys(newProperties))\n\n  editor.applyOperation({\n    type: 'set_value',\n    properties: prevProperties,\n    newProperties,\n  })\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Commands\n","/**\n * A plugin that adds a set of queries to the editor.\n *\n * @param {Object} queries\n * @return {Object}\n */\n\nfunction QueriesPlugin(queries = {}) {\n  /**\n   * On construct, register all the queries.\n   *\n   * @param {Editor} editor\n   * @param {Function} next\n   */\n\n  function onConstruct(editor, next) {\n    for (const query in queries) {\n      editor.registerQuery(query)\n    }\n\n    return next()\n  }\n\n  /**\n   * On query, if it exists in our list of queries, call it.\n   *\n   * @param {Object} query\n   * @param {Editor} editor\n   * @param {Function} next\n   */\n\n  function onQuery(query, editor, next) {\n    const { type, args } = query\n    const fn = queries[type]\n    if (!fn) return next()\n    const ret = fn(editor, ...args)\n    return ret === undefined ? next() : ret\n  }\n\n  /**\n   * Return the plugin.\n   *\n   * @type {Object}\n   */\n\n  return {\n    onConstruct,\n    onQuery,\n  }\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default QueriesPlugin\n","/**\n * Define a Slate error.\n *\n * @type {SlateError}\n */\n\nclass SlateError extends Error {\n  constructor(code, attrs = {}) {\n    super(code)\n    this.code = code\n\n    for (const key in attrs) {\n      this[key] = attrs[key]\n    }\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor)\n    } else {\n      this.stack = new Error().stack\n    }\n  }\n}\n\n/**\n * Export.\n *\n * @type {SlateError}\n */\n\nexport default SlateError\n","import SlateError from '../utils/slate-error'\nimport Queries from './queries'\n\n/**\n * Create a plugin from a `schema` definition.\n *\n * @param {Object} schema\n * @return {Object}\n */\n\nfunction SchemaPlugin(schema) {\n  const { rules, document, blocks, inlines, marks } = schema\n  let schemaRules = []\n\n  if (rules) {\n    schemaRules = schemaRules.concat(rules)\n  }\n\n  if (document) {\n    schemaRules.push({\n      match: [{ object: 'document' }],\n      ...document,\n    })\n  }\n\n  if (blocks) {\n    for (const key in blocks) {\n      schemaRules.push({\n        match: [{ object: 'block', type: key }],\n        ...blocks[key],\n      })\n    }\n  }\n\n  if (inlines) {\n    for (const key in inlines) {\n      schemaRules.push({\n        match: [{ object: 'inline', type: key }],\n        ...inlines[key],\n      })\n    }\n  }\n\n  if (marks) {\n    for (const key in marks) {\n      schemaRules.push({\n        match: [{ object: 'mark', type: key }],\n        ...marks[key],\n      })\n    }\n  }\n\n  /**\n   * Check if a `mark` is void based on the schema rules.\n   *\n   * @param {Editor} editor\n   * @param {Mark} mark\n   * @return {Boolean}\n   */\n\n  function isAtomic(editor, mark) {\n    const rule = schemaRules.find(\n      r => 'isAtomic' in r && testRules(mark, r.match)\n    )\n\n    return rule && rule.isAtomic\n  }\n\n  /**\n   * Check if a `node` is void based on the schema rules.\n   *\n   * @param {Editor} editor\n   * @param {Node} node\n   * @return {Boolean}\n   */\n\n  function isVoid(editor, node) {\n    const rule = schemaRules.find(\n      r => 'isVoid' in r && testRules(node, r.match)\n    )\n\n    return rule && rule.isVoid\n  }\n\n  /**\n   * Normalize a `node` with the schema rules, returning a function that will\n   * fix the invalid node, or void if the node is valid.\n   *\n   * @param {Node} node\n   * @param {Editor} editor\n   * @param {Function} next\n   * @return {Function|Void}\n   */\n\n  function normalizeNode(node, editor, next) {\n    const error = validateNode(node, editor, () => {})\n    if (!error) return next()\n\n    return () => {\n      const { rule } = error\n      const { size } = editor.operations\n\n      // First run the user-provided `normalize` function if one exists...\n      if (rule.normalize) {\n        rule.normalize(editor, error)\n      }\n\n      // If the `normalize` function did not add any operations to the editor\n      // object, it can't have normalized, so run the default one.\n      if (editor.operations.size === size) {\n        defaultNormalize(editor, error)\n      }\n    }\n  }\n\n  /**\n   * Validate a `node` with the schema rules, returning a `SlateError` if it's\n   * invalid.\n   *\n   * @param {Node} node\n   * @param {Editor} editor\n   * @param {Function} next\n   * @return {Error|Void}\n   */\n\n  function validateNode(node, editor, next) {\n    const matches = schemaRules.filter(r => testRules(node, r.match))\n    const failure = validateRules(node, matches, schemaRules, { every: true })\n    if (!failure) return next()\n    const error = new SlateError(failure.code, failure)\n    return error\n  }\n\n  /**\n   * On schema-related queries, respond if we can.\n   *\n   * @param {Object} query\n   * @param {Function} next\n   */\n\n  const queries = Queries({ isAtomic, isVoid })\n\n  /**\n   * Return the plugins.\n   *\n   * @type {Object}\n   */\n\n  return [{ normalizeNode, validateNode }, queries]\n}\n\n/**\n * Normalize an invalid value with `error` with default remedies.\n *\n * @param {Editor} editor\n * @param {SlateError} error\n */\n\nfunction defaultNormalize(editor, error) {\n  const { code, node, child, next, previous, key, mark } = error\n\n  switch (code) {\n    case 'child_max_invalid':\n    case 'child_object_invalid':\n    case 'child_type_invalid':\n    case 'child_unknown':\n    case 'first_child_object_invalid':\n    case 'first_child_type_invalid':\n    case 'last_child_object_invalid':\n    case 'last_child_type_invalid': {\n      return child.object === 'text' &&\n        node.object === 'block' &&\n        node.nodes.size === 1\n        ? editor.removeNodeByKey(node.key)\n        : editor.removeNodeByKey(child.key)\n    }\n\n    case 'previous_sibling_object_invalid':\n    case 'previous_sibling_type_invalid': {\n      return previous.object === 'text' &&\n        node.object === 'block' &&\n        node.nodes.size === 1\n        ? editor.removeNodeByKey(node.key)\n        : editor.removeNodeByKey(previous.key)\n    }\n\n    case 'next_sibling_object_invalid':\n    case 'next_sibling_type_invalid': {\n      return next.object === 'text' &&\n        node.object === 'block' &&\n        node.nodes.size === 1\n        ? editor.removeNodeByKey(node.key)\n        : editor.removeNodeByKey(next.key)\n    }\n\n    case 'child_min_invalid':\n    case 'node_text_invalid':\n    case 'parent_object_invalid':\n    case 'parent_type_invalid': {\n      return node.object === 'document'\n        ? node.nodes.forEach(n => editor.removeNodeByKey(n.key))\n        : editor.removeNodeByKey(node.key)\n    }\n\n    case 'node_data_invalid': {\n      return node.data.get(key) === undefined && node.object !== 'document'\n        ? editor.removeNodeByKey(node.key)\n        : editor.setNodeByKey(node.key, { data: node.data.delete(key) })\n    }\n\n    case 'node_mark_invalid': {\n      return node\n        .getTexts()\n        .forEach(t => editor.removeMarkByKey(t.key, 0, t.text.length, mark))\n    }\n\n    default: {\n      return editor.removeNodeByKey(node.key)\n    }\n  }\n}\n\n/**\n * Check that an `object` matches one of a set of `rules`.\n *\n * @param {Mixed} object\n * @param {Object|Array} rules\n * @return {Boolean}\n */\n\nfunction testRules(object, rules) {\n  const error = validateRules(object, rules)\n  return !error\n}\n\n/**\n * Validate that a `object` matches a `rule` object or array.\n *\n * @param {Mixed} object\n * @param {Object|Array} rule\n * @param {Array|Void} rules\n * @return {Error|Void}\n */\n\nfunction validateRules(object, rule, rules, options = {}) {\n  const { every = false } = options\n\n  if (Array.isArray(rule)) {\n    const array = rule.length ? rule : [{}]\n    let first\n\n    for (const r of array) {\n      const error = validateRules(object, r, rules)\n      first = first || error\n      if (every && error) return error\n      if (!every && !error) return\n    }\n\n    return first\n  }\n\n  const error =\n    validateObject(object, rule) ||\n    validateType(object, rule) ||\n    validateData(object, rule) ||\n    validateMarks(object, rule) ||\n    validateText(object, rule) ||\n    validateFirst(object, rule) ||\n    validateLast(object, rule) ||\n    validateNodes(object, rule, rules)\n\n  return error\n}\n\nfunction validateObject(node, rule) {\n  if (rule.object == null) return\n  if (rule.object === node.object) return\n  if (typeof rule.object === 'function' && rule.object(node.object)) return\n  return fail('node_object_invalid', { rule, node })\n}\n\nfunction validateType(node, rule) {\n  if (rule.type == null) return\n  if (rule.type === node.type) return\n  if (typeof rule.type === 'function' && rule.type(node.type)) return\n  return fail('node_type_invalid', { rule, node })\n}\n\nfunction validateData(node, rule) {\n  if (rule.data == null) return\n  if (node.data == null) return\n\n  if (typeof rule.data === 'function') {\n    if (rule.data(node.data)) return\n    return fail('node_data_invalid', { rule, node })\n  }\n\n  for (const key in rule.data) {\n    const fn = rule.data[key]\n    const value = node.data && node.data.get(key)\n    const valid = typeof fn === 'function' ? fn(value) : fn === value\n    if (valid) continue\n    return fail('node_data_invalid', { rule, node, key, value })\n  }\n}\n\nfunction validateMarks(node, rule) {\n  if (rule.marks == null) return\n  const marks = node.getMarks().toArray()\n\n  for (const mark of marks) {\n    const valid = rule.marks.some(\n      def =>\n        typeof def.type === 'function'\n          ? def.type(mark.type)\n          : def.type === mark.type\n    )\n    if (valid) continue\n    return fail('node_mark_invalid', { rule, node, mark })\n  }\n}\n\nfunction validateText(node, rule) {\n  if (rule.text == null) return\n  const { text } = node\n  const valid =\n    typeof rule.text === 'function' ? rule.text(text) : rule.text.test(text)\n  if (valid) return\n  return fail('node_text_invalid', { rule, node, text })\n}\n\nfunction validateFirst(node, rule) {\n  if (rule.first == null) return\n  const first = node.nodes.first()\n  if (!first) return\n  const error = validateRules(first, rule.first)\n  if (!error) return\n  error.rule = rule\n  error.node = node\n  error.child = first\n  error.code = error.code.replace('node_', 'first_child_')\n  return error\n}\n\nfunction validateLast(node, rule) {\n  if (rule.last == null) return\n  const last = node.nodes.last()\n  if (!last) return\n  const error = validateRules(last, rule.last)\n  if (!error) return\n  error.rule = rule\n  error.node = node\n  error.child = last\n  error.code = error.code.replace('node_', 'last_child_')\n  return error\n}\n\nfunction validateNodes(node, rule, rules = []) {\n  if (node.nodes == null) return\n\n  const children = node.nodes\n  const defs = rule.nodes != null ? rule.nodes.slice() : []\n  let count = 0\n  let lastCount = 0\n  let min = null\n  let index = -1\n  let def = null\n  let max = null\n  let child = null\n  let previous = null\n  let next = null\n\n  function nextDef() {\n    if (defs.length === 0) return false\n    def = defs.shift()\n    lastCount = count\n    count = 0\n    min = def.min || null\n    max = def.max || null\n    return true\n  }\n\n  function nextChild() {\n    index += 1\n    previous = index ? children.get(index - 1) : null\n    child = children.get(index)\n    next = children.get(index + 1)\n    if (!child) return false\n    lastCount = count\n    count += 1\n    return true\n  }\n\n  function rewind() {\n    if (index > 0) {\n      index -= 1\n      count = lastCount\n    }\n  }\n\n  if (rule.nodes != null) {\n    nextDef()\n  }\n\n  while (nextChild()) {\n    const err =\n      validateParent(node, child, rules) ||\n      validatePrevious(node, child, previous, index, rules) ||\n      validateNext(node, child, next, index, rules)\n\n    if (err) return err\n\n    if (rule.nodes != null) {\n      if (!def) {\n        return fail('child_unknown', { rule, node, child, index })\n      }\n\n      if (def.match) {\n        const error = validateRules(child, def.match)\n\n        if (error) {\n          // Since we want to report overflow on last matching child we don't\n          // immediately check for count > max, but instead do so once we find\n          // a child that doesn't match.\n          if (max != null && count - 1 > max) {\n            rewind()\n            return fail('child_max_invalid', {\n              rule,\n              node,\n              index,\n              child: children.get(index),\n              count,\n              limit: max,\n            })\n          }\n\n          const lastMin = min\n\n          // If there are more groups after this one then child might actually\n          // be valid.\n          if (nextDef()) {\n            // If we've already satisfied the minimum for the current group,\n            // then we can rewind and proceed to the next group.\n            if (lastCount - 1 >= lastMin) {\n              index -= 1\n              continue\n            }\n\n            // Otherwise we know that current value is underflowing. There are\n            // three possible causes for this...\n\n            // 1. There might just not be enough elements for current group, and\n            // current child is in fact the first of the next group. If so, the\n            // next def will not report errors, in which case we can rewind and\n            // report an minimum error.\n            if (validateRules(child, def.match) == null) {\n              rewind()\n              return fail('child_min_invalid', {\n                rule,\n                node,\n                index,\n                count: lastCount - 1,\n                limit: lastMin,\n              })\n            }\n\n            // 2. The current group is underflowing, but there is also an\n            // invalid child before the next group.\n            // 3. Or the current group is not underflowing but it appears so\n            // because there's an invalid child between its members.\n            // It's either the second or third case. If it's the second then\n            // we could report an underflow, but presence of an invalid child\n            // is arguably more important, so we report it first. It also lets\n            // us avoid checking for which case exactly is it.\n            error.rule = rule\n            error.node = node\n            error.child = child\n            error.index = index\n            error.code = error.code.replace('node_', 'child_')\n            return error\n          }\n\n          // Otherwise either we exhausted the last group, in which case it's\n          // an unknown child, ...\n          if (max != null && count > max) {\n            return fail('child_unknown', { rule, node, child, index })\n          }\n\n          // ... or it's an invalid child for the last group.\n          error.rule = rule\n          error.node = node\n          error.child = child\n          error.index = index\n          error.code = error.code.replace('node_', 'child_')\n          return error\n        }\n      }\n    }\n  }\n\n  // Since we want to report overflow on last matching child we don't\n  // immediately check for count > max, but do so after processing all nodes.\n  if (max != null && count > max) {\n    return fail('child_max_invalid', {\n      rule,\n      node,\n      index: index - 1,\n      count,\n      child: children.get(index - 1),\n      limit: max,\n    })\n  }\n\n  if (rule.nodes != null) {\n    do {\n      if (count < min) {\n        return fail('child_min_invalid', {\n          rule,\n          node,\n          index,\n          count,\n          limit: min,\n        })\n      }\n    } while (nextDef())\n  }\n}\n\nfunction validateParent(node, child, rules) {\n  for (const rule of rules) {\n    if (rule.parent == null) continue\n    if (!testRules(child, rule.match)) continue\n\n    const error = validateRules(node, rule.parent)\n    if (!error) continue\n\n    error.rule = rule\n    error.parent = node\n    error.node = child\n    error.code = error.code.replace('node_', 'parent_')\n    return error\n  }\n}\n\nfunction validatePrevious(node, child, previous, index, rules) {\n  if (!previous) return\n\n  for (const rule of rules) {\n    if (rule.previous == null) continue\n    if (!testRules(child, rule.match)) continue\n\n    const error = validateRules(previous, rule.previous)\n    if (!error) continue\n\n    error.rule = rule\n    error.node = node\n    error.child = child\n    error.index = index\n    error.previous = previous\n    error.code = error.code.replace('node_', 'previous_sibling_')\n    return error\n  }\n}\n\nfunction validateNext(node, child, next, index, rules) {\n  if (!next) return\n\n  for (const rule of rules) {\n    if (rule.next == null) continue\n    if (!testRules(child, rule.match)) continue\n\n    const error = validateRules(next, rule.next)\n    if (!error) continue\n\n    error.rule = rule\n    error.node = node\n    error.child = child\n    error.index = index\n    error.next = next\n    error.code = error.code.replace('node_', 'next_sibling_')\n    return error\n  }\n}\n\n/**\n * Create an interim failure object with `code` and `attrs`.\n *\n * @param {String} code\n * @param {Object} attrs\n * @return {Object}\n */\n\nfunction fail(code, attrs) {\n  return { code, ...attrs }\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default SchemaPlugin\n","import Block from '../models/block'\nimport Inline from '../models/inline'\nimport Mark from '../models/mark'\n\n/**\n * Ensure that an expanded selection is deleted first using the `editor.delete`\n * command. This guarantees that it uses the proper semantic \"intent\" instead of\n * using `deleteAtRange` under the covers and skipping `delete`.\n *\n * @param {Editor}\n */\n\nfunction deleteExpanded(editor) {\n  const { value } = editor\n  const { selection } = value\n\n  if (selection.isExpanded) {\n    editor.delete()\n  }\n}\n\n/**\n * Commands.\n *\n * @type {Object}\n */\n\nconst Commands = {}\n\n/**\n * Add a `mark` to the characters in the current selection.\n *\n * @param {Editor} editor\n * @param {Mark} mark\n */\n\nCommands.addMark = (editor, mark) => {\n  mark = Mark.create(mark)\n  const { value } = editor\n  const { document, selection } = value\n\n  if (selection.isExpanded) {\n    editor.addMarkAtRange(selection, mark)\n  } else if (selection.marks) {\n    const marks = selection.marks.add(mark)\n    const sel = selection.set('marks', marks)\n    editor.select(sel)\n  } else {\n    const marks = document.getActiveMarksAtRange(selection).add(mark)\n    const sel = selection.set('marks', marks)\n    editor.select(sel)\n  }\n}\n\n/**\n * Add a list of `marks` to the characters in the current selection.\n *\n * @param {Editor} editor\n * @param {Set<Mark>|Array<Object>} marks\n */\n\nCommands.addMarks = (editor, marks) => {\n  marks.forEach(mark => editor.addMark(mark))\n}\n\n/**\n * Delete at the current selection.\n *\n * @param {Editor} editor\n */\n\nCommands.delete = editor => {\n  const { value } = editor\n  const { selection } = value\n  editor.deleteAtRange(selection)\n\n  // COMPAT: Ensure that the selection is collapsed, because in certain cases\n  // when deleting across inline nodes, when splitting the inline node the end\n  // point of the selection will end up after the split point.\n  editor.moveToFocus()\n}\n\n/**\n * Delete backward `n` characters.\n *\n * @param {Editor} editor\n * @param {Number} n (optional)\n */\n\nCommands.deleteBackward = (editor, n = 1) => {\n  const { value } = editor\n  const { selection } = value\n\n  if (selection.isExpanded) {\n    editor.delete()\n  } else {\n    editor.deleteBackwardAtRange(selection, n)\n  }\n}\n\n/**\n * Delete backward one character.\n *\n * @param {Editor} editor\n */\n\nCommands.deleteCharBackward = editor => {\n  const { value } = editor\n  const { selection } = value\n\n  if (selection.isExpanded) {\n    editor.delete()\n  } else {\n    editor.deleteCharBackwardAtRange(selection)\n  }\n}\n\n/**\n * Delete backward one line.\n *\n * @param {Editor} editor\n */\n\nCommands.deleteLineBackward = editor => {\n  const { value } = editor\n  const { selection } = value\n\n  if (selection.isExpanded) {\n    editor.delete()\n  } else {\n    editor.deleteLineBackwardAtRange(selection)\n  }\n}\n\n/**\n * Delete backward one word.\n *\n * @param {Editor} editor\n */\n\nCommands.deleteWordBackward = editor => {\n  const { value } = editor\n  const { selection } = value\n\n  if (selection.isExpanded) {\n    editor.delete()\n  } else {\n    editor.deleteWordBackwardAtRange(selection)\n  }\n}\n\n/**\n * Delete backward `n` characters.\n *\n * @param {Editor} editor\n * @param {Number} n (optional)\n */\n\nCommands.deleteForward = (editor, n = 1) => {\n  const { value } = editor\n  const { selection } = value\n\n  if (selection.isExpanded) {\n    editor.delete()\n  } else {\n    editor.deleteForwardAtRange(selection, n)\n  }\n}\n\n/**\n * Delete backward one character.\n *\n * @param {Editor} editor\n */\n\nCommands.deleteCharForward = editor => {\n  const { value } = editor\n  const { selection } = value\n\n  if (selection.isExpanded) {\n    editor.delete()\n  } else {\n    editor.deleteCharForwardAtRange(selection)\n  }\n}\n\n/**\n * Delete backward one line.\n *\n * @param {Editor} editor\n */\n\nCommands.deleteLineForward = editor => {\n  const { value } = editor\n  const { selection } = value\n\n  if (selection.isExpanded) {\n    editor.delete()\n  } else {\n    editor.deleteLineForwardAtRange(selection)\n  }\n}\n\n/**\n * Delete backward one word.\n *\n * @param {Editor} editor\n */\n\nCommands.deleteWordForward = editor => {\n  const { value } = editor\n  const { selection } = value\n\n  if (selection.isExpanded) {\n    editor.delete()\n  } else {\n    editor.deleteWordForwardAtRange(selection)\n  }\n}\n\n/**\n * Insert a `block` at the current selection.\n *\n * @param {Editor} editor\n * @param {String|Object|Block} block\n */\n\nCommands.insertBlock = (editor, block) => {\n  deleteExpanded(editor)\n\n  block = Block.create(block)\n  const { value } = editor\n  const { selection } = value\n  editor.insertBlockAtRange(selection, block)\n\n  // If the node was successfully inserted, update the selection.\n  const node = editor.value.document.getNode(block.key)\n  if (node) editor.moveToEndOfNode(node)\n}\n\n/**\n * Insert a `fragment` at the current selection.\n *\n * @param {Editor} editor\n * @param {Document} fragment\n */\n\nCommands.insertFragment = (editor, fragment) => {\n  if (!fragment.nodes.size) return\n\n  deleteExpanded(editor)\n\n  let { value } = editor\n  let { document, selection } = value\n  const { start, end } = selection\n  const { startText, endText, startInline } = value\n  const lastText = fragment.getLastText()\n  const lastInline = fragment.getClosestInline(lastText.key)\n  const lastBlock = fragment.getClosestBlock(lastText.key)\n  const firstChild = fragment.nodes.first()\n  const lastChild = fragment.nodes.last()\n  const keys = document.getTexts().map(text => text.key)\n  const isAppending =\n    !startInline ||\n    (start.isAtStartOfNode(startText) || end.isAtStartOfNode(startText)) ||\n    (start.isAtEndOfNode(endText) || end.isAtEndOfNode(endText))\n\n  const isInserting =\n    firstChild.hasBlockChildren() || lastChild.hasBlockChildren()\n\n  editor.insertFragmentAtRange(selection, fragment)\n  value = editor.value\n  document = value.document\n\n  const newTexts = document.getTexts().filter(n => !keys.includes(n.key))\n  const newText = isAppending ? newTexts.last() : newTexts.takeLast(2).first()\n\n  if (newText && (lastInline || isInserting)) {\n    editor.moveToEndOfNode(newText)\n  } else if (newText) {\n    editor.moveToStartOfNode(newText).moveForward(lastBlock.text.length)\n  }\n}\n\n/**\n * Insert an `inline` at the current selection.\n *\n * @param {Editor} editor\n * @param {String|Object|Inline} inline\n */\n\nCommands.insertInline = (editor, inline) => {\n  deleteExpanded(editor)\n\n  inline = Inline.create(inline)\n  const { value } = editor\n  const { selection } = value\n  editor.insertInlineAtRange(selection, inline)\n\n  // If the node was successfully inserted, update the selection.\n  const node = editor.value.document.getNode(inline.key)\n  if (node) editor.moveToEndOfNode(node)\n}\n\n/**\n * Insert a string of `text` with optional `marks` at the current selection.\n *\n * @param {Editor} editor\n * @param {String} text\n * @param {Set<Mark>} marks (optional)\n */\n\nCommands.insertText = (editor, text, marks) => {\n  deleteExpanded(editor)\n\n  const { value } = editor\n  const { document, selection } = value\n  marks = marks || selection.marks || document.getInsertMarksAtRange(selection)\n  editor.insertTextAtRange(selection, text, marks)\n\n  // If the text was successfully inserted, and the selection had marks on it,\n  // unset the selection's marks.\n  if (selection.marks && document !== editor.value.document) {\n    editor.select({ marks: null })\n  }\n}\n\n/**\n * Remove a `mark` from the characters in the current selection.\n *\n * @param {Editor} editor\n * @param {Mark} mark\n */\n\nCommands.removeMark = (editor, mark) => {\n  mark = Mark.create(mark)\n  const { value } = editor\n  const { document, selection } = value\n\n  if (selection.isExpanded) {\n    editor.removeMarkAtRange(selection, mark)\n  } else if (selection.marks) {\n    const marks = selection.marks.remove(mark)\n    const sel = selection.set('marks', marks)\n    editor.select(sel)\n  } else {\n    const marks = document.getActiveMarksAtRange(selection).remove(mark)\n    const sel = selection.set('marks', marks)\n    editor.select(sel)\n  }\n}\n\n/**\n * Replace an `oldMark` with a `newMark` in the characters in the current selection.\n *\n * @param {Editor} editor\n * @param {Mark} oldMark\n * @param {Mark} newMark\n */\n\nCommands.replaceMark = (editor, oldMark, newMark) => {\n  editor.removeMark(oldMark)\n  editor.addMark(newMark)\n}\n\n/**\n * Set the `properties` of block nodes.\n *\n * @param {Editor} editor\n * @param {Object|String} properties\n */\n\nCommands.setBlocks = (editor, properties) => {\n  const { value } = editor\n  const { selection } = value\n  editor.setBlocksAtRange(selection, properties)\n}\n\n/**\n * Set the `properties` of inline nodes.\n *\n * @param {Editor} editor\n * @param {Object|String} properties\n */\n\nCommands.setInlines = (editor, properties) => {\n  const { value } = editor\n  const { selection } = value\n  editor.setInlinesAtRange(selection, properties)\n}\n\n/**\n * Split the block node at the current selection, to optional `depth`.\n *\n * @param {Editor} editor\n * @param {Number} depth (optional)\n */\n\nCommands.splitBlock = (editor, depth = 1) => {\n  deleteExpanded(editor)\n\n  const { value } = editor\n  const { selection, document } = value\n  const marks = selection.marks || document.getInsertMarksAtRange(selection)\n  editor.splitBlockAtRange(selection, depth).moveToEnd()\n\n  if (marks && marks.size !== 0) {\n    editor.select({ marks })\n  }\n}\n\n/**\n * Split the inline nodes to optional `height`.\n *\n * @param {Editor} editor\n * @param {Number} height (optional)\n */\n\nCommands.splitInline = (editor, height) => {\n  deleteExpanded(editor)\n  const { value } = editor\n  const { selection } = value\n  editor.splitInlineAtRange(selection, height)\n}\n\n/**\n * Add or remove a `mark` from the characters in the current selection,\n * depending on whether it's already there.\n *\n * @param {Editor} editor\n * @param {Mark} mark\n */\n\nCommands.toggleMark = (editor, mark) => {\n  mark = Mark.create(mark)\n  const { value } = editor\n  const exists = value.activeMarks.has(mark)\n\n  if (exists) {\n    editor.removeMark(mark)\n  } else {\n    editor.addMark(mark)\n  }\n}\n\n/**\n * Unwrap nodes from a block with `properties`.\n *\n * @param {Editor} editor\n * @param {String|Object} properties\n */\n\nCommands.unwrapBlock = (editor, properties) => {\n  const { value } = editor\n  const { selection } = value\n  editor.unwrapBlockAtRange(selection, properties)\n}\n\n/**\n * Unwrap nodes from an inline with `properties`.\n *\n * @param {Editor} editor\n * @param {String|Object} properties\n */\n\nCommands.unwrapInline = (editor, properties) => {\n  const { value } = editor\n  const { selection } = value\n  editor.unwrapInlineAtRange(selection, properties)\n}\n\n/**\n * Wrap nodes in a new `block`.\n *\n * @param {Editor} editor\n * @param {Block|Object|String} block\n */\n\nCommands.wrapBlock = (editor, block) => {\n  const { value } = editor\n  const { selection } = value\n  editor.wrapBlockAtRange(selection, block)\n}\n\n/**\n * Wrap nodes in a new `inline`.\n *\n * @param {Editor} editor\n * @param {Inline|Object|String} inline\n */\n\nCommands.wrapInline = (editor, inline) => {\n  const { value } = editor\n  const { selection } = value\n  editor.wrapInlineAtRange(selection, inline)\n}\n\n/**\n * Wrap the current selection with prefix/suffix.\n *\n * @param {Editor} editor\n * @param {String} prefix\n * @param {String} suffix\n */\n\nCommands.wrapText = (editor, prefix, suffix = prefix) => {\n  const { value } = editor\n  const { selection } = value\n  editor.wrapTextAtRange(selection, prefix, suffix)\n\n  // If the selection was collapsed, it will have moved the start offset too.\n  if (selection.isCollapsed) {\n    editor.moveStartBackward(prefix.length)\n  }\n\n  // Adding the suffix will have pushed the end of the selection further on, so\n  // we need to move it back to account for this.\n  editor.moveEndBackward(suffix.length)\n\n  // There's a chance that the selection points moved \"through\" each other,\n  // resulting in a now-incorrect selection direction.\n  if (selection.isForward !== editor.value.selection.isForward) {\n    editor.flip()\n  }\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Commands\n","import AtRange from '../commands/at-range'\nimport ByPath from '../commands/by-path'\nimport Commands from './commands'\nimport OnHistory from '../commands/on-history'\nimport OnSelection from '../commands/on-selection'\nimport OnValue from '../commands/on-value'\nimport Queries from './queries'\nimport Schema from './schema'\nimport Text from '../models/text'\nimport WithIntent from '../commands/with-intent'\n\n/**\n * A plugin that defines the core Slate logic.\n *\n * @param {Object} options\n * @return {Object}\n */\n\nfunction CorePlugin(options = {}) {\n  const { plugins = [] } = options\n\n  /**\n   * The core Slate commands.\n   *\n   * @type {Object}\n   */\n\n  const commands = Commands({\n    ...AtRange,\n    ...ByPath,\n    ...OnHistory,\n    ...OnSelection,\n    ...OnValue,\n    ...WithIntent,\n  })\n\n  /**\n   * The core Slate queries.\n   *\n   * @type {Object}\n   */\n\n  const queries = Queries({\n    isAtomic: () => false,\n    isVoid: () => false,\n  })\n\n  /**\n   * The core Slate schema.\n   *\n   * @type {Object}\n   */\n\n  const schema = Schema({\n    rules: [\n      // Only allow block nodes in documents.\n      {\n        match: { object: 'document' },\n        nodes: [\n          {\n            match: { object: 'block' },\n          },\n        ],\n      },\n\n      // Only allow block nodes or inline and text nodes in blocks.\n      {\n        match: {\n          object: 'block',\n          first: { object: 'block' },\n        },\n        nodes: [\n          {\n            match: { object: 'block' },\n          },\n        ],\n      },\n      {\n        match: {\n          object: 'block',\n          first: [{ object: 'inline' }, { object: 'text' }],\n        },\n        nodes: [\n          {\n            match: [{ object: 'inline' }, { object: 'text' }],\n          },\n        ],\n      },\n\n      // Only allow inline and text nodes in inlines.\n      {\n        match: { object: 'inline' },\n        nodes: [{ match: [{ object: 'inline' }, { object: 'text' }] }],\n      },\n\n      // Ensure that block and inline nodes have at least one text child.\n      {\n        match: [{ object: 'block' }, { object: 'inline' }],\n        nodes: [{ min: 1 }],\n        normalize: (editor, error) => {\n          const { code, node } = error\n\n          if (code === 'child_min_invalid' && node.nodes.isEmpty()) {\n            editor.insertNodeByKey(node.key, 0, Text.create())\n          }\n        },\n      },\n\n      // Ensure that inline nodes are surrounded by text nodes.\n      {\n        match: { object: 'block' },\n        first: [{ object: 'block' }, { object: 'text' }],\n        last: [{ object: 'block' }, { object: 'text' }],\n        normalize: (editor, error) => {\n          const { code, node } = error\n          const text = Text.create()\n          let i\n\n          if (code === 'first_child_object_invalid') {\n            i = 0\n          } else if (code === 'last_child_object_invalid') {\n            i = node.nodes.size\n          } else {\n            return\n          }\n\n          editor.insertNodeByKey(node.key, i, text)\n        },\n      },\n      {\n        match: { object: 'inline' },\n        first: [{ object: 'block' }, { object: 'text' }],\n        last: [{ object: 'block' }, { object: 'text' }],\n        previous: [{ object: 'block' }, { object: 'text' }],\n        next: [{ object: 'block' }, { object: 'text' }],\n        normalize: (editor, error) => {\n          const { code, node, index } = error\n          const text = Text.create()\n          let i\n\n          if (code === 'first_child_object_invalid') {\n            i = 0\n          } else if (code === 'last_child_object_invalid') {\n            i = node.nodes.size\n          } else if (code === 'previous_sibling_object_invalid') {\n            i = index\n          } else if (code === 'next_sibling_object_invalid') {\n            i = index + 1\n          } else {\n            return\n          }\n\n          editor.insertNodeByKey(node.key, i, text)\n        },\n      },\n\n      // Merge adjacent text nodes.\n      {\n        match: { object: 'text' },\n        next: [{ object: 'block' }, { object: 'inline' }],\n        normalize: (editor, error) => {\n          const { code, next } = error\n\n          if (code === 'next_sibling_object_invalid') {\n            editor.mergeNodeByKey(next.key)\n          }\n        },\n      },\n    ],\n  })\n\n  /**\n   * Return the plugins.\n   *\n   * @type {Array}\n   */\n\n  return [schema, ...plugins, commands, queries]\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default CorePlugin\n","import Debug from 'debug'\nimport invariant from 'tiny-invariant'\nimport isPlainObject from 'is-plain-object'\nimport warning from 'tiny-warning'\nimport { List } from 'immutable'\n\nimport CommandsPlugin from '../plugins/commands'\nimport CorePlugin from '../plugins/core'\nimport Operation from '../models/operation'\nimport PathUtils from '../utils/path-utils'\nimport QueriesPlugin from '../plugins/queries'\nimport SchemaPlugin from '../plugins/schema'\nimport Value from '../models/value'\n\n/**\n * Debug.\n *\n * @type {Function}\n */\n\nconst debug = Debug('slate:editor')\n\n/**\n * Editor.\n *\n * @type {Editor}\n */\n\nclass Editor {\n  /**\n   * Create a new `Editor` with `attrs`.\n   *\n   * @param {Object} attrs\n   * @param {Object} options\n   */\n\n  constructor(attrs = {}, options = {}) {\n    const { controller = this, construct = true } = options\n    const {\n      onChange = () => {},\n      plugins = [],\n      readOnly = false,\n      value = Value.create(),\n    } = attrs\n\n    this.controller = controller\n    this.middleware = {}\n    this.onChange = onChange\n    this.operations = List()\n    this.readOnly = null\n    this.value = null\n\n    this.tmp = {\n      dirty: [],\n      flushing: false,\n      merge: null,\n      normalize: true,\n      save: true,\n    }\n\n    const core = CorePlugin({ plugins })\n    registerPlugin(this, core)\n\n    if (construct) {\n      this.run('onConstruct')\n      this.setReadOnly(readOnly)\n      this.setValue(value, options)\n    }\n  }\n\n  /**\n   * Apply an `operation` to the editor, updating its value.\n   *\n   * @param {Operation|Object} operation\n   * @return {Editor}\n   */\n\n  applyOperation(operation) {\n    const { operations, controller } = this\n    let value = this.value\n\n    // Add in the current `value` in case the operation was serialized.\n    if (isPlainObject(operation)) {\n      operation = { ...operation, value }\n    }\n\n    operation = Operation.create(operation)\n\n    // Save the operation into the history. Since `save` is a command, we need\n    // to do it without normalizing, since it would have side effects.\n    this.withoutNormalizing(() => {\n      controller.save(operation)\n      value = this.value\n    })\n\n    // Apply the operation to the value.\n    debug('apply', { operation })\n    this.value = operation.apply(value)\n    this.operations = operations.push(operation)\n\n    // Get the paths of the affected nodes, and mark them as dirty.\n    const newDirtyPaths = getDirtyPaths(operation)\n    const dirty = this.tmp.dirty.reduce((memo, path) => {\n      path = PathUtils.create(path)\n      const transformed = PathUtils.transform(path, operation)\n      memo = memo.concat(transformed.toArray())\n      return memo\n    }, newDirtyPaths)\n\n    this.tmp.dirty = dirty\n\n    // If we're not already, queue the flushing process on the next tick.\n    if (!this.tmp.flushing) {\n      this.tmp.flushing = true\n      Promise.resolve().then(() => this.flush())\n    }\n\n    return controller\n  }\n\n  /**\n   * Flush the editor's current change.\n   *\n   * @return {Editor}\n   */\n\n  flush() {\n    this.run('onChange')\n    const { value, operations, controller } = this\n    const change = { value, operations }\n    this.operations = List()\n    this.tmp.flushing = false\n    this.onChange(change)\n    return controller\n  }\n\n  /**\n   * Trigger a command by `type` with `...args`.\n   *\n   * @param {String|Function} type\n   * @param {Any} ...args\n   * @return {Editor}\n   */\n\n  command(type, ...args) {\n    const { controller } = this\n\n    if (typeof type === 'function') {\n      type(controller, ...args)\n      normalizeDirtyPaths(this)\n      return controller\n    }\n\n    debug('command', { type, args })\n    const obj = { type, args }\n    this.run('onCommand', obj)\n    normalizeDirtyPaths(this)\n    return controller\n  }\n\n  /**\n   * Checks if a command by `type` has been registered.\n   *\n   * @param {String} type\n   * @return {Boolean}\n   */\n\n  hasCommand(type) {\n    const { controller } = this\n    const has = type in controller && controller[type].__command\n\n    return has\n  }\n\n  /**\n   * Checks if a query by `type` has been registered.\n   *\n   * @param {String} type\n   * @return {Boolean}\n   */\n\n  hasQuery(type) {\n    const { controller } = this\n    const has = type in controller && controller[type].__query\n\n    return has\n  }\n\n  /**\n   * Normalize all of the nodes in the document from scratch.\n   *\n   * @return {Editor}\n   */\n\n  normalize() {\n    const { value, controller } = this\n    let { document } = value\n    const table = document.getKeysToPathsTable()\n    const paths = Object.values(table).map(PathUtils.create)\n    this.tmp.dirty = this.tmp.dirty.concat(paths)\n    normalizeDirtyPaths(this)\n\n    const { selection } = value\n    document = value.document\n\n    if (selection.isUnset && document.nodes.size) {\n      controller.moveToStartOfDocument()\n    }\n\n    return controller\n  }\n\n  /**\n   * Ask a query by `type` with `...args`.\n   *\n   * @param {String|Function} type\n   * @param {Any} ...args\n   * @return {Any}\n   */\n\n  query(type, ...args) {\n    const { controller } = this\n\n    if (typeof type === 'function') {\n      return type(controller, ...args)\n    }\n\n    debug('query', { type, args })\n    const obj = { type, args }\n    return this.run('onQuery', obj)\n  }\n\n  /**\n   * Register a command `type` with the editor.\n   *\n   * @param {String} type\n   * @return {Editor}\n   */\n\n  registerCommand(type) {\n    const { controller } = this\n\n    if (type in controller && controller[type].__command) {\n      return controller\n    }\n\n    invariant(\n      !(type in controller),\n      `You cannot register a \\`${type}\\` command because it would overwrite an existing property of the \\`Editor\\`.`\n    )\n\n    const method = (...args) => this.command(type, ...args)\n    controller[type] = method\n    method.__command = true\n    return controller\n  }\n\n  /**\n   * Register a query `type` with the editor.\n   *\n   * @param {String} type\n   * @return {Editor}\n   */\n\n  registerQuery(type) {\n    const { controller } = this\n\n    if (type in controller && controller[type].__query) {\n      return controller\n    }\n\n    invariant(\n      !(type in controller),\n      `You cannot register a \\`${type}\\` query because it would overwrite an existing property of the \\`Editor\\`.`\n    )\n\n    const method = (...args) => this.query(type, ...args)\n    controller[type] = method\n    method.__query = true\n    return controller\n  }\n\n  /**\n   * Run through the middleware stack by `key` with `args`.\n   *\n   * @param {String} key\n   * @param {Any} ...args\n   * @return {Any}\n   */\n\n  run(key, ...args) {\n    const { controller, middleware } = this\n    const fns = middleware[key] || []\n    let i = 0\n\n    function next(...overrides) {\n      const fn = fns[i++]\n      if (!fn) return\n\n      if (overrides.length) {\n        args = overrides\n      }\n\n      const ret = fn(...args, controller, next)\n      return ret\n    }\n\n    Object.defineProperty(next, 'change', {\n      get() {\n        invariant(\n          false,\n          'As of Slate 0.42, the `editor` is no longer passed as the third argument to event handlers. You can access it via `change.editor` instead.'\n        )\n      },\n    })\n\n    Object.defineProperty(next, 'onChange', {\n      get() {\n        invariant(\n          false,\n          'As of Slate 0.42, the `editor` is no longer passed as the third argument to event handlers. You can access it via `change.editor` instead.'\n        )\n      },\n    })\n\n    Object.defineProperty(next, 'props', {\n      get() {\n        invariant(\n          false,\n          'As of Slate 0.42, the `editor` is no longer passed as the third argument to event handlers. You can access it via `change.editor` instead.'\n        )\n      },\n    })\n\n    Object.defineProperty(next, 'schema', {\n      get() {\n        invariant(\n          false,\n          'As of Slate 0.42, the `editor` is no longer passed as the third argument to event handlers. You can access it via `change.editor` instead.'\n        )\n      },\n    })\n\n    Object.defineProperty(next, 'stack', {\n      get() {\n        invariant(\n          false,\n          'As of Slate 0.42, the `editor` is no longer passed as the third argument to event handlers. You can access it via `change.editor` instead.'\n        )\n      },\n    })\n\n    return next()\n  }\n\n  /**\n   * Set the `readOnly` flag.\n   *\n   * @param {Boolean} readOnly\n   * @return {Editor}\n   */\n\n  setReadOnly(readOnly) {\n    this.readOnly = readOnly\n    return this\n  }\n\n  /**\n   * Set the editor's `value`.\n   *\n   * @param {Value} value\n   * @param {Options} options\n   * @return {Editor}\n   */\n\n  setValue(value, options = {}) {\n    const { normalize = value !== this.value } = options\n    this.value = value\n\n    if (normalize) {\n      this.normalize()\n    }\n\n    return this\n  }\n\n  /**\n   * Apply a series of changes inside a synchronous `fn`, deferring\n   * normalization until after the function has finished executing.\n   *\n   * @param {Function} fn\n   * @return {Editor}\n   */\n\n  withoutNormalizing(fn) {\n    const { controller } = this\n    const value = this.tmp.normalize\n    this.tmp.normalize = false\n    fn(controller)\n    this.tmp.normalize = value\n    normalizeDirtyPaths(this)\n    return controller\n  }\n\n  /**\n   * Deprecated.\n   */\n\n  get editor() {\n    warning(\n      false,\n      \"As of Slate 0.43 the `change` object has been replaced with `editor`, so you don't need to access `change.editor`.\"\n    )\n\n    return this.controller\n  }\n\n  change(fn, ...args) {\n    warning(\n      false,\n      'As of Slate 0.43 the `change` object has been replaced with `editor`, so the `editor.change()` method is deprecated.`'\n    )\n\n    fn(this.controller, ...args)\n  }\n\n  call(fn, ...args) {\n    warning(\n      false,\n      'As of Slate 0.43 the `editor.call(fn)` method has been deprecated, please use `editor.command(fn)` instead.'\n    )\n\n    fn(this.controller, ...args)\n    return this.controller\n  }\n\n  applyOperations(operations) {\n    warning(\n      false,\n      'As of Slate 0.43 the `applyOperations` method is deprecated, please apply each operation in a loop instead.'\n    )\n\n    operations.forEach(op => this.applyOperation(op))\n    return this.controller\n  }\n\n  setOperationFlag(key, value) {\n    warning(\n      false,\n      'As of slate@0.41 the `change.setOperationFlag` method has been deprecated.'\n    )\n\n    this.tmp[key] = value\n    return this\n  }\n\n  getFlag(key, options = {}) {\n    warning(\n      false,\n      'As of slate@0.41 the `change.getFlag` method has been deprecated.'\n    )\n\n    return options[key] !== undefined ? options[key] : this.tmp[key]\n  }\n\n  unsetOperationFlag(key) {\n    warning(\n      false,\n      'As of slate@0.41 the `change.unsetOperationFlag` method has been deprecated.'\n    )\n\n    delete this.tmp[key]\n    return this\n  }\n\n  withoutNormalization(fn) {\n    warning(\n      false,\n      'As of slate@0.41 the `change.withoutNormalization` helper has been renamed to `change.withoutNormalizing`.'\n    )\n\n    return this.withoutNormalizing(fn)\n  }\n}\n\n/**\n * Get the \"dirty\" paths for a given `operation`.\n *\n * @param {Operation} operation\n * @return {Array}\n */\n\nfunction getDirtyPaths(operation) {\n  const { type, node, path, newPath } = operation\n\n  switch (type) {\n    case 'add_mark':\n    case 'insert_text':\n    case 'remove_mark':\n    case 'remove_text':\n    case 'set_mark':\n    case 'set_node': {\n      const ancestors = PathUtils.getAncestors(path).toArray()\n      return [...ancestors, path]\n    }\n\n    case 'insert_node': {\n      const table = node.getKeysToPathsTable()\n      const paths = Object.values(table).map(p => path.concat(p))\n      const ancestors = PathUtils.getAncestors(path).toArray()\n      return [...ancestors, path, ...paths]\n    }\n\n    case 'split_node': {\n      const ancestors = PathUtils.getAncestors(path).toArray()\n      const nextPath = PathUtils.increment(path)\n      return [...ancestors, path, nextPath]\n    }\n\n    case 'merge_node': {\n      const ancestors = PathUtils.getAncestors(path).toArray()\n      const previousPath = PathUtils.decrement(path)\n      return [...ancestors, previousPath]\n    }\n\n    case 'move_node': {\n      if (PathUtils.isEqual(path, newPath)) {\n        return []\n      }\n\n      const oldAncestors = PathUtils.getAncestors(path).reduce((arr, p) => {\n        arr.push(...PathUtils.transform(p, operation).toArray())\n        return arr\n      }, [])\n\n      const newAncestors = PathUtils.getAncestors(newPath).reduce((arr, p) => {\n        arr.push(...PathUtils.transform(p, operation).toArray())\n        return arr\n      }, [])\n\n      return [...oldAncestors, ...newAncestors]\n    }\n\n    case 'remove_node': {\n      const ancestors = PathUtils.getAncestors(path).toArray()\n      return [...ancestors]\n    }\n\n    default: {\n      return []\n    }\n  }\n}\n\n/**\n * Normalize any new \"dirty\" paths that have been added to the change.\n *\n * @param {Editor}\n */\n\nfunction normalizeDirtyPaths(editor) {\n  if (!editor.tmp.normalize) {\n    return\n  }\n\n  if (!editor.tmp.dirty.length) {\n    return\n  }\n\n  editor.withoutNormalizing(() => {\n    while (editor.tmp.dirty.length) {\n      const path = editor.tmp.dirty.pop()\n      normalizeNodeByPath(editor, path)\n    }\n  })\n}\n\n/**\n * Normalize the node at a specific `path`.\n *\n * @param {Editor} editor\n * @param {Array} path\n */\n\nfunction normalizeNodeByPath(editor, path) {\n  const { controller } = editor\n  let { value } = editor\n  let { document } = value\n  let node = document.assertNode(path)\n  let iterations = 0\n  const max = 100 + (node.object === 'text' ? 1 : node.nodes.size)\n\n  while (node) {\n    const fn = node.normalize(controller)\n\n    if (!fn) {\n      break\n    }\n\n    // Run the normalize `fn` to fix the node.\n    fn(controller)\n\n    // Attempt to re-find the node by path, or by key if it has changed\n    // locations in the tree continue iterating.\n    value = editor.value\n    document = value.document\n    const { key } = node\n    let found = document.getDescendant(path)\n\n    if (found && found.key === key) {\n      node = found\n    } else {\n      found = document.getDescendant(key)\n\n      if (found) {\n        node = found\n        path = document.getPath(key)\n      } else {\n        // If it no longer exists by key, it was removed, so we're done.\n        break\n      }\n    }\n\n    // Increment the iterations counter, and check to make sure that we haven't\n    // exceeded the max. Without this check, it's easy for the `normalize`\n    // function of a schema rule to be written incorrectly and for an infinite\n    // invalid loop to occur.\n    iterations++\n\n    if (iterations > max) {\n      throw new Error(\n        'A schema rule could not be normalized after sufficient iterations. This is usually due to a `rule.normalize` or `plugin.normalizeNode` function of a schema being incorrectly written, causing an infinite loop.'\n      )\n    }\n  }\n}\n\n/**\n * Register a `plugin` with the editor.\n *\n * @param {Editor} editor\n * @param {Object|Array} plugin\n */\n\nfunction registerPlugin(editor, plugin) {\n  if (Array.isArray(plugin)) {\n    plugin.forEach(p => registerPlugin(editor, p))\n    return\n  }\n\n  const { commands, queries, schema, ...rest } = plugin\n\n  if (commands) {\n    const commandsPlugin = CommandsPlugin(commands)\n    registerPlugin(editor, commandsPlugin)\n  }\n\n  if (queries) {\n    const queriesPlugin = QueriesPlugin(queries)\n    registerPlugin(editor, queriesPlugin)\n  }\n\n  if (schema) {\n    const schemaPlugin = SchemaPlugin(schema)\n    registerPlugin(editor, schemaPlugin)\n  }\n\n  for (const key in rest) {\n    const fn = rest[key]\n    const middleware = (editor.middleware[key] = editor.middleware[key] || [])\n    middleware.push(fn)\n  }\n}\n\n/**\n * Export.\n *\n * @type {Editor}\n */\n\nexport default Editor\n","/**\n * Mix in an `Interface` to a `Class`.\n *\n * @param {Class} Interface\n * @param {Class} Class\n */\n\nexport default function mixin(Interface, Classes) {\n  for (const Class of Classes) {\n    // Copy static properties from the interface.\n    for (const name of Object.getOwnPropertyNames(Interface)) {\n      if (Class.hasOwnProperty(name)) continue\n      const desc = Object.getOwnPropertyDescriptor(Interface, name)\n      Object.defineProperty(Class, name, desc)\n    }\n\n    // Copy instance properties from the interface.\n    for (const name of Object.getOwnPropertyNames(Interface.prototype)) {\n      if (Class.prototype.hasOwnProperty(name)) continue\n      const desc = Object.getOwnPropertyDescriptor(Interface.prototype, name)\n      Object.defineProperty(Class.prototype, name, desc)\n    }\n  }\n}\n","import Block from '../models/block'\nimport Change from '../models/change'\nimport Decoration from '../models/decoration'\nimport Document from '../models/document'\nimport Editor from '../controllers/editor'\nimport Inline from '../models/inline'\nimport Leaf from '../models/leaf'\nimport Mark from '../models/mark'\nimport Node from '../models/node'\nimport Operation from '../models/operation'\nimport Point from '../models/point'\nimport Range from '../models/range'\nimport Selection from '../models/selection'\nimport Text from '../models/text'\nimport Value from '../models/value'\nimport isObject, { TYPES } from '../utils/is-object'\nimport mixin from '../utils/mixin'\n\n/**\n * A factory for the interface that all Slate objects implement.\n *\n * @type {Function}\n */\n\nfunction create(type) {\n  const TYPE = TYPES[type]\n  const camel = `${type.charAt(0).toUpperCase()}${type.slice(1)}`\n  const is = `is${camel}`\n\n  class ObjectInterface {\n    /**\n     * Return the type of the object.\n     *\n     * @return {String}\n     */\n\n    get object() {\n      return type\n    }\n  }\n\n  ObjectInterface[is] = isObject.bind(null, type)\n  ObjectInterface.prototype[TYPE] = true\n  return ObjectInterface\n}\n\n/**\n * Mix in the object interfaces.\n */\n\nObject.entries({\n  Block,\n  Change,\n  Decoration,\n  Document,\n  Editor,\n  Inline,\n  Leaf,\n  Mark,\n  Node,\n  Operation,\n  Point,\n  Range,\n  Selection,\n  Text,\n  Value,\n}).forEach(([camel, obj]) => mixin(create(camel.toLowerCase()), [obj]))\n","import mixin from '../utils/mixin'\nimport Block from '../models/block'\nimport Decoration from '../models/decoration'\nimport Document from '../models/document'\nimport Inline from '../models/inline'\nimport Leaf from '../models/leaf'\nimport Mark from '../models/mark'\nimport Node from '../models/node'\nimport Operation from '../models/operation'\nimport Point from '../models/point'\nimport Range from '../models/range'\nimport Selection from '../models/selection'\nimport Text from '../models/text'\nimport Value from '../models/value'\n\n/**\n * The interface that all Slate models implement.\n *\n * @type {Class}\n */\n\nclass ModelInterface {\n  /**\n   * Alias `fromJS`.\n   */\n\n  static fromJS(...args) {\n    return this.fromJSON(...args)\n  }\n\n  /**\n   * Alias `toJS`.\n   */\n\n  toJS(...args) {\n    return this.toJSON(...args)\n  }\n}\n\n/**\n * Mix in the common interface.\n *\n * @param {Record}\n */\n\nmixin(ModelInterface, [\n  Block,\n  Decoration,\n  Document,\n  Inline,\n  Leaf,\n  Mark,\n  Node,\n  Operation,\n  Point,\n  Range,\n  Selection,\n  Text,\n  Value,\n])\n","import warning from 'tiny-warning'\nimport { List } from 'immutable'\n\nimport mixin from '../utils/mixin'\nimport Block from '../models/block'\nimport Document from '../models/document'\nimport Inline from '../models/inline'\nimport KeyUtils from '../utils/key-utils'\nimport memoize from '../utils/memoize'\nimport PathUtils from '../utils/path-utils'\nimport Text from '../models/text'\n\n/**\n * The interface that `Document`, `Block` and `Inline` all implement, to make\n * working with the recursive node tree easier.\n *\n * @type {Class}\n */\n\nclass NodeInterface {\n  /**\n   * Get the concatenated text of the node.\n   *\n   * @return {String}\n   */\n\n  get text() {\n    return this.getText()\n  }\n\n  /**\n   * Get the first text node of a node, or the node itself.\n   *\n   * @return {Node|Null}\n   */\n\n  getFirstText() {\n    if (this.object === 'text') {\n      return this\n    }\n\n    let descendant = null\n\n    const found = this.nodes.find(node => {\n      if (node.object === 'text') return true\n      descendant = node.getFirstText()\n      return !!descendant\n    })\n\n    return descendant || found\n  }\n\n  /**\n   * Get an object mapping all the keys in the node to their paths.\n   *\n   * @return {Object}\n   */\n\n  getKeysToPathsTable() {\n    const ret = {\n      [this.key]: [],\n    }\n\n    if (this.nodes) {\n      this.nodes.forEach((node, i) => {\n        const nested = node.getKeysToPathsTable()\n\n        for (const key in nested) {\n          const path = nested[key]\n\n          warning(\n            !(key in ret),\n            `A node with a duplicate key of \"${key}\" was found! Duplicate keys are not allowed, you should use \\`node.regenerateKey\\` before inserting if you are reusing an existing node.`\n          )\n\n          ret[key] = [i, ...path]\n        }\n      })\n    }\n\n    return ret\n  }\n\n  /**\n   * Get the last text node of a node, or the node itself.\n   *\n   * @return {Node|Null}\n   */\n\n  getLastText() {\n    if (this.object === 'text') {\n      return this\n    }\n\n    let descendant = null\n\n    const found = this.nodes.findLast(node => {\n      if (node.object === 'text') return true\n      descendant = node.getLastText()\n      return descendant\n    })\n\n    return descendant || found\n  }\n\n  /**\n   * Get a node in the tree, or the node itself.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getNode(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (this.object === 'text' && path.size) return null\n    const node = path.size ? this.getDescendant(path) : this\n    return node\n  }\n\n  /**\n   * Find the path to a node.\n   *\n   * @param {String|List} key\n   * @return {List}\n   */\n\n  getPath(key) {\n    // Handle the case of passing in a path directly, to match other methods.\n    if (List.isList(key)) return key\n\n    const dict = this.getKeysToPathsTable()\n    const path = dict[key]\n    return path ? List(path) : null\n  }\n\n  /**\n   * Get the concatenated text string of a node.\n   *\n   * @return {String}\n   */\n\n  getText() {\n    const children = this.object === 'text' ? this.leaves : this.nodes\n    const text = children.reduce((memo, c) => memo + c.text, '')\n    return text\n  }\n\n  /**\n   * Check if a node exists.\n   *\n   * @param {List|String} path\n   * @return {Boolean}\n   */\n\n  hasNode(path) {\n    const node = this.getNode(path)\n    return !!node\n  }\n\n  /**\n   * Normalize the text node with an `editor`.\n   *\n   * @param {Editor} editor\n   * @return {Function|Void}\n   */\n\n  normalize(editor) {\n    const normalizer = editor.run('normalizeNode', this)\n    return normalizer\n  }\n\n  /**\n   * Regenerate the node's key.\n   *\n   * @return {Node}\n   */\n\n  regenerateKey() {\n    const key = KeyUtils.create()\n    const node = this.set('key', key)\n    return node\n  }\n\n  /**\n   * Resolve a path from a path list or key string.\n   *\n   * An `index` can be provided, in which case paths created from a key string\n   * will have the index pushed onto them. This is helpful in cases where you\n   * want to accept either a `path` or a `key, index` combination for targeting\n   * a location in the tree that doesn't exist yet, like when inserting.\n   *\n   * @param {List|String} value\n   * @param {Number} index\n   * @return {List}\n   */\n\n  resolvePath(path, index) {\n    if (typeof path === 'string') {\n      path = this.getPath(path)\n\n      if (index != null) {\n        path = path.concat(index)\n      }\n    } else {\n      path = PathUtils.create(path)\n    }\n\n    return path\n  }\n\n  /**\n   * Validate the node with an `editor`.\n   *\n   * @param {Editor} editor\n   * @return {Error|Void}\n   */\n\n  validate(editor) {\n    const error = editor.run('validateNode', this)\n    return error\n  }\n}\n\n/**\n * Memoize read methods.\n */\n\nmemoize(NodeInterface.prototype, [\n  'getFirstText',\n  'getKeysToPathsTable',\n  'getLastText',\n  'getText',\n  'normalize',\n  'validate',\n])\n\n/**\n * Mix in the node interface.\n */\n\nmixin(NodeInterface, [Block, Document, Inline, Text])\n","import direction from 'direction'\nimport invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport { List, OrderedSet, Set, Stack } from 'immutable'\n\nimport mixin from '../utils/mixin'\nimport Block from '../models/block'\nimport Decoration from '../models/decoration'\nimport Document from '../models/document'\nimport Inline from '../models/inline'\nimport memoize from '../utils/memoize'\nimport PathUtils from '../utils/path-utils'\nimport Point from '../models/point'\nimport Range from '../models/range'\nimport Selection from '../models/selection'\nimport Value from '../models/value'\nimport Operation from '../models/operation'\n\n/**\n * The interface that `Document`, `Block` and `Inline` all implement, to make\n * working with the recursive node tree easier.\n *\n * @type {Class}\n */\n\nclass ElementInterface {\n  /**\n   * Add mark to text at `offset` and `length` in node by `path`.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Node}\n   */\n\n  addMark(path, offset, length, mark) {\n    let node = this.assertDescendant(path)\n    path = this.resolvePath(path)\n    node = node.addMark(offset, length, mark)\n    const ret = this.replaceNode(path, node)\n    return ret\n  }\n\n  /**\n   * Create a decoration with `properties` relative to the node.\n   *\n   * @param {Object|Decoration} properties\n   * @return {Decoration}\n   */\n\n  createDecoration(properties) {\n    properties = Decoration.createProperties(properties)\n    const decoration = this.resolveDecoration(properties)\n    return decoration\n  }\n\n  /**\n   * Create a point with `properties` relative to the node.\n   *\n   * @param {Object|Point} properties\n   * @return {Range}\n   */\n\n  createPoint(properties) {\n    properties = Point.createProperties(properties)\n    const point = this.resolvePoint(properties)\n    return point\n  }\n\n  /**\n   * Create a range with `properties` relative to the node.\n   *\n   * @param {Object|Range} properties\n   * @return {Range}\n   */\n\n  createRange(properties) {\n    properties = Range.createProperties(properties)\n    const range = this.resolveRange(properties)\n    return range\n  }\n\n  /**\n   * Create a selection with `properties` relative to the node.\n   *\n   * @param {Object|Selection} properties\n   * @return {Selection}\n   */\n\n  createSelection(properties) {\n    properties = Selection.createProperties(properties)\n    const selection = this.resolveSelection(properties)\n    return selection\n  }\n\n  /**\n   * Recursively filter all descendant nodes with `iterator`.\n   *\n   * @param {Function} iterator\n   * @return {List<Node>}\n   */\n\n  filterDescendants(iterator) {\n    const matches = []\n\n    this.forEachDescendant((node, i, nodes) => {\n      if (iterator(node, i, nodes)) matches.push(node)\n    })\n\n    return List(matches)\n  }\n\n  /**\n   * Recursively find a descendant node by `iterator`.\n   *\n   * @param {Function} iterator\n   * @return {Node|Null}\n   */\n\n  findDescendant(iterator) {\n    let found = null\n\n    this.forEachDescendant((node, i, nodes) => {\n      if (iterator(node, i, nodes)) {\n        found = node\n        return false\n      }\n    })\n\n    return found\n  }\n\n  /**\n   * Recursively find a descendant node and its path by `iterator`.\n   *\n   * @param {Function} iterator\n   * @return {Null|[Node, List]}\n   */\n\n  findDescendantAndPath(\n    iterator,\n    pathToThisNode = PathUtils.create([]),\n    findLast = false\n  ) {\n    let found\n    let foundPath\n\n    this.forEachDescendantWithPath(\n      (node, path, nodes) => {\n        if (iterator(node, path, nodes)) {\n          found = node\n          foundPath = path\n          return false\n        }\n      },\n      pathToThisNode,\n      findLast\n    )\n\n    return found ? [found, foundPath] : null\n  }\n\n  // Easy helpers to avoid needing to pass findLast boolean\n  findFirstDescendantAndPath(iterator, pathToThisNode) {\n    return this.findDescendantAndPath(iterator, pathToThisNode, false)\n  }\n\n  findLastDescendantAndPath(iterator, pathToThisNode) {\n    return this.findDescendantAndPath(iterator, pathToThisNode, true)\n  }\n\n  /**\n   * Recursively iterate over all descendant nodes with `iterator`. If the\n   * iterator returns false it will break the loop.\n   *\n   * @param {Function} iterator\n   */\n\n  forEachDescendant(iterator) {\n    let ret\n\n    this.nodes.forEach((child, i, nodes) => {\n      if (iterator(child, i, nodes) === false) {\n        ret = false\n        return false\n      }\n\n      if (child.object !== 'text') {\n        ret = child.forEachDescendant(iterator)\n        return ret\n      }\n    })\n\n    return ret\n  }\n\n  /**\n   * Recursively iterate over all descendant nodes with `iterator`. If the\n   * iterator returns false it will break the loop.\n   * Calls iterator with node and path.\n   *\n   * @param {Function} iterator\n   * @param {List} path\n   * @param {Boolean} findLast - whether to iterate in reverse order\n   */\n\n  forEachDescendantWithPath(iterator, path = PathUtils.create([]), findLast) {\n    let nodes = this.nodes\n    let ret\n\n    if (findLast) nodes = nodes.reverse()\n\n    nodes.forEach((child, i) => {\n      const childPath = path.concat(i)\n\n      if (iterator(child, childPath, nodes) === false) {\n        ret = false\n        return false\n      }\n\n      if (child.object !== 'text') {\n        ret = child.forEachDescendantWithPath(iterator, childPath, findLast)\n        return ret\n      }\n    })\n\n    return ret\n  }\n\n  /**\n   * Get a set of the active marks in a `range`.\n   *\n   * @param {Range} range\n   * @return {Set<Mark>}\n   */\n\n  getActiveMarksAtRange(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return Set()\n\n    if (range.isCollapsed) {\n      const { start } = range\n      return this.getMarksAtPosition(start.path, start.offset).toSet()\n    }\n\n    const { start, end } = range\n    let startPath = start.path\n    let startOffset = start.offset\n    let endPath = end.path\n    let endOffset = end.offset\n    let startText = this.getDescendant(startPath)\n    let endText = this.getDescendant(endPath)\n\n    if (!PathUtils.isEqual(startPath, endPath)) {\n      while (!PathUtils.isEqual(startPath, endPath) && endOffset === 0) {\n        ;[endText, endPath] = this.getPreviousTextAndPath(endPath)\n        endOffset = endText.text.length\n      }\n\n      while (\n        !PathUtils.isEqual(startPath, endPath) &&\n        startOffset === startText.text.length\n      ) {\n        ;[startText, startPath] = this.getNextTextAndPath(startPath)\n        startOffset = 0\n      }\n    }\n\n    if (PathUtils.isEqual(startPath, endPath)) {\n      return startText.getActiveMarksBetweenOffsets(startOffset, endOffset)\n    }\n\n    const startMarks = startText.getActiveMarksBetweenOffsets(\n      startOffset,\n      startText.text.length\n    )\n    if (startMarks.size === 0) return Set()\n    const endMarks = endText.getActiveMarksBetweenOffsets(0, endOffset)\n    let marks = startMarks.intersect(endMarks)\n\n    // If marks is already empty, the active marks is empty\n    if (marks.size === 0) {\n      return marks\n    }\n\n    ;[startText, startPath] = this.getNextTextAndPath(startPath)\n\n    while (!PathUtils.isEqual(startPath, endPath)) {\n      if (startText.text.length !== 0) {\n        marks = marks.intersect(startText.getActiveMarks())\n        if (marks.size === 0) return Set()\n      }\n\n      ;[startText, startPath] = this.getNextTextAndPath(startPath)\n    }\n    return marks\n  }\n\n  /**\n   * Get a list of the ancestors of a descendant.\n   *\n   * @param {List|String} path\n   * @return {List<Node>|Null}\n   */\n\n  getAncestors(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n\n    const ancestors = []\n\n    path.forEach((p, i) => {\n      const current = path.slice(0, i)\n      const parent = this.getNode(current)\n      ancestors.push(parent)\n    })\n\n    return List(ancestors)\n  }\n\n  /**\n   * Get the leaf block descendants of the node.\n   *\n   * @return {List<Node>}\n   */\n\n  getBlocks() {\n    const array = this.getBlocksAsArray()\n    return List(array)\n  }\n\n  /**\n   * Get the leaf block descendants of the node.\n   *\n   * @return {List<Node>}\n   */\n\n  getBlocksAsArray() {\n    return this.nodes.reduce((array, child) => {\n      if (child.object !== 'block') return array\n      if (!child.isLeafBlock()) return array.concat(child.getBlocksAsArray())\n      array.push(child)\n      return array\n    }, [])\n  }\n\n  /**\n   * Get the leaf block descendants in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getBlocksAtRange(range) {\n    warning(\n      false,\n      'As of slate@0.44 the `node.getBlocksAtRange` method has been renamed to `getLeafBlocksAtRange`.'\n    )\n\n    return this.getLeafBlocksAtRange(range)\n  }\n\n  /**\n   * Get the bottom-most block descendants in a `range` as an array\n   *\n   * @param {Range} range\n   * @return {Array}\n   */\n\n  getBlocksAtRangeAsArray(range) {\n    warning(\n      false,\n      'As of slate@0.44 the `node.getBlocksAtRangeAsArray` method has been renamed to `getLeafBlocksAtRangeAsArray`.'\n    )\n\n    return this.getLeafBlocksAtRangeAsArray(range)\n  }\n\n  /**\n   * Get all of the leaf blocks that match a `type`.\n   *\n   * @param {String} type\n   * @return {List<Node>}\n   */\n\n  getBlocksByType(type) {\n    const array = this.getBlocksByTypeAsArray(type)\n    return List(array)\n  }\n\n  /**\n   * Get all of the leaf blocks that match a `type` as an array\n   *\n   * @param {String} type\n   * @return {Array}\n   */\n\n  getBlocksByTypeAsArray(type) {\n    return this.nodes.reduce((array, node) => {\n      if (node.object !== 'block') {\n        return array\n      } else if (node.isLeafBlock() && node.type === type) {\n        array.push(node)\n        return array\n      } else {\n        return array.concat(node.getBlocksByTypeAsArray(type))\n      }\n    }, [])\n  }\n\n  /**\n   * Get a child node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getChild(path) {\n    path = this.resolvePath(path)\n    if (!path || path.size > 1) return null\n    const child = this.nodes.get(path.first())\n    return child\n  }\n\n  /**\n   * Get closest parent of node that matches an `iterator`.\n   *\n   * @param {List|String} path\n   * @param {Function} iterator\n   * @return {Node|Null}\n   */\n\n  getClosest(path, iterator) {\n    const ancestors = this.getAncestors(path)\n    if (!ancestors) return null\n\n    const closest = ancestors.findLast((node, ...args) => {\n      // We never want to include the top-level node.\n      if (node === this) return false\n      return iterator(node, ...args)\n    })\n\n    return closest || null\n  }\n\n  /**\n   * Get the closest block parent of a node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getClosestBlock(path) {\n    const closest = this.getClosest(path, n => n.object === 'block')\n    return closest\n  }\n\n  /**\n   * Get the closest inline parent of a node by `path`.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getClosestInline(path) {\n    const closest = this.getClosest(path, n => n.object === 'inline')\n    return closest\n  }\n\n  /**\n   * Get the closest void parent of a node by `path`.\n   *\n   * @param {List|String} path\n   * @param {Editor} editor\n   * @return {Node|Null}\n   */\n\n  getClosestVoid(path, editor) {\n    invariant(\n      !Value.isValue(editor),\n      'As of Slate 0.42.0, the `node.getClosestVoid` method takes an `editor` instead of a `value`.'\n    )\n\n    const ancestors = this.getAncestors(path)\n    if (!ancestors) return null\n\n    const ancestor = ancestors.findLast(a => editor.query('isVoid', a))\n    return ancestor\n  }\n\n  /**\n   * Get the common ancestor of nodes `a` and `b`.\n   *\n   * @param {List} a\n   * @param {List} b\n   * @return {Node}\n   */\n\n  getCommonAncestor(a, b) {\n    a = this.resolvePath(a)\n    b = this.resolvePath(b)\n    if (!a || !b) return null\n\n    const path = PathUtils.relate(a, b)\n    const node = this.getNode(path)\n    return node\n  }\n\n  /**\n   * Get the decorations for the node from an `editor`.\n   *\n   * @param {Editor} editor\n   * @return {List}\n   */\n\n  getDecorations(editor) {\n    invariant(\n      !Value.isValue(editor),\n      'As of Slate 0.42.0, the `node.getDecorations` method takes an `editor` instead of a `value`.'\n    )\n\n    const array = editor.run('decorateNode', this)\n    const decorations = Decoration.createList(array)\n    return decorations\n  }\n\n  /**\n   * Get the depth of a descendant, with optional `startAt`.\n   *\n   * @param {List|String} path\n   * @param {Number} startAt\n   * @return {Number|Null}\n   */\n\n  getDepth(path, startAt = 1) {\n    path = this.resolvePath(path)\n    if (!path) return null\n\n    const node = this.getNode(path)\n    const depth = node ? path.size - 1 + startAt : null\n    return depth\n  }\n\n  /**\n   * Get a descendant node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getDescendant(path) {\n    path = this.resolvePath(path)\n    if (!path || !path.size) return null\n\n    let node = this\n\n    path.forEach(index => {\n      node = node.getIn(['nodes', index])\n      return !!node\n    })\n\n    return node\n  }\n\n  /**\n   * Get a fragment of the node at a `range`.\n   *\n   * @param {Range} range\n   * @return {Document}\n   */\n\n  getFragmentAtRange(range) {\n    range = this.resolveRange(range)\n\n    if (range.isUnset) {\n      return Document.create()\n    }\n\n    const { start, end } = range\n    let node = this\n    let targetPath = end.path\n    let targetPosition = end.offset\n    let mode = 'end'\n\n    while (targetPath.size) {\n      const index = targetPath.last()\n      node = node.splitNode(targetPath, targetPosition)\n      targetPosition = index + 1\n      targetPath = PathUtils.lift(targetPath)\n\n      if (!targetPath.size && mode === 'end') {\n        targetPath = start.path\n        targetPosition = start.offset\n        mode = 'start'\n      }\n    }\n\n    const startIndex = start.path.first() + 1\n    const endIndex = end.path.first() + 2\n    const nodes = node.nodes.slice(startIndex, endIndex)\n    const fragment = Document.create({ nodes })\n    return fragment\n  }\n\n  /**\n   * Get the furthest parent of a node that matches an `iterator`.\n   *\n   * @param {Path} path\n   * @param {Function} iterator\n   * @return {Node|Null}\n   */\n\n  getFurthest(path, iterator) {\n    const ancestors = this.getAncestors(path)\n    if (!ancestors) return null\n\n    const furthest = ancestors.find((node, ...args) => {\n      // We never want to include the top-level node.\n      if (node === this) return false\n      return iterator(node, ...args)\n    })\n\n    return furthest || null\n  }\n\n  /**\n   * Get the furthest ancestor of a node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getFurthestAncestor(path) {\n    path = this.resolvePath(path)\n    if (!path || !path.size) return null\n    const furthest = this.nodes.get(path.first())\n    return furthest\n  }\n\n  /**\n   * Get the furthest block parent of a node.\n   *\n   * @param {Path} path\n   * @return {Node|Null}\n   */\n\n  getFurthestBlock(path) {\n    const furthest = this.getFurthest(path, n => n.object === 'block')\n    return furthest\n  }\n\n  /**\n   * Get the furthest inline parent of a node.\n   *\n   * @param {Path} path\n   * @return {Node|Null}\n   */\n\n  getFurthestInline(path) {\n    const furthest = this.getFurthest(path, n => n.object === 'inline')\n    return furthest\n  }\n\n  /**\n   * Get the furthest ancestor of a node, where all ancestors to that point only have one child.\n   *\n   * @param {Path} path\n   * @return {Node|Null}\n   */\n\n  getFurthestOnlyChildAncestor(path) {\n    const ancestors = this.getAncestors(path)\n    if (!ancestors) return null\n\n    const furthest = ancestors\n      .rest()\n      .reverse()\n      .takeUntil(p => p.nodes.size > 1)\n      .last()\n\n    return furthest || null\n  }\n\n  /**\n   * Get the closest inline nodes for each text node in the node.\n   *\n   * @return {List<Node>}\n   */\n\n  getInlines() {\n    const array = this.getInlinesAsArray()\n    const list = List(array)\n    return list\n  }\n\n  /**\n   * Get the closest inline nodes for each text node in the node, as an array.\n   *\n   * @return {Array<Node>}\n   */\n\n  getInlinesAsArray() {\n    let array = []\n\n    this.nodes.forEach(child => {\n      if (child.object === 'text') return\n\n      if (child.isLeafInline()) {\n        array.push(child)\n      } else {\n        array = array.concat(child.getInlinesAsArray())\n      }\n    })\n\n    return array\n  }\n\n  /**\n   * Get the bottom-most inline nodes for each text node in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getInlinesAtRange(range) {\n    warning(\n      false,\n      'As of slate@0.44 the `node.getInlinesAtRange` method has been renamed to `getLeafInlinesAtRange`.'\n    )\n\n    return this.getLeafInlinesAtRange(range)\n  }\n\n  /**\n   * Get the bottom-most inline nodes for each text node in a `range` as an array.\n   *\n   * @param {Range} range\n   * @return {Array}\n   */\n\n  getInlinesAtRangeAsArray(range) {\n    warning(\n      false,\n      'As of slate@0.44 the `node.getInlinesAtRangeAsArray` method has been renamed to `getLeafInlinesAtRangeAsArray`.'\n    )\n\n    return this.getLeafInlinesAtRangeAsArray(range)\n  }\n\n  /**\n   * Get all of the leaf inline nodes that match a `type`.\n   *\n   * @param {String} type\n   * @return {List<Node>}\n   */\n\n  getInlinesByType(type) {\n    const array = this.getInlinesByTypeAsArray(type)\n    const list = List(array)\n    return list\n  }\n\n  /**\n   * Get all of the leaf inline nodes that match a `type` as an array.\n   *\n   * @param {String} type\n   * @return {Array}\n   */\n\n  getInlinesByTypeAsArray(type) {\n    const array = this.nodes.reduce((inlines, node) => {\n      if (node.object === 'text') {\n        return inlines\n      } else if (node.isLeafInline() && node.type === type) {\n        inlines.push(node)\n        return inlines\n      } else {\n        return inlines.concat(node.getInlinesByTypeAsArray(type))\n      }\n    }, [])\n\n    return array\n  }\n\n  /**\n   * Get a set of the marks in a `range`.\n   *\n   * @param {Range} range\n   * @return {Set<Mark>}\n   */\n\n  getInsertMarksAtRange(range) {\n    range = this.resolveRange(range)\n    const { start } = range\n\n    if (range.isUnset) {\n      return Set()\n    }\n\n    if (range.isCollapsed) {\n      // PERF: range is not cachable, use key and offset as proxies for cache\n      return this.getMarksAtPosition(start.path, start.offset)\n    }\n\n    const text = this.getDescendant(start.path)\n    const marks = text.getMarksAtIndex(start.offset + 1)\n    return marks\n  }\n\n  /**\n   * Get the bottom-most block descendants in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getLeafBlocksAtRange(range) {\n    const array = this.getLeafBlocksAtRangeAsArray(range)\n    // Eliminate duplicates by converting to an `OrderedSet` first.\n    return List(OrderedSet(array))\n  }\n\n  /**\n   * Get the bottom-most descendants in a `range` as an array\n   *\n   * @param {Range} range\n   * @return {Array<Node>}\n   */\n\n  getLeafBlocksAtRangeAsArray(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return []\n\n    const { start, end } = range\n\n    return this.getLeafBlocksBetweenPathPositionsAsArray(start.path, end.path)\n  }\n\n  /**\n   * Get the bottom-most descendants between two paths as an array\n   *\n   * @param {List|Null} startPath\n   * @param {List|Null} endPath\n   * @return {Array<Node>}\n   */\n\n  getLeafBlocksBetweenPathPositionsAsArray(startPath, endPath) {\n    // PERF: the most common case is when the range is in a single block node,\n    // where we can avoid a lot of iterating of the tree.\n    if (startPath && endPath && PathUtils.isEqual(startPath, endPath)) {\n      return [this.getClosestBlock(startPath)]\n    } else if (!startPath && !endPath) {\n      return this.getBlocksAsArray()\n    }\n\n    const startIndex = startPath ? startPath.get(0, 0) : 0\n    const endIndex = endPath\n      ? endPath.get(0, this.nodes.size - 1)\n      : this.nodes.size - 1\n\n    let array = []\n\n    this.nodes.slice(startIndex, endIndex + 1).forEach((node, i) => {\n      if (node.object !== 'block') {\n        return\n      } else if (node.isLeafBlock()) {\n        array.push(node)\n      } else {\n        const childStartPath =\n          startPath && i === 0 ? PathUtils.drop(startPath) : null\n        const childEndPath =\n          endPath && i === endIndex - startIndex\n            ? PathUtils.drop(endPath)\n            : null\n\n        array = array.concat(\n          node.getLeafBlocksBetweenPathPositionsAsArray(\n            childStartPath,\n            childEndPath\n          )\n        )\n      }\n    })\n\n    return array\n  }\n\n  /**\n   * Get the bottom-most inline nodes for each text node in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getLeafInlinesAtRange(range) {\n    const array = this.getLeafInlinesAtRangeAsArray(range)\n    // Remove duplicates by converting it to an `OrderedSet` first.\n    const list = List(OrderedSet(array))\n    return list\n  }\n\n  /**\n   * Get the bottom-most inline nodes for each text node in a `range` as an array.\n   *\n   * @param {Range} range\n   * @return {Array<Node>}\n   */\n\n  getLeafInlinesAtRangeAsArray(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return []\n\n    const array = this.getTextsAtRangeAsArray(range)\n      .map(text => this.getClosestInline(text.key))\n      .filter(exists => exists)\n\n    return array\n  }\n\n  /**\n   * Get all of the marks for all of the characters of every text node.\n   *\n   * @return {Set<Mark>}\n   */\n\n  getMarks() {\n    const array = this.getMarksAsArray()\n    return Set(array)\n  }\n\n  /**\n   * Get all of the marks as an array.\n   *\n   * @return {Array}\n   */\n\n  getMarksAsArray() {\n    const result = []\n\n    this.nodes.forEach(node => {\n      result.push(node.getMarksAsArray())\n    })\n\n    // PERF: use only one concat rather than multiple for speed.\n    const array = [].concat(...result)\n    return array\n  }\n\n  /**\n   * Get a set of marks in a `position`, the equivalent of a collapsed range\n   *\n   * @param {List|string} key\n   * @param {number} offset\n   * @return {Set}\n   */\n\n  getMarksAtPosition(path, offset) {\n    path = this.resolvePath(path)\n    const text = this.getDescendant(path)\n    const currentMarks = text.getMarksAtIndex(offset)\n    if (offset !== 0) return currentMarks\n    const closestBlock = this.getClosestBlock(path)\n\n    if (closestBlock.text === '') {\n      // insert mark for empty block; the empty block are often created by split node or add marks in a range including empty blocks\n      return currentMarks\n    }\n\n    const previous = this.getPreviousTextAndPath(path)\n    if (!previous) return Set()\n\n    const [previousText, previousPath] = previous\n\n    if (closestBlock.hasDescendant(previousPath)) {\n      return previousText.getMarksAtIndex(previousText.text.length)\n    }\n\n    return currentMarks\n  }\n\n  /**\n   * Get a set of the marks in a `range`.\n   *\n   * @param {Range} range\n   * @return {Set<Mark>}\n   */\n\n  getMarksAtRange(range) {\n    const marks = Set(this.getOrderedMarksAtRange(range))\n    return marks\n  }\n\n  /**\n   * Get all of the marks that match a `type`.\n   *\n   * @param {String} type\n   * @return {Set<Mark>}\n   */\n\n  getMarksByType(type) {\n    const array = this.getMarksByTypeAsArray(type)\n    return Set(array)\n  }\n\n  /**\n   * Get all of the marks that match a `type` as an array.\n   *\n   * @param {String} type\n   * @return {Array}\n   */\n\n  getMarksByTypeAsArray(type) {\n    const array = this.nodes.reduce((memo, node) => {\n      return node.object === 'text'\n        ? memo.concat(node.getMarksAsArray().filter(m => m.type === type))\n        : memo.concat(node.getMarksByTypeAsArray(type))\n    }, [])\n\n    return array\n  }\n\n  /**\n   * Get the block node after a descendant text node by `path`.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getNextBlock(path) {\n    path = this.resolvePath(path)\n    const match = this.getNextDeepMatchingNodeAndPath(\n      path,\n      n => n.object === 'block'\n    )\n\n    return match ? match[0] : null\n  }\n\n  /**\n   * Get the next node in the tree from a node.\n   *\n   * This will not only check for siblings but instead move up the tree\n   * returning the next ancestor if no sibling is found.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getNextNode(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n\n    for (let i = path.size; i > 0; i--) {\n      const p = path.slice(0, i)\n      const target = PathUtils.increment(p)\n      const node = this.getNode(target)\n      if (node) return node\n    }\n\n    return null\n  }\n\n  /**\n   * Get the next node in the tree from a node that matches iterator\n   *\n   * This will not only check for siblings but instead move up the tree\n   * returning the next ancestor if no sibling is found.\n   *\n   * @param {List} path\n   * @return {Node|Null}\n   */\n\n  getNextMatchingNodeAndPath(path, iterator = () => true) {\n    if (!path) return null\n\n    for (let i = path.size; i > 0; i--) {\n      const p = path.slice(0, i)\n\n      let nextPath = PathUtils.increment(p)\n      let nextNode = this.getNode(nextPath)\n\n      while (nextNode && !iterator(nextNode)) {\n        nextPath = PathUtils.increment(nextPath)\n        nextNode = this.getNode(nextPath)\n      }\n\n      if (nextNode) return [nextNode, nextPath]\n    }\n\n    return null\n  }\n\n  /**\n   * Get the next, deepest node in the tree from a node that matches iterator\n   *\n   * This will not only check for siblings but instead move up the tree\n   * returning the next ancestor if no sibling is found.\n   *\n   * @param {List} path\n   * @param {Function} iterator\n   * @return {Node|Null}\n   */\n\n  getNextDeepMatchingNodeAndPath(path, iterator = () => true) {\n    const match = this.getNextMatchingNodeAndPath(path)\n\n    if (!match) return null\n\n    let [nextNode, nextPath] = match\n\n    let childMatch\n\n    const assign = () => {\n      childMatch =\n        nextNode.object !== 'text' &&\n        nextNode.findFirstDescendantAndPath(iterator, nextPath)\n      return childMatch\n    }\n\n    while (assign(childMatch)) {\n      ;[nextNode, nextPath] = childMatch\n    }\n\n    if (!nextNode) return null\n\n    return iterator(nextNode)\n      ? [nextNode, nextPath]\n      : this.getNextDeepMatchingNodeAndPath(match[1], iterator)\n  }\n\n  /**\n   * Get the next sibling of a node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getNextSibling(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n    const p = PathUtils.increment(path)\n    const sibling = this.getNode(p)\n    return sibling\n  }\n\n  /**\n   * Get the text node after a descendant text node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getNextText(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n    const next = this.getNextNode(path)\n    if (!next) return null\n    const text = next.getFirstText()\n    return text\n  }\n\n  getNextTextAndPath(path) {\n    if (!path) return null\n    if (!path.size) return null\n    const match = this.getNextDeepMatchingNodeAndPath(\n      path,\n      n => n.object === 'text'\n    )\n    return match\n  }\n\n  /**\n   * Get all of the nodes in a `range`. This includes all of the\n   * text nodes inside the range and all ancestors of those text\n   * nodes up to this node.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getNodesAtRange(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return List()\n    const { start, end } = range\n\n    // Do a depth-first stack-based search for all nodes in the range\n    // Nodes that are pushed to the stack are inside the range\n\n    // Start with the nodes that are on the highest level in the tree\n    let stack = Stack(\n      this.nodes\n        .slice(start.path.get(0), end.path.get(0) + 1)\n        .map((node, index) => ({\n          node,\n          onStartEdge: index === 0,\n          onEndEdge: index === end.path.get(0) - start.path.get(0),\n          relativeStartPath: start.path.slice(1),\n          relativeEndPath: end.path.slice(1),\n        }))\n    )\n\n    const result = []\n\n    while (stack.size > 0) {\n      const {\n        node,\n        onStartEdge,\n        onEndEdge,\n        relativeStartPath,\n        relativeEndPath,\n      } = stack.peek()\n\n      stack = stack.shift()\n      result.push(node)\n\n      if (node.object === 'text') continue\n\n      // Modify indexes to exclude children that are outside of the range\n      const startIndex = onStartEdge ? relativeStartPath.get(0) : 0\n      const endIndex = onEndEdge ? relativeEndPath.get(0) : node.nodes.size - 1\n\n      // Push children that are inside the range to the stack\n      stack = stack.pushAll(\n        node.nodes.slice(startIndex, endIndex + 1).map((n, i) => ({\n          node: n,\n          onStartEdge: onStartEdge && i === 0,\n          onEndEdge: onEndEdge && i === endIndex - startIndex,\n          relativeStartPath:\n            onStartEdge && i === 0 ? relativeStartPath.slice(1) : null,\n          relativeEndPath:\n            onEndEdge && i === endIndex - startIndex\n              ? relativeEndPath.slice(1)\n              : null,\n        }))\n      )\n    }\n\n    return List(result)\n  }\n\n  /**\n   * Get the offset for a descendant text node by `path` or `key`.\n   *\n   * @param {List|string} path\n   * @return {Number}\n   */\n\n  getOffset(path) {\n    path = this.resolvePath(path)\n    this.assertDescendant(path)\n\n    // Calculate the offset of the nodes before the highest child.\n    const index = path.first()\n\n    const offset = this.nodes\n      .slice(0, index)\n      .reduce((memo, n) => memo + n.text.length, 0)\n\n    // Recurse if need be.\n    const ret =\n      path.size === 1\n        ? offset\n        : offset + this.nodes.get(index).getOffset(PathUtils.drop(path))\n    return ret\n  }\n\n  /**\n   * Get the offset from a `range`.\n   *\n   * @param {Range} range\n   * @return {Number}\n   */\n\n  getOffsetAtRange(range) {\n    range = this.resolveRange(range)\n\n    if (range.isUnset) {\n      throw new Error('The range cannot be unset to calculcate its offset.')\n    }\n\n    if (range.isExpanded) {\n      throw new Error('The range must be collapsed to calculcate its offset.')\n    }\n\n    const { start } = range\n    const offset = this.getOffset(start.path) + start.offset\n    return offset\n  }\n\n  /**\n   * Get all of the marks for all of the characters of every text node.\n   *\n   * @return {OrderedSet<Mark>}\n   */\n\n  getOrderedMarks() {\n    const array = this.getMarksAsArray()\n    return OrderedSet(array)\n  }\n\n  /**\n   * Get a set of the marks in a `range`.\n   *\n   * @param {Range} range\n   * @return {OrderedSet<Mark>}\n   */\n\n  getOrderedMarksAtRange(range) {\n    range = this.resolveRange(range)\n    const { start, end } = range\n\n    if (range.isUnset) {\n      return OrderedSet()\n    }\n\n    if (range.isCollapsed) {\n      // PERF: range is not cachable, use path? and offset as proxies for cache\n      return this.getMarksAtPosition(start.path, start.offset)\n    }\n\n    const marks = this.getOrderedMarksBetweenPositions(\n      start.path,\n      start.offset,\n      end.path,\n      end.offset\n    )\n\n    return marks\n  }\n\n  /**\n   * Get a set of the marks in a `range`.\n   * PERF: arguments use key and offset for utilizing cache\n   *\n   * @param {List|string} startPath\n   * @param {number} startOffset\n   * @param {List|string} endPath\n   * @param {number} endOffset\n   * @returns {OrderedSet<Mark>}\n   */\n\n  getOrderedMarksBetweenPositions(startPath, startOffset, endPath, endOffset) {\n    startPath = this.resolvePath(startPath)\n    endPath = this.resolvePath(endPath)\n\n    const startText = this.getDescendant(startPath)\n\n    if (PathUtils.isEqual(startPath, endPath)) {\n      return startText.getMarksBetweenOffsets(startOffset, endOffset)\n    }\n\n    const endText = this.getDescendant(endPath)\n\n    const texts = this.getTextsBetweenPathPositionsAsArray(startPath, endPath)\n\n    return OrderedSet().withMutations(result => {\n      texts.forEach(text => {\n        if (text.key === startText.key) {\n          result.union(\n            text.getMarksBetweenOffsets(startOffset, text.text.length)\n          )\n        } else if (text.key === endText.key) {\n          result.union(text.getMarksBetweenOffsets(0, endOffset))\n        } else {\n          result.union(text.getMarks())\n        }\n      })\n    })\n  }\n\n  /**\n   * Get all of the marks that match a `type`.\n   *\n   * @param {String} type\n   * @return {OrderedSet<Mark>}\n   */\n\n  getOrderedMarksByType(type) {\n    const array = this.getMarksByTypeAsArray(type)\n    return OrderedSet(array)\n  }\n\n  /**\n   * Get the parent of a descendant node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getParent(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n    const parentPath = PathUtils.lift(path)\n    const parent = this.getNode(parentPath)\n    return parent\n  }\n\n  /**\n   * Get the block node before a descendant text node by `path`.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getPreviousBlock(path) {\n    path = this.resolvePath(path)\n    const match = this.getPreviousDeepMatchingNodeAndPath(\n      path,\n      n => n.object === 'block'\n    )\n\n    return match ? match[0] : null\n  }\n\n  /**\n   * Get the highest block descendants in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getRootBlocksAtRange(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return List()\n\n    const { start, end } = range\n\n    return this.nodes.slice(start.path.first(), end.path.first() + 1)\n  }\n\n  /**\n   * Get the top-most inline nodes for each text node in a `range`.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getRootInlinesAtRange(range) {\n    const array = this.getRootInlinesAtRangeAsArray(range)\n    // Remove duplicates by converting it to an `OrderedSet` first.\n    const list = List(OrderedSet(array))\n    return list\n  }\n\n  /**\n   * Get the top-most inline nodes for each text node in a `range` as an array.\n   *\n   * @param {Range} range\n   * @return {Array}\n   */\n\n  getRootInlinesAtRangeAsArray(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return List()\n\n    const array = this.getTextsAtRangeAsArray(range)\n      .map(text => this.getFurthestInline(text.key))\n      .filter(exists => exists)\n\n    return array\n  }\n\n  /**\n   * Get the previous node from a node in the tree.\n   *\n   * This will not only check for siblings but instead move up the tree\n   * returning the previous ancestor if no sibling is found.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getPreviousNode(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n\n    for (let i = path.size; i > 0; i--) {\n      const p = path.slice(0, i)\n      if (p.last() === 0) continue\n\n      const target = PathUtils.decrement(p)\n      const node = this.getNode(target)\n      if (node) return node\n    }\n\n    return null\n  }\n\n  /**\n   * Get the previous node in the tree from a node that matches iterator\n   *\n   * This will not only check for siblings but instead move up the tree\n   * returning the previous ancestor if no sibling is found.\n   *\n   * @param {List} path\n   * @return {Node|Null}\n   */\n\n  getPreviousMatchingNodeAndPath(path, iterator = () => true) {\n    if (!path) return null\n\n    for (let i = path.size; i > 0; i--) {\n      const p = path.slice(0, i)\n      if (p.last() === 0) continue\n\n      let previousPath = PathUtils.decrement(p)\n      let previousNode = this.getNode(previousPath)\n\n      while (previousNode && !iterator(previousNode)) {\n        previousPath = PathUtils.decrement(previousPath)\n        previousNode = this.getNode(previousPath)\n      }\n\n      if (previousNode) return [previousNode, previousPath]\n    }\n\n    return null\n  }\n\n  /**\n   * Get the next previous in the tree from a node that matches iterator\n   *\n   * This will not only check for siblings but instead move up the tree\n   * returning the previous ancestor if no sibling is found.\n   * Once a node is found, the last deepest child matching is returned\n   *\n   * @param {List} path\n   * @param {Function} iterator\n   * @return {Node|Null}\n   */\n\n  getPreviousDeepMatchingNodeAndPath(path, iterator = () => true) {\n    const match = this.getPreviousMatchingNodeAndPath(path)\n\n    if (!match) return null\n\n    let [previousNode, previousPath] = match\n\n    let childMatch\n\n    const assign = () => {\n      childMatch =\n        previousNode.object !== 'text' &&\n        previousNode.findLastDescendantAndPath(iterator, previousPath)\n      return childMatch\n    }\n\n    while (assign(childMatch)) {\n      ;[previousNode, previousPath] = childMatch\n    }\n\n    if (!previousNode) return null\n\n    return iterator(previousNode)\n      ? [previousNode, previousPath]\n      : this.getPreviousDeepMatchingNodeAndPath(match[1], iterator)\n  }\n\n  /**\n   * Get the previous sibling of a node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getPreviousSibling(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n    if (path.last() === 0) return null\n    const p = PathUtils.decrement(path)\n    const sibling = this.getNode(p)\n    return sibling\n  }\n\n  /**\n   * Get the text node before a descendant text node.\n   *\n   * @param {List|String} path\n   * @return {Node|Null}\n   */\n\n  getPreviousText(path) {\n    path = this.resolvePath(path)\n    if (!path) return null\n    if (!path.size) return null\n    const previous = this.getPreviousNode(path)\n    if (!previous) return null\n    const match = previous.getLastText()\n    return match\n  }\n\n  getPreviousTextAndPath(path) {\n    if (!path) return null\n    if (!path.size) return null\n    const match = this.getPreviousDeepMatchingNodeAndPath(\n      path,\n      n => n.object === 'text'\n    )\n    return match\n  }\n\n  /**\n   * Get the indexes of the selection for a `range`, given an extra flag for\n   * whether the node `isSelected`, to determine whether not finding matches\n   * means everything is selected or nothing is.\n   *\n   * @param {Range} range\n   * @param {Boolean} isSelected\n   * @return {Object|Null}\n   */\n\n  getSelectionIndexes(range, isSelected = true) {\n    const { start, end } = range\n\n    // PERF: if we're not selected, we can exit early.\n    if (!isSelected) {\n      return null\n    }\n\n    // if we've been given an invalid selection we can exit early.\n    if (range.isUnset) {\n      return null\n    }\n\n    // PERF: if the start and end keys are the same, just check for the child\n    // that contains that single key.\n    if (start.key === end.key) {\n      const child = this.getFurthestAncestor(start.key)\n      const index = child ? this.nodes.indexOf(child) : null\n      return { start: index, end: index + 1 }\n    }\n\n    // Otherwise, check all of the children...\n    let startIndex = null\n    let endIndex = null\n\n    this.nodes.forEach((child, i) => {\n      if (child.object === 'text') {\n        if (startIndex == null && child.key === start.key) startIndex = i\n        if (endIndex == null && child.key === end.key) endIndex = i + 1\n      } else {\n        if (startIndex == null && child.hasDescendant(start.key)) startIndex = i\n        if (endIndex == null && child.hasDescendant(end.key)) endIndex = i + 1\n      }\n\n      // PERF: exit early if both start and end have been found.\n      return startIndex == null || endIndex == null\n    })\n\n    if (isSelected && startIndex == null) startIndex = 0\n    if (isSelected && endIndex == null) endIndex = this.nodes.size\n    return startIndex == null ? null : { start: startIndex, end: endIndex }\n  }\n\n  /**\n   * Get the descendent text node at an `offset`.\n   *\n   * @param {String} offset\n   * @return {Node|Null}\n   */\n\n  getTextAtOffset(offset) {\n    // PERF: Add a few shortcuts for the obvious cases.\n    if (offset === 0) return this.getFirstText()\n    if (offset === this.text.length) return this.getLastText()\n    if (offset < 0 || offset > this.text.length) return null\n\n    let length = 0\n    const text = this.getTexts().find((node, i, nodes) => {\n      length += node.text.length\n      return length > offset\n    })\n\n    return text\n  }\n\n  /**\n   * Get the direction of the node's text.\n   *\n   * @return {String}\n   */\n\n  getTextDirection() {\n    const dir = direction(this.text)\n    return dir === 'neutral' ? null : dir\n  }\n\n  /**\n   * Recursively get all of the child text nodes in order of appearance.\n   *\n   * @return {List<Node>}\n   */\n\n  getTexts() {\n    const array = this.getTextsAsArray()\n    return List(array)\n  }\n\n  /**\n   * Recursively get all the leaf text nodes in order of appearance, as array.\n   *\n   * @return {List<Node>}\n   */\n\n  getTextsAsArray() {\n    let array = []\n\n    this.nodes.forEach(node => {\n      if (node.object === 'text') {\n        array.push(node)\n      } else {\n        array = array.concat(node.getTextsAsArray())\n      }\n    })\n\n    return array\n  }\n\n  /**\n   * Get all of the text nodes in a `range` as a List.\n   *\n   * @param {Range} range\n   * @return {List<Node>}\n   */\n\n  getTextsAtRange(range) {\n    const arr = this.getTextsAtRangeAsArray(range)\n    return List(arr)\n  }\n\n  /**\n   * Get all of the text nodes in a `range` as an array.\n   *\n   * @param {Range} range\n   * @return {Array<Node>}\n   */\n\n  getTextsAtRangeAsArray(range) {\n    range = this.resolveRange(range)\n    if (range.isUnset) return []\n    const { start, end } = range\n    const texts = this.getTextsBetweenPathPositionsAsArray(start.path, end.path)\n    return texts\n  }\n\n  /**\n   * Get all of the text nodes in a `range` as an array.\n   * PERF: use key / path in arguments for cache\n   *\n   * @param {List|string} startPath\n   * @param {List|string} endPath\n   * @returns {Array}\n   */\n\n  getTextsBetweenPositionsAsArray(startPath, endPath) {\n    startPath = this.resolvePath(startPath)\n    endPath = this.resolvePath(endPath)\n\n    return this.getTextsBetweenPathPositionsAsArray(startPath, endPath)\n  }\n\n  /**\n   * Get all of the text nodes in a `range` as an array.\n   *\n   * @param {List|falsey} startPath\n   * @param {List|falsey} endPath\n   * @returns {Array}\n   */\n\n  getTextsBetweenPathPositionsAsArray(startPath, endPath) {\n    // PERF: the most common case is when the range is in a single text node,\n    // where we can avoid a lot of iterating of the tree.\n    if (startPath && endPath && PathUtils.isEqual(startPath, endPath)) {\n      return [this.getDescendant(startPath)]\n    } else if (!startPath && !endPath) {\n      return this.getTextsAsArray()\n    }\n\n    const startIndex = startPath ? startPath.get(0, 0) : 0\n    const endIndex = endPath\n      ? endPath.get(0, this.nodes.size - 1)\n      : this.nodes.size - 1\n\n    let array = []\n\n    this.nodes.slice(startIndex, endIndex + 1).forEach((node, i) => {\n      if (node.object === 'text') {\n        array.push(node)\n      } else {\n        // For the node at start and end of this list, we want to provide a start and end path\n        // For other nodes, we can just get all their text nodes, they are between the paths\n        const childStartPath =\n          startPath && i === 0 ? PathUtils.drop(startPath) : null\n        const childEndPath =\n          endPath && i === endIndex - startIndex\n            ? PathUtils.drop(endPath)\n            : null\n\n        array = array.concat(\n          node.getTextsBetweenPathPositionsAsArray(childStartPath, childEndPath)\n        )\n      }\n    })\n\n    return array\n  }\n\n  /**\n   * Check if the node has block children.\n   *\n   * @return {Boolean}\n   */\n\n  hasBlockChildren() {\n    return !!(this.nodes && this.nodes.find(n => n.object === 'block'))\n  }\n\n  /**\n   * Check if a child node exists.\n   *\n   * @param {List|String} path\n   * @return {Boolean}\n   */\n\n  hasChild(path) {\n    const child = this.getChild(path)\n    return !!child\n  }\n\n  /**\n   * Check if a node has inline children.\n   *\n   * @return {Boolean}\n   */\n\n  hasInlineChildren() {\n    return !!(\n      this.nodes &&\n      this.nodes.find(n => n.object === 'inline' || n.object === 'text')\n    )\n  }\n\n  /**\n   * Recursively check if a child node exists.\n   *\n   * @param {List|String} path\n   * @return {Boolean}\n   */\n\n  hasDescendant(path) {\n    const descendant = this.getDescendant(path)\n    return !!descendant\n  }\n\n  /**\n   * Check if a node has a void parent.\n   *\n   * @param {List|String} path\n   * @param {Editor} editor\n   * @return {Boolean}\n   */\n\n  hasVoidParent(path, editor) {\n    invariant(\n      !Value.isValue(editor),\n      'As of Slate 0.42.0, the `node.hasVoidParent` method takes an `editor` instead of a `value`.'\n    )\n\n    const closest = this.getClosestVoid(path, editor)\n    return !!closest\n  }\n\n  /**\n   * Insert a `node`.\n   *\n   * @param {List|String} path\n   * @param {Node} node\n   * @return {Node}\n   */\n\n  insertNode(path, node) {\n    path = this.resolvePath(path)\n    const index = path.last()\n    const parentPath = PathUtils.lift(path)\n    let parent = this.assertNode(parentPath)\n    const nodes = parent.nodes.splice(index, 0, node)\n    parent = parent.set('nodes', nodes)\n    const ret = this.replaceNode(parentPath, parent)\n    return ret\n  }\n\n  /**\n   * Insert `text` at `offset` in node by `path`.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {String} text\n   * @param {Set} marks\n   * @return {Node}\n   */\n\n  insertText(path, offset, text, marks) {\n    let node = this.assertDescendant(path)\n    path = this.resolvePath(path)\n    node = node.insertText(offset, text, marks)\n    const ret = this.replaceNode(path, node)\n    return ret\n  }\n\n  /**\n   * Check whether the node is a leaf block.\n   *\n   * @return {Boolean}\n   */\n\n  isLeafBlock() {\n    const { object, nodes } = this\n    if (object !== 'block') return false\n    if (!nodes.size) return true\n\n    return nodes.first().object !== 'block'\n  }\n\n  /**\n   * Check whether the node is a leaf inline.\n   *\n   * @return {Boolean}\n   */\n\n  isLeafInline() {\n    const { object, nodes } = this\n    if (object !== 'inline') return false\n    if (!nodes.size) return true\n\n    return nodes.first().object !== 'inline'\n  }\n\n  /**\n   * Check whether a descendant node is inside a range. This will return true for all\n   * text nodes inside the range and all ancestors of those text nodes up to this node.\n   *\n   * @param {List|string} path\n   * @param {Range} range\n   * @return {Node}\n   */\n\n  isNodeInRange(path, range) {\n    this.assertDescendant(path)\n    path = this.resolvePath(path)\n    range = this.resolveRange(range)\n    if (range.isUnset) return false\n\n    const toStart = PathUtils.compare(path, range.start.path)\n    const toEnd =\n      range.start.key === range.end.key\n        ? toStart\n        : PathUtils.compare(path, range.end.path)\n\n    const is = toStart !== -1 && toEnd !== 1\n    return is\n  }\n\n  /**\n   * Map all child nodes, updating them in their parents. This method is\n   * optimized to not return a new node if no changes are made.\n   *\n   * @param {Function} iterator\n   * @return {Node}\n   */\n\n  mapChildren(iterator) {\n    let { nodes } = this\n\n    nodes.forEach((node, i) => {\n      const ret = iterator(node, i, this.nodes)\n      if (ret !== node) nodes = nodes.set(ret.key, ret)\n    })\n\n    const ret = this.set('nodes', nodes)\n    return ret\n  }\n\n  /**\n   * Map all descendant nodes, updating them in their parents. This method is\n   * optimized to not return a new node if no changes are made.\n   *\n   * @param {Function} iterator\n   * @return {Node}\n   */\n\n  mapDescendants(iterator) {\n    let { nodes } = this\n\n    nodes.forEach((node, index) => {\n      let ret = node\n      if (ret.object !== 'text') ret = ret.mapDescendants(iterator)\n      ret = iterator(ret, index, this.nodes)\n      if (ret === node) return\n\n      nodes = nodes.set(index, ret)\n    })\n\n    const ret = this.set('nodes', nodes)\n    return ret\n  }\n\n  /**\n   * Merge a node backwards its previous sibling.\n   *\n   * @param {List|Key} path\n   * @return {Node}\n   */\n\n  mergeNode(path) {\n    const b = this.assertNode(path)\n    path = this.resolvePath(path)\n\n    if (path.last() === 0) {\n      throw new Error(\n        `Unable to merge node because it has no previous sibling: ${b}`\n      )\n    }\n\n    const withPath = PathUtils.decrement(path)\n    const a = this.assertNode(withPath)\n\n    if (a.object !== b.object) {\n      throw new Error(\n        `Unable to merge two different kinds of nodes: ${a} and ${b}`\n      )\n    }\n\n    const newNode =\n      a.object === 'text'\n        ? a.mergeText(b)\n        : a.set('nodes', a.nodes.concat(b.nodes))\n\n    let ret = this\n    ret = ret.removeNode(path)\n    ret = ret.removeNode(withPath)\n    ret = ret.insertNode(withPath, newNode)\n    return ret\n  }\n\n  /**\n   * Move a node by `path` to `newPath`.\n   *\n   * A `newIndex` can be provided when move nodes by `key`, to account for not\n   * being able to have a key for a location in the tree that doesn't exist yet.\n   *\n   * @param {List|Key} path\n   * @param {List|Key} newPath\n   * @param {Number} newIndex\n   * @return {Node}\n   */\n\n  moveNode(path, newPath, newIndex = 0) {\n    const node = this.assertNode(path)\n    path = this.resolvePath(path)\n    newPath = this.resolvePath(newPath, newIndex)\n\n    const newParentPath = PathUtils.lift(newPath)\n    this.assertNode(newParentPath)\n\n    // TODO: this is a bit hacky, re-creating the operation that led to this method being called\n    // Alternative 1: pass the operation through from apply -> value.moveNode\n    // Alternative 2: add a third property to the operation called \"transformedNewPath\", pass that through\n    const op = Operation.create({\n      type: 'move_node',\n      path,\n      newPath,\n    })\n    newPath = PathUtils.transform(path, op).first()\n\n    let ret = this\n    ret = ret.removeNode(path)\n    ret = ret.insertNode(newPath, node)\n    return ret\n  }\n\n  /**\n   * Remove mark from text at `offset` and `length` in node.\n   *\n   * @param {List} path\n   * @param {Number} offset\n   * @param {Number} length\n   * @param {Mark} mark\n   * @return {Node}\n   */\n\n  removeMark(path, offset, length, mark) {\n    let node = this.assertDescendant(path)\n    path = this.resolvePath(path)\n    node = node.removeMark(offset, length, mark)\n    const ret = this.replaceNode(path, node)\n    return ret\n  }\n\n  /**\n   * Remove a node.\n   *\n   * @param {List|String} path\n   * @return {Node}\n   */\n\n  removeNode(path) {\n    this.assertDescendant(path)\n    path = this.resolvePath(path)\n    const deep = path.flatMap(x => ['nodes', x])\n    const ret = this.deleteIn(deep)\n    return ret\n  }\n\n  /**\n   * Remove `text` at `offset` in node.\n   *\n   * @param {List|Key} path\n   * @param {Number} offset\n   * @param {String} text\n   * @return {Node}\n   */\n\n  removeText(path, offset, text) {\n    let node = this.assertDescendant(path)\n    node = node.removeText(offset, text.length)\n    const ret = this.replaceNode(path, node)\n    return ret\n  }\n\n  /**\n   * Replace a `node` in the tree.\n   *\n   * @param {List|Key} path\n   * @param {Node} node\n   * @return {Node}\n   */\n\n  replaceNode(path, node) {\n    path = this.resolvePath(path)\n\n    if (!path) {\n      throw new Error(\n        `Unable to replace a node because it could not be found in the first place: ${path}`\n      )\n    }\n\n    if (!path.size) return node\n    this.assertNode(path)\n    const deep = path.flatMap(x => ['nodes', x])\n    const ret = this.setIn(deep, node)\n    return ret\n  }\n\n  /**\n   * Resolve a `decoration`, relative to the node, ensuring that the keys and\n   * offsets in the decoration exist and that they are synced with the paths.\n   *\n   * @param {Decoration|Object} decoration\n   * @return {Decoration}\n   */\n\n  resolveDecoration(decoration) {\n    decoration = Decoration.create(decoration)\n    decoration = decoration.normalize(this)\n    return decoration\n  }\n\n  /**\n   * Resolve a `point`, relative to the node, ensuring that the keys and\n   * offsets in the point exist and that they are synced with the paths.\n   *\n   * @param {Point|Object} point\n   * @return {Point}\n   */\n\n  resolvePoint(point) {\n    point = Point.create(point)\n    point = point.normalize(this)\n    return point\n  }\n\n  /**\n   * Resolve a `range`, relative to the node, ensuring that the keys and\n   * offsets in the range exist and that they are synced with the paths.\n   *\n   * @param {Range|Object} range\n   * @return {Range}\n   */\n\n  resolveRange(range) {\n    range = Range.create(range)\n    range = range.normalize(this)\n    return range\n  }\n\n  /**\n   * Resolve a `selection`, relative to the node, ensuring that the keys and\n   * offsets in the selection exist and that they are synced with the paths.\n   *\n   * @param {Selection|Object} selection\n   * @return {Selection}\n   */\n\n  resolveSelection(selection) {\n    selection = Selection.create(selection)\n    selection = selection.normalize(this)\n    return selection\n  }\n\n  /**\n   * Set `properties` on a node.\n   *\n   * @param {List|String} path\n   * @param {Object} properties\n   * @return {Node}\n   */\n\n  setNode(path, properties) {\n    let node = this.assertNode(path)\n    node = node.merge(properties)\n    const ret = this.replaceNode(path, node)\n    return ret\n  }\n\n  /**\n   * Set `properties` on `mark` on text at `offset` and `length` in node.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @param {Number} length\n   * @param {Mark} mark\n   * @param {Object} properties\n   * @return {Node}\n   */\n\n  setMark(path, offset, length, properties, newProperties) {\n    let node = this.assertNode(path)\n    node = node.updateMark(offset, length, properties, newProperties)\n    const ret = this.replaceNode(path, node)\n    return ret\n  }\n\n  /**\n   * Split a node by `path` at `position` with optional `properties` to apply\n   * to the newly split node.\n   *\n   * @param {List|String} path\n   * @param {Number} position\n   * @param {Object} properties\n   * @return {Node}\n   */\n\n  splitNode(path, position, properties) {\n    const child = this.assertNode(path)\n    path = this.resolvePath(path)\n    let a\n    let b\n\n    if (child.object === 'text') {\n      ;[a, b] = child.splitText(position)\n    } else {\n      const befores = child.nodes.take(position)\n      const afters = child.nodes.skip(position)\n      a = child.set('nodes', befores)\n      b = child.set('nodes', afters).regenerateKey()\n    }\n\n    if (properties && child.object !== 'text') {\n      b = b.merge(properties)\n    }\n\n    let ret = this\n    ret = ret.removeNode(path)\n    ret = ret.insertNode(path, b)\n    ret = ret.insertNode(path, a)\n    return ret\n  }\n}\n\n/**\n * Mix in assertion variants.\n */\n\nconst ASSERTS = ['Child', 'Depth', 'Descendant', 'Node', 'Parent', 'Path']\n\nfor (const method of ASSERTS) {\n  ElementInterface.prototype[`assert${method}`] = function(path, ...args) {\n    const ret = this[`get${method}`](path, ...args)\n\n    if (ret == null) {\n      throw new Error(\n        `\\`Node.assert${method}\\` could not find node with path or key: ${path}`\n      )\n    }\n\n    return ret\n  }\n}\n\n/**\n * Memoize read methods.\n */\n\nmemoize(ElementInterface.prototype, [\n  'getBlocksAsArray',\n  'getLeafBlocksAtRangeAsArray',\n  'getBlocksByTypeAsArray',\n  'getDecorations',\n  'getFragmentAtRange',\n  'getInlinesAsArray',\n  'getInlinesByTypeAsArray',\n  'getLeafBlocksAtRangeAsArray',\n  'getLeafInlinesAtRangeAsArray',\n  'getMarksAsArray',\n  'getMarksAtPosition',\n  'getNodesAtRange',\n  'getOrderedMarksBetweenPositions',\n  'getInsertMarksAtRange',\n  'getMarksByTypeAsArray',\n  'getNextBlock',\n  'getOffset',\n  'getOffsetAtRange',\n  'getPreviousBlock',\n  'getRootBlocksAtRange',\n  'getRootInlinesAtRangeAsArray',\n  'getTextAtOffset',\n  'getTextDirection',\n  'getTextsAsArray',\n  'getTextsBetweenPathPositionsAsArray',\n])\n\n/**\n * Mix in the element interface.\n */\n\nmixin(ElementInterface, [Block, Document, Inline])\n","import mixin from '../utils/mixin'\nimport Decoration from '../models/decoration'\nimport PathUtils from '../utils/path-utils'\nimport Point from '../models/point'\nimport Range from '../models/range'\nimport Selection from '../models/selection'\n\n/**\n * The interface that `Decoration`, `Range` and `Selection` all implement, to make\n * working anchor and focus points easier.\n *\n * @type {Class}\n */\n\nclass RangeInterface {\n  /**\n   * Check whether the range is collapsed.\n   *\n   * @return {Boolean}\n   */\n\n  get isCollapsed() {\n    return (\n      this.anchor === this.focus ||\n      (this.anchor.key === this.focus.key &&\n        this.anchor.offset === this.focus.offset)\n    )\n  }\n\n  /**\n   * Check whether the range is expanded.\n   *\n   * @return {Boolean}\n   */\n\n  get isExpanded() {\n    return !this.isCollapsed\n  }\n\n  /**\n   * Check whether the range is backward.\n   *\n   * @return {Boolean}\n   */\n\n  get isBackward() {\n    const { isUnset, anchor, focus } = this\n\n    if (isUnset) {\n      return null\n    }\n\n    if (anchor.key === focus.key) {\n      return anchor.offset > focus.offset\n    }\n\n    const isBackward = PathUtils.isBefore(focus.path, anchor.path)\n    return isBackward\n  }\n\n  /**\n   * Check whether the range is forward.\n   *\n   * @return {Boolean}\n   */\n\n  get isForward() {\n    const { isBackward } = this\n    const isForward = isBackward == null ? null : !isBackward\n    return isForward\n  }\n\n  /**\n   * Check whether the range isn't set.\n   *\n   * @return {Boolean}\n   */\n\n  get isUnset() {\n    const { anchor, focus } = this\n    const isUnset = anchor.isUnset || focus.isUnset\n    return isUnset\n  }\n\n  /**\n   * Check whether the range is set.\n   *\n   * @return {Boolean}\n   */\n\n  get isSet() {\n    return !this.isUnset\n  }\n\n  /**\n   * Get the start point.\n   *\n   * @return {String}\n   */\n\n  get start() {\n    return this.isBackward ? this.focus : this.anchor\n  }\n\n  /**\n   * Get the end point.\n   *\n   * @return {String}\n   */\n\n  get end() {\n    return this.isBackward ? this.anchor : this.focus\n  }\n\n  /**\n   * Flip the range.\n   *\n   * @return {Range}\n   */\n\n  flip() {\n    const range = this.setPoints([this.focus, this.anchor])\n    return range\n  }\n\n  /**\n   * Move the anchor and focus offsets forward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveForward(n) {\n    return this.updatePoints(point => point.moveForward(n))\n  }\n\n  /**\n   * Move the anchor and focus offsets backward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveBackward(n) {\n    return this.updatePoints(point => point.moveBackward(n))\n  }\n\n  /**\n   * Move the anchor offset backward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveAnchorBackward(n) {\n    const range = this.setAnchor(this.anchor.moveBackward(n))\n    return range\n  }\n\n  /**\n   * Move the anchor offset forward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveAnchorForward(n) {\n    const range = this.setAnchor(this.anchor.moveForward(n))\n    return range\n  }\n\n  /**\n   * Move the range's anchor point to a new `path` and `offset`.\n   *\n   * Optionally, the `path` can be a key string, or omitted entirely in which\n   * case it would be the offset number.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @return {Range}\n   */\n\n  moveAnchorTo(path, offset) {\n    const range = this.setAnchor(this.anchor.moveTo(path, offset))\n    return range\n  }\n\n  /**\n   * Move the range's anchor point to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveAnchorToStartOfNode(node) {\n    const range = this.setAnchor(this.anchor.moveToStartOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the range's anchor point to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveAnchorToEndOfNode(node) {\n    const range = this.setAnchor(this.anchor.moveToEndOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the end offset backward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveEndBackward(n) {\n    const range = this.setEnd(this.end.moveBackward(n))\n    return range\n  }\n\n  /**\n   * Move the end offset forward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveEndForward(n) {\n    const range = this.setEnd(this.end.moveForward(n))\n    return range\n  }\n\n  /**\n   * Move the range's end point to a new `path` and `offset`.\n   *\n   * Optionally, the `path` can be a key string, or omitted entirely in which\n   * case it would be the offset number.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @return {Range}\n   */\n\n  moveEndTo(path, offset) {\n    const range = this.setEnd(this.end.moveTo(path, offset))\n    return range\n  }\n\n  /**\n   * Move the range's end point to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveEndToStartOfNode(node) {\n    const range = this.setEnd(this.end.moveToStartOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the range's end point to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveEndToEndOfNode(node) {\n    const range = this.setEnd(this.end.moveToEndOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the focus offset backward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveFocusBackward(n) {\n    const range = this.setFocus(this.focus.moveBackward(n))\n    return range\n  }\n\n  /**\n   * Move the focus offset forward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveFocusForward(n) {\n    const range = this.setFocus(this.focus.moveForward(n))\n    return range\n  }\n\n  /**\n   * Move the range's focus point to a new `path` and `offset`.\n   *\n   * Optionally, the `path` can be a key string, or omitted entirely in which\n   * case it would be the offset number.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @return {Range}\n   */\n\n  moveFocusTo(path, offset) {\n    const range = this.setFocus(this.focus.moveTo(path, offset))\n    return range\n  }\n\n  /**\n   * Move the range's focus point to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveFocusToStartOfNode(node) {\n    const range = this.setFocus(this.focus.moveToStartOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the range's focus point to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveFocusToEndOfNode(node) {\n    const range = this.setFocus(this.focus.moveToEndOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the start offset backward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveStartBackward(n) {\n    const range = this.setStart(this.start.moveBackward(n))\n    return range\n  }\n\n  /**\n   * Move the start offset forward `n` characters.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveStartForward(n) {\n    const range = this.setStart(this.start.moveForward(n))\n    return range\n  }\n\n  /**\n   * Move the range's start point to a new `path` and `offset`.\n   *\n   * Optionally, the `path` can be a key string, or omitted entirely in which\n   * case it would be the offset number.\n   *\n   * @param {List|String} path\n   * @param {Number} offset\n   * @return {Range}\n   */\n\n  moveStartTo(path, offset) {\n    const range = this.setStart(this.start.moveTo(path, offset))\n    return range\n  }\n\n  /**\n   * Move the range's start point to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveStartToStartOfNode(node) {\n    const range = this.setStart(this.start.moveToStartOfNode(node))\n    return range\n  }\n\n  /**\n   * Move the range's start point to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveStartToEndOfNode(node) {\n    const range = this.setStart(this.start.moveToEndOfNode(node))\n    return range\n  }\n\n  /**\n   * Move range's points to a new `path` and `offset`.\n   *\n   * @param {Number} n\n   * @return {Range}\n   */\n\n  moveTo(path, offset) {\n    return this.updatePoints(point => point.moveTo(path, offset))\n  }\n\n  /**\n   * Move the focus point to the anchor point.\n   *\n   * @return {Range}\n   */\n\n  moveToAnchor() {\n    const range = this.setFocus(this.anchor)\n    return range\n  }\n\n  /**\n   * Move the start point to the end point.\n   *\n   * @return {Range}\n   */\n\n  moveToEnd() {\n    const range = this.setStart(this.end)\n    return range\n  }\n\n  /**\n   * Move the range's points to the end of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveToEndOfNode(node) {\n    return this.updatePoints(point => point.moveToEndOfNode(node))\n  }\n\n  /**\n   * Move the anchor point to the focus point.\n   *\n   * @return {Range}\n   */\n\n  moveToFocus() {\n    const range = this.setAnchor(this.focus)\n    return range\n  }\n\n  /**\n   * Move to the entire range of `start` and `end` nodes.\n   *\n   * @param {Node} start\n   * @param {Node} end (optional)\n   * @return {Range}\n   */\n\n  moveToRangeOfNode(start, end = start) {\n    const range = this.setPoints([\n      this.anchor.moveToStartOfNode(start),\n      this.focus.moveToEndOfNode(end),\n    ])\n\n    return range\n  }\n\n  /**\n   * Move the end point to the start point.\n   *\n   * @return {Range}\n   */\n\n  moveToStart() {\n    const range = this.setEnd(this.start)\n    return range\n  }\n\n  /**\n   * Move the range's points to the start of a `node`.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  moveToStartOfNode(node) {\n    return this.updatePoints(point => point.moveToStartOfNode(node))\n  }\n\n  /**\n   * Normalize the range, relative to a `node`, ensuring that the anchor\n   * and focus nodes of the range always refer to leaf text nodes.\n   *\n   * @param {Node} node\n   * @return {Range}\n   */\n\n  normalize(node) {\n    return this.updatePoints(point => point.normalize(node))\n  }\n\n  /**\n   * Set the anchor point to a new `anchor`.\n   *\n   * @param {Point} anchor\n   * @return {Range}\n   */\n\n  setAnchor(anchor) {\n    const range = this.set('anchor', anchor)\n    return range\n  }\n\n  /**\n   * Set the end point to a new `point`.\n   *\n   * @param {Point} point\n   * @return {Range}\n   */\n\n  setEnd(point) {\n    const range = this.isBackward ? this.setAnchor(point) : this.setFocus(point)\n    return range\n  }\n\n  /**\n   * Set the focus point to a new `focus`.\n   *\n   * @param {Point} focus\n   * @return {Range}\n   */\n\n  setFocus(focus) {\n    const range = this.set('focus', focus)\n    return range\n  }\n\n  /**\n   * Set the anchor and focus points to new `values`.\n   *\n   * @param {Array<Point>} values\n   * @return {Range}\n   */\n\n  setPoints(values) {\n    const [anchor, focus] = values\n    const range = this.set('anchor', anchor).set('focus', focus)\n    return range\n  }\n\n  /**\n   * Set the anchor and focus points with `updater` callback\n   *\n   * @param {Function} updater\n   * @return {Range}\n   */\n\n  updatePoints(updater) {\n    let { anchor, focus } = this\n    anchor = updater(anchor)\n    focus = updater(focus)\n    return this.merge({ anchor, focus })\n  }\n\n  /**\n   * Set the start point to a new `point`.\n   *\n   * @param {Point} point\n   * @return {Range}\n   */\n\n  setStart(point) {\n    const range = this.isBackward ? this.setFocus(point) : this.setAnchor(point)\n    return range\n  }\n\n  /**\n   * Set new `properties` on the range.\n   *\n   * @param {Object|Range} properties\n   * @return {Range}\n   */\n\n  setProperties(properties) {\n    properties = Range.createProperties(properties)\n    const { anchor, focus, ...props } = properties\n\n    if (anchor) {\n      props.anchor = Point.create(anchor)\n    }\n\n    if (focus) {\n      props.focus = Point.create(focus)\n    }\n\n    const range = this.merge(props)\n    return range\n  }\n\n  /**\n   * Return a JSON representation of the range.\n   *\n   * @param {Object} options\n   * @return {Object}\n   */\n\n  toJSON(options = {}) {\n    const object = {\n      object: this.object,\n      anchor: this.anchor.toJSON(options),\n      focus: this.focus.toJSON(options),\n    }\n\n    return object\n  }\n\n  /**\n   * Return a `Range` instance from any range-like instance.\n   *\n   * @return {Range}\n   */\n\n  toRange() {\n    const properties = Range.createProperties(this)\n    const range = Range.create(properties)\n    return range\n  }\n\n  /**\n   * Unset the range.\n   *\n   * @return {Range}\n   */\n\n  unset() {\n    const range = this.updatePoints(p => p.unset())\n    return range\n  }\n}\n\n/**\n * Mix in the range interface.\n *\n * @param {Record}\n */\n\nmixin(RangeInterface, [Decoration, Range, Selection])\n","import './interfaces/object'\nimport './interfaces/model'\nimport './interfaces/node'\nimport './interfaces/element'\nimport './interfaces/range'\n\nimport Block from './models/block'\nimport Change from './models/change'\nimport Data from './models/data'\nimport Decoration from './models/decoration'\nimport Document from './models/document'\nimport Editor from './controllers/editor'\nimport Inline from './models/inline'\nimport KeyUtils from './utils/key-utils'\nimport Leaf from './models/leaf'\nimport Mark from './models/mark'\nimport Node from './models/node'\nimport Operation from './models/operation'\nimport PathUtils from './utils/path-utils'\nimport Point from './models/point'\nimport Range from './models/range'\nimport Selection from './models/selection'\nimport Text from './models/text'\nimport TextUtils from './utils/text-utils'\nimport Value from './models/value'\nimport { resetMemoization, useMemoization } from './utils/memoize'\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport {\n  Block,\n  Change,\n  Data,\n  Decoration,\n  Document,\n  Editor,\n  Inline,\n  KeyUtils,\n  Leaf,\n  Mark,\n  Node,\n  Operation,\n  PathUtils,\n  Point,\n  Range,\n  resetMemoization,\n  Selection,\n  Text,\n  TextUtils,\n  useMemoization,\n  Value,\n}\n\nexport default {\n  Block,\n  Change,\n  Data,\n  Decoration,\n  Document,\n  Editor,\n  Inline,\n  KeyUtils,\n  Leaf,\n  Mark,\n  Node,\n  Operation,\n  PathUtils,\n  Point,\n  Range,\n  resetMemoization,\n  Selection,\n  Text,\n  TextUtils,\n  useMemoization,\n  Value,\n}\n"]},"metadata":{},"sourceType":"module"}