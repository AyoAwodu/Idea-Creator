{"ast":null,"code":"var _jsxFileName = \"/Users/evan/Idea-Creator/MindOverMapper_Movim/MindOverMapper_Movim/ClientApp/src/components/main/components/projectview/mindmapper/component/Toolbar.js\";\nimport React from \"react\";\nimport cx from \"classnames\";\nimport { Popover, Menu, MenuItem, MenuDivider } from \"@blueprintjs/core\";\nimport \"./Toolbar.css\";\nimport { DiagramLayoutType } from \"@blink-mind/core\";\nimport { iconClassName, Icon } from \"@blink-mind/renderer-react\";\nimport defaultThemeImg from \"../../../../../../static/default.jpg\";\nimport theme1Img from \"../../../../../../static/theme1.jpg\";\nimport theme2Img from \"../../../../../../static/theme2.jpg\";\nimport theme3Img from \"../../../../../../static/theme3.jpg\";\nimport theme4Img from \"../../../../../../static/theme4.jpg\"; // import debug from \"debug\";\n// const log = debug(\"app\");\n\nexport class Toolbar extends React.PureComponent {\n  renderExportItem() {\n    const onClickExportJson = this.props.onClickExportJson;\n    return React.createElement(\"div\", {\n      className: cx(\"bm-toolbar-item\", iconClassName(\"export\")),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, React.createElement(Popover, {\n      enforceFocus: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bm-toolbar-popover-target\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }), React.createElement(Menu, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    }, React.createElement(MenuItem, {\n      text: \"JSON(.json)\",\n      onClick: onClickExportJson,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }), React.createElement(MenuDivider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }))));\n  }\n\n  renderThemeItem() {\n    const onClickChangeTheme = this.props.onClickChangeTheme;\n    const themes = [[\"default\", defaultThemeImg], [\"theme1\", theme1Img], [\"theme2\", theme2Img], [\"theme3\", theme3Img], [\"theme4\", theme4Img]];\n    return React.createElement(\"div\", {\n      className: cx(\"bm-toolbar-item\", iconClassName(\"theme\")),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(Popover, {\n      enforceFocus: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bm-toolbar-popover-target\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"bm-popover-theme\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, themes.map(theme => React.createElement(\"div\", {\n      className: \"bm-theme-item\",\n      onClick: onClickChangeTheme(theme[0]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      className: \"bm-theme-img\",\n      src: theme[1],\n      alt: theme[0],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }))))));\n  }\n\n  renderLayoutItem() {\n    const onClickSetLayout = this.props.onClickSetLayout;\n    const layoutDirs = [[DiagramLayoutType.LEFT_AND_RIGHT, \"Left And Right\", \"layout-left-and-right\"], [DiagramLayoutType.LEFT_TO_RIGHT, \"Only Right\", \"layout-right\"], [DiagramLayoutType.RIGHT_TO_LEFT, \"Only Left\", \"layout-left\"]];\n    return React.createElement(\"div\", {\n      className: cx(\"bm-toolbar-item\", iconClassName(\"layout-left-and-right\")),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(Popover, {\n      enforceFocus: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bm-toolbar-popover-target\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(Menu, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, layoutDirs.map(dir => React.createElement(MenuItem, {\n      key: dir[1],\n      icon: Icon(dir[2]),\n      text: dir[1],\n      onClick: onClickSetLayout(dir[0]),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })))));\n  }\n\n  render() {\n    const _this$props = this.props,\n          onClickOpenFile = _this$props.onClickOpenFile,\n          onClickUndo = _this$props.onClickUndo,\n          onClickRedo = _this$props.onClickRedo,\n          canUndo = _this$props.canUndo,\n          canRedo = _this$props.canRedo;\n    return React.createElement(\"div\", {\n      className: \"bm-toolbar\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"bm-toolbar-item \".concat(iconClassName(\"openfile\")),\n      onClick: onClickOpenFile,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }), this.renderExportItem(), this.renderThemeItem(), this.renderLayoutItem(), React.createElement(\"div\", {\n      className: cx(\"bm-toolbar-item\", iconClassName(\"undo\"), {\n        \"bm-toolbar-item-disabled\": !canUndo\n      }),\n      onClick: onClickUndo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: cx(\"bm-toolbar-item\", iconClassName(\"redo\"), {\n        \"bm-toolbar-item-disabled\": !canRedo\n      }),\n      onClick: onClickRedo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }));\n  }\n\n}\n/*import React from \"react\";\nimport { ToolbarItem } from \"./ToolbarItem\";\nimport \"./Toolbar.css\";\nimport { OpType } from \"blink-mind-react\";\n\nimport {\n  PopupChangeTheme,\n  PopupExportContent,\n  PopupOpenFileContent\n} from \"./PopupContent\";\n\nimport MindMap from './MindMap';\n\nimport Popup from \"react-popup\";\n\nexport class Toolbar extends React.Component {\n  showPopupExport = diagramState => {\n    Popup.create({\n      title: \"Please select export file format\",\n      content: <PopupExportContent diagramState={diagramState} />\n    });\n  };\n\n  showPopupOpenFile = (diagramState, onChange) => {\n    Popup.create({\n      title: \"Open File\",\n      content: (\n        <PopupOpenFileContent diagramState={diagramState} onChange={onChange} />\n      )\n    });\n  };\n\n  showPopupChangeTheme = (diagramState, onChange) => {\n    console.log('Change stuff:', diagramState);\n\n    this.props.changeTheme();\n    // Popup.create({\n    //   title: \"Change Theme\",\n    //   content: (\n    //     <PopupChangeTheme diagramState={diagramState} onChange={onChange} />\n    //   )\n    // });\n  };\n\n  saveMindMap = () => {\n    this.props.saveMindMap();\n  }\n\n  items = [\n    {\n      icon: \"newfile\",\n      label: \"save\",\n      clickHandler: this.saveMindMap\n    },\n    {\n      icon: \"openfile\",\n      label: \"open file\",\n      clickHandler: this.showPopupOpenFile\n    },\n    {\n      icon: \"export\",\n      label: \"export file\",\n      clickHandler: this.showPopupExport\n    },\n    {\n      icon: \"theme\",\n      label: \"change theme\",\n      clickHandler: this.showPopupChangeTheme\n    },\n    {\n      icon: \"undo\",\n      label: \"undo\",\n      opType: OpType.UNDO\n    },\n    {\n      icon: \"redo\",\n      label: \"redo\",\n      opType: OpType.REDO\n    },\n    {\n      icon: \"add-sibling\",\n      label: \"add sibling\",\n      opType: OpType.ADD_SIBLING\n    },\n    {\n      icon: \"add-child\",\n      label: \"add child\",\n      opType: OpType.ADD_CHILD\n    },\n    {\n      icon: \"delete-node\",\n      label: \"delete node\",\n      opType: OpType.DELETE_NODE\n    }\n  ];\n\n  render() {\n    let { diagramState, onChange, op } = this.props;\n    let toolbarItems = this.items.map(item => (\n      <ToolbarItem\n        config={item}\n        key={item.label}\n        diagramState={diagramState}\n        onChange={onChange}\n        op={op}\n      />\n    ));\n    return (\n      <div>\n        <div className=\"bm-toolbar\">{toolbarItems}</div>\n      </div>\n    );\n  }\n}\n*/","map":{"version":3,"sources":["/Users/evan/Idea-Creator/MindOverMapper_Movim/MindOverMapper_Movim/ClientApp/src/components/main/components/projectview/mindmapper/component/Toolbar.js"],"names":["React","cx","Popover","Menu","MenuItem","MenuDivider","DiagramLayoutType","iconClassName","Icon","defaultThemeImg","theme1Img","theme2Img","theme3Img","theme4Img","Toolbar","PureComponent","renderExportItem","onClickExportJson","props","renderThemeItem","onClickChangeTheme","themes","map","theme","renderLayoutItem","onClickSetLayout","layoutDirs","LEFT_AND_RIGHT","LEFT_TO_RIGHT","RIGHT_TO_LEFT","dir","render","onClickOpenFile","onClickUndo","onClickRedo","canUndo","canRedo"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,OAAT,EAAkBC,IAAlB,EAAwBC,QAAxB,EAAkCC,WAAlC,QAAqD,mBAArD;AACA,OAAO,eAAP;AACA,SAASC,iBAAT,QAAkC,kBAAlC;AACA,SAASC,aAAT,EAAwBC,IAAxB,QAAoC,4BAApC;AACA,OAAOC,eAAP,MAA4B,sCAA5B;AACA,OAAOC,SAAP,MAAsB,qCAAtB;AACA,OAAOC,SAAP,MAAsB,qCAAtB;AACA,OAAOC,SAAP,MAAsB,qCAAtB;AACA,OAAOC,SAAP,MAAsB,qCAAtB,C,CACA;AACA;;AAEA,OAAO,MAAMC,OAAN,SAAsBd,KAAK,CAACe,aAA5B,CAA0C;AAC/CC,EAAAA,gBAAgB,GAAG;AAAA,UACTC,iBADS,GACa,KAAKC,KADlB,CACTD,iBADS;AAEjB,WACE;AAAK,MAAA,SAAS,EAAEhB,EAAE,CAAC,iBAAD,EAAoBM,aAAa,CAAC,QAAD,CAAjC,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AAAS,MAAA,YAAY,EAAE,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,QAAD;AAAU,MAAA,IAAI,EAAC,aAAf;AAA6B,MAAA,OAAO,EAAEU,iBAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAFF,CADF,CADF;AAWD;;AAEDE,EAAAA,eAAe,GAAG;AAAA,UACRC,kBADQ,GACe,KAAKF,KADpB,CACRE,kBADQ;AAEhB,UAAMC,MAAM,GAAG,CACb,CAAC,SAAD,EAAYZ,eAAZ,CADa,EAEb,CAAC,QAAD,EAAWC,SAAX,CAFa,EAGb,CAAC,QAAD,EAAWC,SAAX,CAHa,EAIb,CAAC,QAAD,EAAWC,SAAX,CAJa,EAKb,CAAC,QAAD,EAAWC,SAAX,CALa,CAAf;AAQA,WACE;AAAK,MAAA,SAAS,EAAEZ,EAAE,CAAC,iBAAD,EAAoBM,aAAa,CAAC,OAAD,CAAjC,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,OAAD;AAAS,MAAA,YAAY,EAAE,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGc,MAAM,CAACC,GAAP,CAAWC,KAAK,IACf;AACE,MAAA,SAAS,EAAC,eADZ;AAEE,MAAA,OAAO,EAAEH,kBAAkB,CAACG,KAAK,CAAC,CAAD,CAAN,CAF7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIE;AAAK,MAAA,SAAS,EAAC,cAAf;AAA8B,MAAA,GAAG,EAAEA,KAAK,CAAC,CAAD,CAAxC;AAA6C,MAAA,GAAG,EAAEA,KAAK,CAAC,CAAD,CAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CADD,CADH,CAFF,CADF,CADF;AAiBD;;AAEDC,EAAAA,gBAAgB,GAAG;AAAA,UACTC,gBADS,GACY,KAAKP,KADjB,CACTO,gBADS;AAEjB,UAAMC,UAAU,GAAG,CACjB,CACEpB,iBAAiB,CAACqB,cADpB,EAEE,gBAFF,EAGE,uBAHF,CADiB,EAMjB,CAACrB,iBAAiB,CAACsB,aAAnB,EAAkC,YAAlC,EAAgD,cAAhD,CANiB,EAOjB,CAACtB,iBAAiB,CAACuB,aAAnB,EAAkC,WAAlC,EAA+C,aAA/C,CAPiB,CAAnB;AAUA,WACE;AACE,MAAA,SAAS,EAAE5B,EAAE,CACX,iBADW,EAEXM,aAAa,CAAC,uBAAD,CAFF,CADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAME,oBAAC,OAAD;AAAS,MAAA,YAAY,EAAE,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGmB,UAAU,CAACJ,GAAX,CAAeQ,GAAG,IACjB,oBAAC,QAAD;AACE,MAAA,GAAG,EAAEA,GAAG,CAAC,CAAD,CADV;AAEE,MAAA,IAAI,EAAEtB,IAAI,CAACsB,GAAG,CAAC,CAAD,CAAJ,CAFZ;AAGE,MAAA,IAAI,EAAEA,GAAG,CAAC,CAAD,CAHX;AAIE,MAAA,OAAO,EAAEL,gBAAgB,CAACK,GAAG,CAAC,CAAD,CAAJ,CAJ3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,CADH,CAFF,CANF,CADF;AAsBD;;AAEDC,EAAAA,MAAM,GAAG;AAAA,wBAOH,KAAKb,KAPF;AAAA,UAELc,eAFK,eAELA,eAFK;AAAA,UAGLC,WAHK,eAGLA,WAHK;AAAA,UAILC,WAJK,eAILA,WAJK;AAAA,UAKLC,OALK,eAKLA,OALK;AAAA,UAMLC,OANK,eAMLA,OANK;AASP,WACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AACE,MAAA,SAAS,4BAAqB7B,aAAa,CAAC,UAAD,CAAlC,CADX;AAEE,MAAA,OAAO,EAAEyB,eAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAMG,KAAKhB,gBAAL,EANH,EAOG,KAAKG,eAAL,EAPH,EAQG,KAAKK,gBAAL,EARH,EAUE;AACE,MAAA,SAAS,EAAEvB,EAAE,CAAC,iBAAD,EAAoBM,aAAa,CAAC,MAAD,CAAjC,EAA2C;AACtD,oCAA4B,CAAC4B;AADyB,OAA3C,CADf;AAIE,MAAA,OAAO,EAAEF,WAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,EAiBE;AACE,MAAA,SAAS,EAAEhC,EAAE,CAAC,iBAAD,EAAoBM,aAAa,CAAC,MAAD,CAAjC,EAA2C;AACtD,oCAA4B,CAAC6B;AADyB,OAA3C,CADf;AAIE,MAAA,OAAO,EAAEF,WAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAjBF,CADF;AA0BD;;AApH8C;AAuHjD","sourcesContent":["import React from \"react\";\nimport cx from \"classnames\";\nimport { Popover, Menu, MenuItem, MenuDivider } from \"@blueprintjs/core\";\nimport \"./Toolbar.css\";\nimport { DiagramLayoutType } from \"@blink-mind/core\";\nimport { iconClassName, Icon } from \"@blink-mind/renderer-react\";\nimport defaultThemeImg from \"../../../../../../static/default.jpg\";\nimport theme1Img from \"../../../../../../static/theme1.jpg\";\nimport theme2Img from \"../../../../../../static/theme2.jpg\";\nimport theme3Img from \"../../../../../../static/theme3.jpg\";\nimport theme4Img from \"../../../../../../static/theme4.jpg\";\n// import debug from \"debug\";\n// const log = debug(\"app\");\n\nexport class Toolbar extends React.PureComponent {\n  renderExportItem() {\n    const { onClickExportJson } = this.props;\n    return (\n      <div className={cx(\"bm-toolbar-item\", iconClassName(\"export\"))}>\n        <Popover enforceFocus={false}>\n          <div className=\"bm-toolbar-popover-target\" />\n          <Menu>\n            <MenuItem text=\"JSON(.json)\" onClick={onClickExportJson} />\n            <MenuDivider />\n          </Menu>\n        </Popover>\n      </div>\n    );\n  }\n\n  renderThemeItem() {\n    const { onClickChangeTheme } = this.props;\n    const themes = [\n      [\"default\", defaultThemeImg],\n      [\"theme1\", theme1Img],\n      [\"theme2\", theme2Img],\n      [\"theme3\", theme3Img],\n      [\"theme4\", theme4Img]\n    ];\n\n    return (\n      <div className={cx(\"bm-toolbar-item\", iconClassName(\"theme\"))}>\n        <Popover enforceFocus={false}>\n          <div className=\"bm-toolbar-popover-target\" />\n          <div className='bm-popover-theme'>\n            {themes.map(theme => (\n              <div\n                className=\"bm-theme-item\"\n                onClick={onClickChangeTheme(theme[0])}\n              >\n                <img className=\"bm-theme-img\" src={theme[1]} alt={theme[0]} />\n              </div>\n            ))}\n          </div>\n        </Popover>\n      </div>\n    );\n  }\n\n  renderLayoutItem() {\n    const { onClickSetLayout } = this.props;\n    const layoutDirs = [\n      [\n        DiagramLayoutType.LEFT_AND_RIGHT,\n        \"Left And Right\",\n        \"layout-left-and-right\"\n      ],\n      [DiagramLayoutType.LEFT_TO_RIGHT, \"Only Right\", \"layout-right\"],\n      [DiagramLayoutType.RIGHT_TO_LEFT, \"Only Left\", \"layout-left\"]\n    ];\n\n    return (\n      <div\n        className={cx(\n          \"bm-toolbar-item\",\n          iconClassName(\"layout-left-and-right\")\n        )}\n      >\n        <Popover enforceFocus={false}>\n          <div className=\"bm-toolbar-popover-target\" />\n          <Menu>\n            {layoutDirs.map(dir => (\n              <MenuItem\n                key={dir[1]}\n                icon={Icon(dir[2])}\n                text={dir[1]}\n                onClick={onClickSetLayout(dir[0])}\n              />\n            ))}\n          </Menu>\n        </Popover>\n      </div>\n    );\n  }\n\n  render() {\n    const {\n      onClickOpenFile,\n      onClickUndo,\n      onClickRedo,\n      canUndo,\n      canRedo\n    } = this.props;\n\n    return (\n      <div className=\"bm-toolbar\">\n        <div\n          className={`bm-toolbar-item ${iconClassName(\"openfile\")}`}\n          onClick={onClickOpenFile}\n        />\n\n        {this.renderExportItem()}\n        {this.renderThemeItem()}\n        {this.renderLayoutItem()}\n\n        <div\n          className={cx(\"bm-toolbar-item\", iconClassName(\"undo\"), {\n            \"bm-toolbar-item-disabled\": !canUndo\n          })}\n          onClick={onClickUndo}\n        />\n\n        <div\n          className={cx(\"bm-toolbar-item\", iconClassName(\"redo\"), {\n            \"bm-toolbar-item-disabled\": !canRedo\n          })}\n          onClick={onClickRedo}\n        />\n      </div>\n    );\n  }\n}\n\n/*import React from \"react\";\nimport { ToolbarItem } from \"./ToolbarItem\";\nimport \"./Toolbar.css\";\nimport { OpType } from \"blink-mind-react\";\n\nimport {\n  PopupChangeTheme,\n  PopupExportContent,\n  PopupOpenFileContent\n} from \"./PopupContent\";\n\nimport MindMap from './MindMap';\n\nimport Popup from \"react-popup\";\n\nexport class Toolbar extends React.Component {\n  showPopupExport = diagramState => {\n    Popup.create({\n      title: \"Please select export file format\",\n      content: <PopupExportContent diagramState={diagramState} />\n    });\n  };\n\n  showPopupOpenFile = (diagramState, onChange) => {\n    Popup.create({\n      title: \"Open File\",\n      content: (\n        <PopupOpenFileContent diagramState={diagramState} onChange={onChange} />\n      )\n    });\n  };\n\n  showPopupChangeTheme = (diagramState, onChange) => {\n    console.log('Change stuff:', diagramState);\n\n    this.props.changeTheme();\n    // Popup.create({\n    //   title: \"Change Theme\",\n    //   content: (\n    //     <PopupChangeTheme diagramState={diagramState} onChange={onChange} />\n    //   )\n    // });\n  };\n\n  saveMindMap = () => {\n    this.props.saveMindMap();\n  }\n\n  items = [\n    {\n      icon: \"newfile\",\n      label: \"save\",\n      clickHandler: this.saveMindMap\n    },\n    {\n      icon: \"openfile\",\n      label: \"open file\",\n      clickHandler: this.showPopupOpenFile\n    },\n    {\n      icon: \"export\",\n      label: \"export file\",\n      clickHandler: this.showPopupExport\n    },\n    {\n      icon: \"theme\",\n      label: \"change theme\",\n      clickHandler: this.showPopupChangeTheme\n    },\n    {\n      icon: \"undo\",\n      label: \"undo\",\n      opType: OpType.UNDO\n    },\n    {\n      icon: \"redo\",\n      label: \"redo\",\n      opType: OpType.REDO\n    },\n    {\n      icon: \"add-sibling\",\n      label: \"add sibling\",\n      opType: OpType.ADD_SIBLING\n    },\n    {\n      icon: \"add-child\",\n      label: \"add child\",\n      opType: OpType.ADD_CHILD\n    },\n    {\n      icon: \"delete-node\",\n      label: \"delete node\",\n      opType: OpType.DELETE_NODE\n    }\n  ];\n\n  render() {\n    let { diagramState, onChange, op } = this.props;\n    let toolbarItems = this.items.map(item => (\n      <ToolbarItem\n        config={item}\n        key={item.label}\n        diagramState={diagramState}\n        onChange={onChange}\n        op={op}\n      />\n    ));\n    return (\n      <div>\n        <div className=\"bm-toolbar\">{toolbarItems}</div>\n      </div>\n    );\n  }\n}\n*/"]},"metadata":{},"sourceType":"module"}