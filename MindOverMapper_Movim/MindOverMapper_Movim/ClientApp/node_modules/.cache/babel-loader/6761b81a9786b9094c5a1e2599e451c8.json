{"ast":null,"code":"import { Model, Config, Topic, Block } from '@blink-mind/core';\nimport { List, Map } from 'immutable';\nimport debug from 'debug';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar log = debug('plugin:json-serializer');\n\nfunction JsonSerializerPlugin() {\n  return {\n    serializeModel: function (props) {\n      var model = props.model,\n          controller = props.controller;\n      var obj = {\n        rootTopicKey: model.rootTopicKey,\n        topics: model.topics.valueSeq().toArray().map(function (topic) {\n          return controller.run('serializeTopic', __assign(__assign({}, props), {\n            topic: topic\n          }));\n        }),\n        config: controller.run('serializeConfig', __assign(__assign({}, props), {\n          config: model.config\n        }))\n      };\n      return obj;\n    },\n    deserializeModel: function (props) {\n      var obj = props.obj,\n          controller = props.controller;\n      var rootTopicKey = obj.rootTopicKey,\n          topics = obj.topics,\n          config = obj.config;\n      var model = new Model();\n      model = model.merge({\n        rootTopicKey: rootTopicKey,\n        editorRootTopicKey: rootTopicKey,\n        config: controller.run('deserializeConfig', __assign(__assign({}, props), {\n          obj: config\n        })),\n        topics: controller.run('deserializeTopics', __assign(__assign({}, props), {\n          obj: topics\n        }))\n      });\n      log('deserializeModel', model);\n      return model;\n    },\n    serializeConfig: function (props) {\n      var config = props.config;\n      return config.toJS();\n    },\n    deserializeConfig: function (props) {\n      var obj = props.obj;\n      return new Config(obj);\n    },\n    serializeTopic: function (props) {\n      var topic = props.topic,\n          controller = props.controller;\n      return {\n        key: topic.key,\n        parentKey: topic.parentKey,\n        subKeys: topic.subKeys.toArray(),\n        collapse: topic.collapse,\n        style: topic.style,\n        blocks: topic.blocks.map(function (block) {\n          return controller.run('serializeBlock', __assign(__assign({}, props), {\n            block: block\n          }));\n        })\n      };\n    },\n    deserializeTopic: function (props) {\n      var obj = props.obj,\n          controller = props.controller;\n      var key = obj.key,\n          parentKey = obj.parentKey,\n          subKeys = obj.subKeys,\n          blocks = obj.blocks,\n          style = obj.style,\n          collapse = obj.collapse;\n      var topic = new Topic();\n      topic = topic.merge({\n        key: key,\n        parentKey: parentKey,\n        subKeys: List(subKeys),\n        style: style,\n        collapse: collapse,\n        blocks: controller.run('deserializeBlocks', __assign(__assign({}, props), {\n          obj: blocks\n        }))\n      });\n      return topic;\n    },\n    deserializeTopics: function (props) {\n      var obj = props.obj,\n          controller = props.controller;\n      var topics = Map();\n      topics = topics.withMutations(function (topics) {\n        obj.forEach(function (topic) {\n          return topics.set(topic.key, controller.run('deserializeTopic', __assign(__assign({}, props), {\n            obj: topic\n          })));\n        });\n      });\n      return topics;\n    },\n    serializeBlock: function (props) {\n      var block = props.block;\n      return block.toJS();\n    },\n    deserializeBlock: function (props) {\n      var obj = props.obj;\n      return new Block(obj);\n    },\n    deserializeBlocks: function (props) {\n      var obj = props.obj,\n          controller = props.controller;\n      var blocks = List();\n      blocks = blocks.withMutations(function (blocks) {\n        obj.forEach(function (block) {\n          return blocks.push(controller.run('deserializeBlock', __assign(__assign({}, props), {\n            obj: block\n          })));\n        });\n      });\n      return blocks;\n    }\n  };\n}\n\nexport { JsonSerializerPlugin };","map":null,"metadata":{},"sourceType":"module"}