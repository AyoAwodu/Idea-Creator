{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _options = require('./options');\n\nvar _options2 = _interopRequireDefault(_options);\n\nvar _handlers = require('./handlers');\n\nvar _core = require('./core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar KEY_ENTER = 'Enter';\nvar KEY_TAB = 'Tab';\nvar KEY_BACKSPACE = 'Backspace';\n/**\n * A Slate plugin to handle keyboard events in lists.\n */\n\nfunction EditList() {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  opts = new _options2.default(opts);\n  var corePlugin = (0, _core2.default)(opts);\n  return _extends({}, corePlugin, {\n    onKeyDown: onKeyDown.bind(null, opts)\n  });\n}\n/**\n * User is pressing a key in the editor\n */\n\n\nfunction onKeyDown(opts, event, change, next) {\n  var args = [event, change, next, opts];\n\n  switch (event.key) {\n    case KEY_ENTER:\n      return _handlers.onEnter.apply(undefined, args);\n\n    case KEY_TAB:\n      return _handlers.onTab.apply(undefined, args);\n\n    case KEY_BACKSPACE:\n      return _handlers.onBackspace.apply(undefined, args);\n\n    default:\n      return next();\n  }\n}\n\nexports.default = EditList;","map":{"version":3,"sources":["C:/Users/ayomi/Source/Repos/Idea-Creator/Idea-Creator/MindOverMapper_Movim/MindOverMapper_Movim/ClientApp/node_modules/@tommoor/slate-edit-list/dist/index.js"],"names":["Object","defineProperty","exports","value","_extends","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","_options","require","_options2","_interopRequireDefault","_handlers","_core","_core2","obj","__esModule","default","KEY_ENTER","KEY_TAB","KEY_BACKSPACE","EditList","opts","undefined","corePlugin","onKeyDown","bind","event","change","next","args","onEnter","apply","onTab","onBackspace"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,EAAAA,KAAK,EAAE;AADkC,CAA7C;;AAIA,IAAIC,QAAQ,GAAGJ,MAAM,CAACK,MAAP,IAAiB,UAAUC,MAAV,EAAkB;AAAE,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGC,SAAS,CAACC,MAA9B,EAAsCF,CAAC,EAAvC,EAA2C;AAAE,QAAIG,MAAM,GAAGF,SAAS,CAACD,CAAD,CAAtB;;AAA2B,SAAK,IAAII,GAAT,IAAgBD,MAAhB,EAAwB;AAAE,UAAIV,MAAM,CAACY,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CC,GAA7C,CAAJ,EAAuD;AAAEL,QAAAA,MAAM,CAACK,GAAD,CAAN,GAAcD,MAAM,CAACC,GAAD,CAApB;AAA4B;AAAE;AAAE;;AAAC,SAAOL,MAAP;AAAgB,CAAhQ;;AAEA,IAAIS,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAtB;;AAEA,IAAIC,SAAS,GAAGC,sBAAsB,CAACH,QAAD,CAAtC;;AAEA,IAAII,SAAS,GAAGH,OAAO,CAAC,YAAD,CAAvB;;AAEA,IAAII,KAAK,GAAGJ,OAAO,CAAC,QAAD,CAAnB;;AAEA,IAAIK,MAAM,GAAGH,sBAAsB,CAACE,KAAD,CAAnC;;AAEA,SAASF,sBAAT,CAAgCI,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;;AAE/F,IAAIG,SAAS,GAAG,OAAhB;AACA,IAAIC,OAAO,GAAG,KAAd;AACA,IAAIC,aAAa,GAAG,WAApB;AAEA;;;;AAGA,SAASC,QAAT,GAAoB;AAChB,MAAIC,IAAI,GAAGrB,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBsB,SAAzC,GAAqDtB,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAA/E;AAEAqB,EAAAA,IAAI,GAAG,IAAIZ,SAAS,CAACO,OAAd,CAAsBK,IAAtB,CAAP;AACA,MAAIE,UAAU,GAAG,CAAC,GAAGV,MAAM,CAACG,OAAX,EAAoBK,IAApB,CAAjB;AAEA,SAAOzB,QAAQ,CAAC,EAAD,EAAK2B,UAAL,EAAiB;AAE5BC,IAAAA,SAAS,EAAEA,SAAS,CAACC,IAAV,CAAe,IAAf,EAAqBJ,IAArB;AAFiB,GAAjB,CAAf;AAIH;AAED;;;;;AAGA,SAASG,SAAT,CAAmBH,IAAnB,EAAyBK,KAAzB,EAAgCC,MAAhC,EAAwCC,IAAxC,EAA8C;AAC1C,MAAIC,IAAI,GAAG,CAACH,KAAD,EAAQC,MAAR,EAAgBC,IAAhB,EAAsBP,IAAtB,CAAX;;AAEA,UAAQK,KAAK,CAACvB,GAAd;AACI,SAAKc,SAAL;AACI,aAAON,SAAS,CAACmB,OAAV,CAAkBC,KAAlB,CAAwBT,SAAxB,EAAmCO,IAAnC,CAAP;;AACJ,SAAKX,OAAL;AACI,aAAOP,SAAS,CAACqB,KAAV,CAAgBD,KAAhB,CAAsBT,SAAtB,EAAiCO,IAAjC,CAAP;;AACJ,SAAKV,aAAL;AACI,aAAOR,SAAS,CAACsB,WAAV,CAAsBF,KAAtB,CAA4BT,SAA5B,EAAuCO,IAAvC,CAAP;;AACJ;AACI,aAAOD,IAAI,EAAX;AARR;AAUH;;AAEDlC,OAAO,CAACsB,OAAR,GAAkBI,QAAlB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _options = require('./options');\n\nvar _options2 = _interopRequireDefault(_options);\n\nvar _handlers = require('./handlers');\n\nvar _core = require('./core');\n\nvar _core2 = _interopRequireDefault(_core);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar KEY_ENTER = 'Enter';\nvar KEY_TAB = 'Tab';\nvar KEY_BACKSPACE = 'Backspace';\n\n/**\n * A Slate plugin to handle keyboard events in lists.\n */\nfunction EditList() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    opts = new _options2.default(opts);\n    var corePlugin = (0, _core2.default)(opts);\n\n    return _extends({}, corePlugin, {\n\n        onKeyDown: onKeyDown.bind(null, opts)\n    });\n}\n\n/**\n * User is pressing a key in the editor\n */\nfunction onKeyDown(opts, event, change, next) {\n    var args = [event, change, next, opts];\n\n    switch (event.key) {\n        case KEY_ENTER:\n            return _handlers.onEnter.apply(undefined, args);\n        case KEY_TAB:\n            return _handlers.onTab.apply(undefined, args);\n        case KEY_BACKSPACE:\n            return _handlers.onBackspace.apply(undefined, args);\n        default:\n            return next();\n    }\n}\n\nexports.default = EditList;"]},"metadata":{},"sourceType":"script"}