{"ast":null,"code":"import { PureComponent, Component, createElement, Fragment } from 'react';\nimport memoizeOne from 'memoize-one';\nimport { ContextMenuTarget, Menu, MenuItem, Button, Popover, Dialog, Classes, Hotkey, Hotkeys, HotkeysTarget } from '@blueprintjs/core';\nimport { ModelModifier, FocusMode, BlockType, TopicDirection, DiagramLayoutType, TopicVisualLevel, getRelationship, TopicRelationship, Controller } from '@blink-mind/core';\nimport styled, { css, ThemeProvider } from 'styled-components';\nimport debug from 'debug';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { Stack, List } from 'immutable';\nimport cx from 'classnames';\nimport { Select } from '@blueprintjs/select';\nimport { SketchPicker } from 'react-color';\nimport { isEqual } from 'lodash';\nimport '@blueprintjs/core/lib/css/blueprint.css';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nfunction __decorate(decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nfunction __values(o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n}\n\nfunction __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n}\n\nfunction __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n\n  return ar;\n}\n\nfunction __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) {\n    Object.defineProperty(cooked, \"raw\", {\n      value: raw\n    });\n  } else {\n    cooked.raw = raw;\n  }\n\n  return cooked;\n}\n\nvar BaseWidget =\n/** @class */\nfunction (_super) {\n  __extends(BaseWidget, _super);\n\n  function BaseWidget(props) {\n    return _super.call(this, props) || this;\n  }\n\n  BaseWidget.prototype.operation = function (opType, arg) {\n    this.props.controller.run('operation', __assign({\n      opType: opType\n    }, arg));\n  };\n\n  BaseWidget.prototype.run = function (name, arg) {\n    this.props.controller.run(name, arg);\n  };\n\n  Object.defineProperty(BaseWidget.prototype, \"topic\", {\n    get: function () {\n      return this.props.model.getTopic(this.props.topicKey);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return BaseWidget;\n}(PureComponent);\n\nvar SaveRef =\n/** @class */\nfunction (_super) {\n  __extends(SaveRef, _super);\n\n  function SaveRef() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.getRef = function (name) {\n      return _this[name];\n    };\n\n    _this.saveRef = function (name) {\n      return function (node) {\n        if (node) {\n          _this[name] = node;\n\n          _this.fireListener(name, node);\n        }\n      };\n    };\n\n    _this.observers = new Map();\n\n    _this.fireListener = function (name, ref) {\n      var e_1, _a;\n\n      if (_this.observers.has(name)) {\n        var listeners = _this.observers.get(name);\n\n        try {\n          for (var listeners_1 = __values(listeners), listeners_1_1 = listeners_1.next(); !listeners_1_1.done; listeners_1_1 = listeners_1.next()) {\n            var listener = listeners_1_1.value;\n            listener(name, ref);\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (listeners_1_1 && !listeners_1_1.done && (_a = listeners_1.return)) _a.call(listeners_1);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n      }\n    };\n\n    _this.registerRefListener = function (name, listener) {\n      if (!_this.observers.has(name)) {\n        _this.observers.set(name, [listener]);\n      } else {\n        _this.observers.get(name).push(listener);\n      }\n    };\n\n    return _this;\n  }\n\n  SaveRef.prototype.render = function () {\n    return this.props.children(this.saveRef, this.getRef, this.registerRefListener.bind(this));\n  };\n\n  return SaveRef;\n}(Component);\n\nvar log = debug('node:drag-scroll-widget');\nvar DragScrollView = styled.div(templateObject_1 || (templateObject_1 = __makeTemplateObject([\"\\n  position: relative;\\n  width: 100%;\\n  height: 100%;\\n  overflow: scroll;\\n\"], [\"\\n  position: relative;\\n  width: 100%;\\n  height: 100%;\\n  overflow: scroll;\\n\"])));\nvar DragScrollContent = styled.div(templateObject_2 || (templateObject_2 = __makeTemplateObject([\"\\n  position: relative;\\n  width: max-content;\\n\"], [\"\\n  position: relative;\\n  width: max-content;\\n\"])));\n\nvar DragScrollWidget =\n/** @class */\nfunction (_super) {\n  __extends(DragScrollWidget, _super);\n\n  function DragScrollWidget(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.contentResizeCallback = function (entries, observer) {\n      if (_this.oldContentRect) {\n        var widgetStyle = {\n          width: _this.content.clientWidth + _this.viewBox.clientWidth * 2,\n          height: _this.content.clientHeight + _this.viewBox.clientHeight * 2\n        };\n        _this.bigView.style.width = widgetStyle.width + 'px';\n        _this.bigView.style.height = widgetStyle.height + 'px';\n      }\n\n      _this.oldContentRect = entries[0].contentRect;\n    };\n\n    _this.contentResizeObserver = new ResizeObserver(_this.contentResizeCallback);\n\n    _this.contentRef = function (ref) {\n      if (ref) {\n        _this.content = ref;\n\n        _this.contentResizeObserver.observe(_this.content);\n      }\n    };\n\n    _this.viewBoxRef = function (ref) {\n      if (ref) {\n        _this.viewBox = ref;\n\n        _this.setViewBoxScroll(_this.viewBox.clientWidth, _this.viewBox.clientHeight);\n      }\n    };\n\n    _this.bigViewRef = function (ref) {\n      if (ref) {\n        _this.bigView = ref;\n      }\n    };\n\n    _this.setWidgetStyle = function () {\n      if (_this.content && _this.viewBox && _this.bigView) {\n        _this.bigView.style.width = (_this.content.clientWidth + _this.viewBox.clientWidth) * 2 + 'px';\n        _this.bigView.style.height = (_this.content.clientHeight + _this.viewBox.clientHeight) * 2 + 'px';\n        _this.content.style.left = _this.viewBox.clientWidth + 'px';\n        _this.content.style.top = _this.viewBox.clientHeight + 'px';\n      }\n    };\n\n    _this.setViewBoxScroll = function (left, top) {\n      log(\"setViewBoxScroll \" + left + \" \" + top);\n\n      if (_this.viewBox) {\n        _this.viewBox.scrollLeft = left;\n        _this.viewBox.scrollTop = top;\n      }\n    };\n\n    _this.setViewBoxScrollDelta = function (deltaLeft, deltaTop) {\n      log(\"setViewBoxScrollDelta \" + deltaLeft + \" \" + deltaTop);\n\n      if (_this.viewBox) {\n        _this.viewBox.scrollLeft += deltaLeft;\n        _this.viewBox.scrollTop += deltaTop;\n      }\n    };\n\n    _this.onMouseDown = function (e) {\n      // log('Drag Scroll onMouseDown');\n      // log(e.nativeEvent.target);\n      // mouseKey 表示鼠标按下那个键才可以进行拖动，左键或者右键\n      // needKeyPressed 为了支持是否需要按下ctrl键，才可以进行拖动\n      // canDragFunc是一个函数，它是为了支持使用者以传入函数的方式，这个函数的返回值表示当前的内容是否可以被拖拽而移动\n      var _a = _this.props,\n          mouseKey = _a.mouseKey,\n          needKeyPressed = _a.needKeyPressed,\n          canDragFunc = _a.canDragFunc;\n      if (canDragFunc && !canDragFunc()) return;\n\n      if (e.button === 0 && mouseKey === 'left' || e.button === 2 && mouseKey === 'right') {\n        if (needKeyPressed) {\n          if (!e.ctrlKey) return;\n        }\n\n        _this._lastCoordX = _this.viewBox.scrollLeft + e.nativeEvent.clientX;\n        _this._lastCoordY = _this.viewBox.scrollTop + e.nativeEvent.clientY;\n        window.addEventListener('mousemove', _this.onMouseMove);\n        window.addEventListener('mouseup', _this.onMouseUp);\n      }\n    };\n\n    _this.onMouseUp = function (e) {\n      window.removeEventListener('mousemove', _this.onMouseMove);\n      window.removeEventListener('mouseup', _this.onMouseUp);\n    };\n\n    _this.onMouseMove = function (e) {\n      _this.viewBox.scrollLeft = _this._lastCoordX - e.clientX;\n      _this.viewBox.scrollTop = _this._lastCoordY - e.clientY; // log(`onMouseMove ${this.viewBox.scrollLeft} ${this.viewBox.scrollTop}`);\n    };\n\n    _this.handleContextMenu = function (e) {\n      e.preventDefault();\n    };\n\n    _this.state = {\n      widgetStyle: {\n        width: '10000px',\n        height: '10000px'\n      }\n    };\n    return _this;\n  }\n\n  DragScrollWidget.prototype.componentDidMount = function () {\n    this.setWidgetStyle();\n    document.addEventListener('contextmenu', this.handleContextMenu);\n  };\n\n  DragScrollWidget.prototype.componentWillUnmount = function () {\n    document.removeEventListener('contextmenu', this.handleContextMenu);\n  };\n\n  DragScrollWidget.prototype.render = function () {\n    return createElement(DragScrollView, {\n      ref: this.viewBoxRef,\n      onMouseDown: this.onMouseDown\n    }, createElement(\"div\", {\n      style: this.state.widgetStyle,\n      ref: this.bigViewRef\n    }, createElement(DragScrollContent, {\n      ref: this.contentRef,\n      style: this.state.contentStyle\n    }, this.props.children(this.setViewBoxScroll, this.setViewBoxScrollDelta))));\n  };\n\n  DragScrollWidget.defaultProps = {\n    mouseKey: 'left',\n    needKeyPressed: false\n  };\n  return DragScrollWidget;\n}(Component);\n\nvar templateObject_1, templateObject_2;\nvar log$1 = debug('plugin:operation');\nvar OpType = {\n  TOGGLE_COLLAPSE: 'TOGGLE_COLLAPSE',\n  ADD_CHILD: 'ADD_CHILD',\n  ADD_SIBLING: 'ADD_SIBLING',\n  DELETE_TOPIC: 'DELETE_TOPIC',\n  FOCUS_TOPIC: 'FOCUS_TOPIC',\n  SET_STYLE: 'SET_STYLE',\n  SET_TOPIC_CONTENT: 'SET_TOPIC_CONTENT',\n  SET_TOPIC_DESC: 'SET_TOPIC_DESC',\n  START_EDITING_CONTENT: 'START_EDITING_CONTENT',\n  START_EDITING_DESC: 'START_EDITING_DESC',\n  DRAG_AND_DROP: 'DRAG_AND_DROP'\n};\n\nfunction OperationPlugin() {\n  var startEditingContent = function (_a) {\n    var model = _a.model,\n        topicKey = _a.topicKey;\n    return ModelModifier.focusTopic({\n      model: model,\n      topicKey: topicKey,\n      focusMode: FocusMode.EDITING_CONTENT\n    });\n  };\n\n  var startEditingDesc = function (_a) {\n    var model = _a.model,\n        topicKey = _a.topicKey;\n    var topic = model.getTopic(topicKey);\n    var desc = topic.getBlock(BlockType.DESC);\n\n    if (desc.block == null || desc.block.data == null) {\n      model = ModelModifier.setDesc({\n        model: model,\n        topicKey: topicKey,\n        desc: ''\n      });\n    }\n\n    return ModelModifier.focusTopic({\n      model: model,\n      topicKey: topicKey,\n      focusMode: FocusMode.EDITING_DESC\n    });\n  };\n\n  function dragAndDrop(props) {\n    var srcKey = props.srcKey,\n        dstKey = props.dstKey,\n        dropDir = props.dropDir;\n    var model = props.model;\n    var srcTopic = model.getTopic(srcKey);\n    var dstTopic = model.getTopic(dstKey);\n    var srcParentKey = srcTopic.parentKey;\n    var srcParentTopic = model.getTopic(srcParentKey);\n    var srcParentSubKeys = srcParentTopic.subKeys;\n    var srcIndex = srcParentSubKeys.indexOf(srcKey);\n    srcParentSubKeys = srcParentSubKeys.delete(srcIndex);\n\n    if (dropDir === 'in') {\n      var dstSubKeys_1 = dstTopic.subKeys;\n      dstSubKeys_1 = dstSubKeys_1.push(srcKey);\n      model = model.withMutations(function (m) {\n        m.setIn(['topics', srcParentKey, 'subKeys'], srcParentSubKeys).setIn(['topics', srcKey, 'parentKey'], dstKey).setIn(['topics', dstKey, 'subKeys'], dstSubKeys_1).setIn(['topics', dstKey, 'collapse'], false);\n      });\n    } else {\n      var dstParentKey_1 = dstTopic.parentKey;\n      var dstParentItem = model.getTopic(dstParentKey_1);\n      var dstParentSubKeys_1 = dstParentItem.subKeys;\n      var dstIndex = dstParentSubKeys_1.indexOf(dstKey); //src 和 dst 的父亲相同，这种情况要做特殊处理\n\n      if (srcParentKey === dstParentKey_1) {\n        var newDstParentSubKeys_1 = List();\n        dstParentSubKeys_1.forEach(function (key) {\n          if (key !== srcKey) {\n            if (key === dstKey) {\n              if (dropDir === 'prev') {\n                newDstParentSubKeys_1 = newDstParentSubKeys_1.push(srcKey).push(key);\n              } else {\n                newDstParentSubKeys_1 = newDstParentSubKeys_1.push(key).push(srcKey);\n              }\n            } else {\n              newDstParentSubKeys_1 = newDstParentSubKeys_1.push(key);\n            }\n          }\n        });\n        model = model.withMutations(function (m) {\n          m.setIn(['topics', dstParentKey_1, 'subKeys'], newDstParentSubKeys_1);\n        });\n      } else {\n        if (dropDir === 'prev') {\n          dstParentSubKeys_1 = dstParentSubKeys_1.insert(dstIndex, srcKey);\n        } else if (dropDir === 'next') {\n          dstParentSubKeys_1 = dstParentSubKeys_1.insert(dstIndex + 1, srcKey);\n        }\n\n        model = model.withMutations(function (m) {\n          m.setIn(['topics', srcParentKey, 'subKeys'], srcParentSubKeys).setIn(['topics', srcKey, 'parentKey'], dstParentKey_1).setIn(['topics', dstParentKey_1, 'subKeys'], dstParentSubKeys_1).setIn(['topics', dstParentKey_1, 'collapse'], false);\n        });\n      }\n    }\n\n    return model;\n  }\n\n  var OpMap = new Map([[OpType.TOGGLE_COLLAPSE, ModelModifier.toggleCollapse], [OpType.ADD_CHILD, ModelModifier.addChild], [OpType.ADD_SIBLING, ModelModifier.addSibling], [OpType.DELETE_TOPIC, ModelModifier.deleteTopic], [OpType.FOCUS_TOPIC, ModelModifier.focusTopic], [OpType.SET_STYLE, ModelModifier.setStyle], [OpType.SET_TOPIC_CONTENT, ModelModifier.setContent], [OpType.SET_TOPIC_DESC, ModelModifier.setDesc], [OpType.START_EDITING_CONTENT, startEditingContent], [OpType.START_EDITING_DESC, startEditingDesc], [OpType.DRAG_AND_DROP, dragAndDrop]]);\n  var undoStack = Stack();\n  var redoStack = Stack();\n  return {\n    getAllowUndo: function (props) {\n      var model = props.model,\n          opType = props.opType;\n\n      if (opType) {\n        switch (opType) {\n          case OpType.FOCUS_TOPIC:\n          case OpType.START_EDITING_CONTENT:\n            return false;\n        }\n      }\n\n      return model.config.allowUndo;\n    },\n    getUndoRedoStack: function () {\n      return {\n        undoStack: undoStack,\n        redoStack: redoStack\n      };\n    },\n    setUndoStack: function (props) {\n      log$1('setUndoStack', props.undoStack);\n      undoStack = props.undoStack;\n    },\n    setRedoStack: function (props) {\n      log$1('setRedoStack', props.redoStack);\n      redoStack = props.redoStack;\n    },\n    canUndo: function (props) {\n      var controller = props.controller;\n      var undoStack = controller.run('getUndoRedoStack', props).undoStack;\n      var allowUndo = controller.run('getAllowUndo', props);\n      return undoStack.size > 0 && allowUndo;\n    },\n    canRedo: function (props) {\n      var controller = props.controller;\n      var redoStack = controller.run('getUndoRedoStack', props).redoStack;\n      var allowUndo = controller.run('getAllowUndo', props);\n      return redoStack.size > 0 && allowUndo;\n    },\n    undo: function (props) {\n      var controller = props.controller,\n          model = props.model;\n\n      if (!controller.run('getAllowUndo', props)) {\n        return;\n      }\n\n      var _a = controller.run('getUndoRedoStack', props),\n          undoStack = _a.undoStack,\n          redoStack = _a.redoStack;\n\n      var newModel = undoStack.peek();\n      if (!newModel) return;\n      controller.run('setUndoStack', __assign(__assign({}, props), {\n        undoStack: undoStack.shift()\n      }));\n      controller.run('setRedoStack', __assign(__assign({}, props), {\n        redoStack: redoStack.push(model)\n      }));\n      log$1(newModel);\n      controller.change(newModel);\n    },\n    redo: function (props) {\n      var controller = props.controller,\n          model = props.model;\n\n      if (!controller.run('getAllowUndo', props)) {\n        return;\n      }\n\n      var _a = controller.run('getUndoRedoStack', props),\n          undoStack = _a.undoStack,\n          redoStack = _a.redoStack;\n\n      var newModel = redoStack.peek();\n      if (!newModel) return;\n      controller.run('setUndoStack', __assign(__assign({}, props), {\n        undoStack: undoStack.push(model)\n      }));\n      controller.run('setRedoStack', __assign(__assign({}, props), {\n        redoStack: redoStack.shift()\n      }));\n      controller.change(newModel);\n    },\n    beforeOperation: function (props) {},\n    operation: function (props) {\n      var opType = props.opType,\n          controller = props.controller,\n          model = props.model;\n      log$1('operation:', opType);\n      controller.run('beforeOperation', props);\n\n      if (OpMap.has(opType)) {\n        if (controller.run('getAllowUndo', props)) {\n          var undoStack_1 = controller.run('getUndoRedoStack', props).undoStack;\n          controller.run('setUndoStack', __assign(__assign({}, props), {\n            undoStack: undoStack_1.push(model)\n          }));\n        }\n\n        var opFunc = OpMap.get(opType);\n        var newModel = opFunc(props);\n        controller.change(newModel);\n      }\n\n      controller.run('afterOperation', props);\n    },\n    afterOperation: function (props) {}\n  };\n}\n\nvar IconName = {\n  SHOW_MENU: 'show-menu',\n  CLOSE: 'close',\n  COLOR_PICKER: 'color-picker',\n  NOTES: 'notes'\n};\n\nfunction iconClassName(name) {\n  return \"icon iconfont bm-\" + name;\n}\n\nfunction Icon(iconName) {\n  return createElement(\"span\", {\n    className: iconClassName(iconName)\n  });\n}\n\nfunction contentRefKey(key) {\n  return \"content-\" + key;\n}\n\nfunction topicRefKey(key) {\n  return \"topic-\" + key;\n}\n\nfunction linksRefKey(key) {\n  return \"links-\" + key;\n}\n\nfunction linksSvgRefKey(key) {\n  return \"links-svg-\" + key;\n}\n\nfunction collapseRefKey(key) {\n  return \"collapse-\" + key;\n}\n\nfunction getLinkKey(fromKey, toKey) {\n  return \"link-\" + fromKey + \"-\" + toKey;\n}\n\nfunction centerY(rect) {\n  return (rect.top + rect.bottom) / 2;\n}\n\nfunction centerX(rect) {\n  return (rect.left + rect.right) / 2;\n}\n\nfunction centerPointX(p1, p2) {\n  return (p1.x + p2.x) / 2;\n}\n\nfunction centerPointY(p1, p2) {\n  return (p1.y + p2.y) / 2;\n}\n\nvar log$2 = debug('node:topic-content-widget');\nvar TopicContent = styled.div(templateObject_1$1 || (templateObject_1$1 = __makeTemplateObject([\"\\n  display: flex;\\n  align-items: center;\\n  word-wrap: break-word;\\n  white-space: pre-line;\\n  cursor: pointer;\\n  overflow: hidden;\\n\"], [\"\\n  display: flex;\\n  align-items: center;\\n  word-wrap: break-word;\\n  white-space: pre-line;\\n  cursor: pointer;\\n  overflow: hidden;\\n\"])));\nvar TopicContentWithDropArea = styled.div(templateObject_2$1 || (templateObject_2$1 = __makeTemplateObject([\"\\n  position: relative;\\n\"], [\"\\n  position: relative;\\n\"])));\n\nvar TopicContentWidget =\n/** @class */\nfunction (_super) {\n  __extends(TopicContentWidget, _super);\n\n  function TopicContentWidget(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.onDragStart = function (ev) {\n      _this.run('handleTopicDragStart', __assign(__assign({}, _this.props), {\n        ev: ev\n      }));\n    };\n\n    _this.onDragOver = function (ev) {\n      ev.preventDefault();\n    };\n\n    _this.onDragEnter = function (ev) {\n      _this.run('handleTopicDragEnter', __assign(__assign({}, _this.props), {\n        ev: ev,\n        dropDir: 'in'\n      }));\n    };\n\n    _this.onDragLeave = function (ev) {\n      _this.run('handleTopicDragLeave', __assign(__assign({}, _this.props), {\n        ev: ev,\n        dropDir: 'in'\n      }));\n    };\n\n    _this.onDrop = function (ev) {\n      _this.run('handleTopicDrop', __assign(__assign({}, _this.props), {\n        ev: ev,\n        dropDir: 'in'\n      }));\n    };\n\n    _this.onClick = function (ev) {\n      _this.isDoubleClick = false;\n      log$2(ev.nativeEvent);\n      var props = _this.props;\n      var controller = props.controller;\n      setTimeout(function () {\n        if (!_this.isDoubleClick) {\n          controller.run('handleTopicClick', __assign(__assign({}, props), {\n            ev: ev\n          }));\n        }\n      });\n    };\n\n    _this.onDoubleClick = function (ev) {\n      _this.isDoubleClick = true;\n      var controller = _this.props.controller;\n      controller.run('handleTopicDoubleClick', __assign(__assign({}, _this.props), {\n        ev: ev\n      }));\n    };\n\n    _this.onContextMenu = function (ev) {\n      var controller = _this.props.controller;\n      controller.run('handleTopicContextMenu', __assign(__assign({}, _this.props), {\n        ev: ev\n      }));\n\n      _this.setState({\n        showPopMenu: true\n      });\n    };\n\n    _this.handlePopMenuVisibleChange = function (visible) {\n      _this.setState({\n        showPopMenu: visible\n      });\n    };\n\n    _this.needRelocation = false;\n\n    _this.onClickCollapse = function (e) {\n      e.stopPropagation();\n      var _a = _this.props,\n          topicKey = _a.topicKey,\n          getRef = _a.getRef;\n      _this.needRelocation = true;\n      _this.oldCollapseIconRect = getRef(collapseRefKey(topicKey)).getBoundingClientRect();\n\n      _this.operation(OpType.TOGGLE_COLLAPSE, _this.props);\n    };\n\n    _this.state = {\n      dragEnter: false,\n      showPopMenu: false\n    };\n    return _this;\n  }\n\n  TopicContentWidget.prototype.renderContextMenu = function () {\n    var controller = this.props.controller;\n    return controller.run('renderTopicContextMenu', this.props);\n  };\n\n  TopicContentWidget.prototype.onContextMenuClose = function () {// Optional method called once the context menu is closed.\n  };\n\n  TopicContentWidget.prototype.componentDidUpdate = function () {\n    if (this.needRelocation) {\n      var _a = this.props,\n          getRef = _a.getRef,\n          topicKey = _a.topicKey,\n          setViewBoxScrollDelta = _a.setViewBoxScrollDelta;\n      var newRect = getRef(collapseRefKey(topicKey)).getBoundingClientRect();\n      log$2('newRect:', newRect);\n      log$2('oldRect:', this.oldCollapseIconRect);\n      setViewBoxScrollDelta(newRect.left - this.oldCollapseIconRect.left, newRect.top - this.oldCollapseIconRect.top);\n      this.needRelocation = false;\n    }\n  };\n\n  TopicContentWidget.prototype.render = function () {\n    var props = this.props;\n    var saveRef = props.saveRef,\n        topicKey = props.topicKey,\n        model = props.model,\n        controller = props.controller,\n        topicStyle = props.topicStyle,\n        dir = props.dir;\n    var draggable = model.editingContentKey !== topicKey;\n    var showPopMenu = this.state.showPopMenu;\n    var collapseIcon = controller.run('renderTopicCollapseIcon', __assign(__assign({}, props), {\n      onClickCollapse: this.onClickCollapse.bind(this)\n    }));\n    log$2(dir);\n    var prevDropArea = controller.run('renderTopicDropArea', __assign(__assign({}, props), {\n      dropDir: 'prev'\n    }));\n    var nextDropArea = controller.run('renderTopicDropArea', __assign(__assign({}, props), {\n      dropDir: 'next'\n    }));\n    var dropEventHandlers = {\n      onDragEnter: this.onDragEnter,\n      onDragLeave: this.onDragLeave,\n      onDragOver: this.onDragOver,\n      onDrop: this.onDrop\n    };\n    return createElement(TopicContentWithDropArea, null, prevDropArea, createElement(TopicContent // theme={getTopicTheme(visualLevel, model.config.theme)}\n    // dragEnter={this.state.dragEnter}\n    , __assign({\n      // theme={getTopicTheme(visualLevel, model.config.theme)}\n      // dragEnter={this.state.dragEnter}\n      style: topicStyle,\n      draggable: draggable,\n      ref: saveRef(contentRefKey(topicKey)),\n      onDragStart: this.onDragStart,\n      onClick: this.onClick,\n      onDoubleClick: this.onDoubleClick,\n      onContextMenu: this.onContextMenu\n    }, dropEventHandlers), controller.run('renderBlocks', props), showPopMenu && controller.run('renderTopicPopupMenu', __assign(__assign({}, props), {\n      handleVisibleChange: this.handlePopMenuVisibleChange,\n      visible: true\n    }))), nextDropArea, dir !== TopicDirection.MAIN && collapseIcon);\n  };\n\n  TopicContentWidget = __decorate([ContextMenuTarget], TopicContentWidget);\n  return TopicContentWidget;\n}(BaseWidget);\n\nvar templateObject_1$1, templateObject_2$1;\nvar log$3 = debug('RootNode');\nvar LayerPart = styled.div(templateObject_1$2 || (templateObject_1$2 = __makeTemplateObject([\"\\n  display: flex;\\n  position: relative;\\n\\n  align-items: \", \";\\n  flex-direction: column;\\n\\n  padding: \", \";\\n\"], [\"\\n  display: flex;\\n  position: relative;\\n\\n  align-items: \", \";\\n  flex-direction: column;\\n\\n  padding: \", \";\\n\"])), function (props) {\n  //@ts-ignore\n  return props.topicDirection === TopicDirection.LEFT ? 'flex-end' : 'flex-start';\n}, function (props) {\n  //@ts-ignore\n  return props.topicDirection === TopicDirection.LEFT ? '15px 60px 15px 0px' : '15px 0px 15px 60px';\n});\nvar Topic = styled.div(templateObject_2$2 || (templateObject_2$2 = __makeTemplateObject([\"\\n  display: flex;\\n  position: relative;\\n  align-items: center;\\n  z-index: 3;\\n\"], [\"\\n  display: flex;\\n  position: relative;\\n  align-items: center;\\n  z-index: 3;\\n\"])));\n\nvar RootWidget =\n/** @class */\nfunction (_super) {\n  __extends(RootWidget, _super);\n\n  function RootWidget() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  RootWidget.prototype.renderPartTopics = function (topics, dir) {\n    var _a = this.props,\n        controller = _a.controller,\n        saveRef = _a.saveRef;\n    var res = controller.run('createSubTopics', {\n      props: __assign(__assign({}, this.props), {\n        dir: dir,\n        isRoot: true\n      }),\n      topics: topics\n    });\n    if (!res) return null;\n    var subTopics = res.subTopics;\n    var cxName = \"bm-layer-\" + (dir === TopicDirection.LEFT ? 'left' : 'right');\n    return (//@ts-ignore\n      createElement(LayerPart, {\n        topicDirection: dir,\n        ref: saveRef(cxName)\n      }, subTopics)\n    );\n  };\n\n  RootWidget.prototype.componentDidMount = function () {\n    this.layout();\n  };\n\n  RootWidget.prototype.componentDidUpdate = function () {\n    this.layout();\n  };\n\n  RootWidget.prototype.layout = function () {\n    var controller = this.props.controller;\n    controller.run('layout', this.props);\n  };\n\n  RootWidget.prototype.render = function () {\n    log$3('render');\n    var props = this.props;\n    var model = props.model,\n        topicKey = props.topicKey,\n        saveRef = props.saveRef,\n        controller = props.controller,\n        dir = props.dir;\n    var topicStyle = controller.run('getTopicStyle', props);\n    var config = model.config;\n    var topicContent = controller.run('renderTopicContent', __assign(__assign({}, props), {\n      topicStyle: topicStyle,\n      dir: TopicDirection.MAIN\n    }));\n    var partTopics = controller.run('getPartTopics', {\n      layout: config.layoutDir,\n      model: model,\n      topicKey: topicKey\n    });\n    var rootTopic = createElement(Topic, {\n      ref: saveRef(topicRefKey(topicKey))\n    }, topicContent);\n    var children = controller.run('renderRootWidgetOtherChildren', props);\n\n    switch (config.layoutDir) {\n      case DiagramLayoutType.LEFT_AND_RIGHT:\n        return createElement(Fragment, null, this.renderPartTopics(partTopics.L, 'L'), rootTopic, this.renderPartTopics(partTopics.R, 'R'), children);\n\n      case DiagramLayoutType.LEFT_TO_RIGHT:\n        return createElement(Fragment, null, rootTopic, this.renderPartTopics(partTopics.R, 'R'), children);\n\n      case DiagramLayoutType.RIGHT_TO_LEFT:\n        return createElement(Fragment, null, this.renderPartTopics(partTopics.L, 'L'), rootTopic, children);\n\n      case DiagramLayoutType.TOP_TO_BOTTOM:\n        return createElement(Fragment, null, rootTopic, this.renderPartTopics(partTopics.B, 'B'), children);\n    }\n\n    return null;\n  };\n\n  return RootWidget;\n}(Component);\n\nvar templateObject_1$2, templateObject_2$2;\nvar log$4 = debug('node:topic-widget');\nvar Node = styled.div(templateObject_1$3 || (templateObject_1$3 = __makeTemplateObject([\"\\n  display: flex;\\n  align-items: center;\\n  flex-direction: \", \";\\n\"], [\"\\n  display: flex;\\n  align-items: center;\\n  flex-direction: \", \";\\n\"])), function (props) {\n  return props.topicDirection === TopicDirection.RIGHT ? 'row' : 'row-reverse';\n}); // TODO\n\nvar NodeChildren = styled.div(templateObject_2$3 || (templateObject_2$3 = __makeTemplateObject([\"\\n  position: relative;\\n  padding: \", \";\\n\"], [\"\\n  position: relative;\\n  padding: \", \";\\n\"])), function (props) {\n  return props.dir === TopicDirection.RIGHT ? \"0 0 0 \" + props.marginH + \"px\" : \"0 \" + props.marginH + \"px 0 0\";\n});\nvar NodeTopic = styled.div(templateObject_3 || (templateObject_3 = __makeTemplateObject([\"\\n  display: flex;\\n  position: relative;\\n  align-items: center;\\n\\n  flex-direction: \", \";\\n\"], [\"\\n  display: flex;\\n  position: relative;\\n  align-items: center;\\n\\n  flex-direction: \", \";\\n\"])), function (props) {\n  return props.topicDirection === TopicDirection.RIGHT ? 'row' : 'row-reverse';\n});\n\nvar TopicWidget =\n/** @class */\nfunction (_super) {\n  __extends(TopicWidget, _super);\n\n  function TopicWidget() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TopicWidget.prototype.renderSubTopics = function () {\n    var props = this.props;\n    var controller = props.controller,\n        model = props.model,\n        topicKey = props.topicKey,\n        dir = props.dir,\n        saveRef = props.saveRef,\n        getRef = props.getRef;\n    var topics = model.getTopic(topicKey).subKeys.toArray();\n    var res = controller.run('createSubTopics', {\n      props: props,\n      topics: topics\n    });\n    if (!res) return null;\n    var subTopics = res.subTopics;\n    var subLinks = controller.run('renderSubLinks', props);\n    return createElement(NodeChildren, {\n      dir: dir,\n      marginH: model.config.theme.marginH\n    }, subTopics, \" \", subLinks);\n  };\n\n  TopicWidget.prototype.componentDidUpdate = function () {\n    this.layoutLinks();\n  };\n\n  TopicWidget.prototype.componentDidMount = function () {\n    this.layoutLinks();\n  };\n\n  TopicWidget.prototype.layoutLinks = function () {\n    var _a = this.props,\n        getRef = _a.getRef,\n        topicKey = _a.topicKey;\n    var links = getRef(linksRefKey(topicKey));\n    links && links.layout();\n  };\n\n  TopicWidget.prototype.render = function () {\n    log$4('render');\n    var props = this.props;\n    var controller = props.controller,\n        topicKey = props.topicKey,\n        dir = props.dir,\n        saveRef = props.saveRef;\n    var topicStyle = controller.run('getTopicStyle', props);\n\n    var propsMore = __assign(__assign({}, props), {\n      topicStyle: topicStyle\n    });\n\n    var topicContent = controller.run('renderTopicContent', propsMore);\n    return createElement(Node, {\n      topicDirection: dir\n    }, createElement(NodeTopic, {\n      topicDirection: dir,\n      ref: saveRef(topicRefKey(topicKey))\n    }, topicContent), this.renderSubTopics());\n  };\n\n  return TopicWidget;\n}(Component);\n\nvar templateObject_1$3, templateObject_2$3, templateObject_3;\n\nvar TopicContextMenu =\n/** @class */\nfunction (_super) {\n  __extends(TopicContextMenu, _super);\n\n  function TopicContextMenu() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  TopicContextMenu.prototype.render = function () {\n    var controller = this.props.controller;\n    return createElement(Menu, null, controller.run('customizeTopicContextMenu', this.props));\n  };\n\n  return TopicContextMenu;\n}(BaseWidget);\n\nvar Icon$1 = styled.div(templateObject_3$1 || (templateObject_3$1 = __makeTemplateObject([\"\\n  position: absolute;\\n  top: calc(50% - 10px);\\n  \", \";\\n  border-radius: 50%;\\n  width: 20px;\\n  height: 20px;\\n  text-align: center;\\n  //@ts-ignore\\n  background: \", \";\\n  cursor: pointer;\\n  padding: 0;\\n  font-size: 14px;\\n  line-height: 20px;\\n  border: 0;\\n  z-index: 2;\\n\"], [\"\\n  position: absolute;\\n  top: calc(50% - 10px);\\n  \", \";\\n  border-radius: 50%;\\n  width: 20px;\\n  height: 20px;\\n  text-align: center;\\n  //@ts-ignore\\n  background: \", \";\\n  cursor: pointer;\\n  padding: 0;\\n  font-size: 14px;\\n  line-height: 20px;\\n  border: 0;\\n  z-index: 2;\\n\"])), function (_a) {\n  var dir = _a.dir;\n  if (dir === TopicDirection.RIGHT) return css(templateObject_1$4 || (templateObject_1$4 = __makeTemplateObject([\"\\n        right: -25px;\\n      \"], [\"\\n        right: -25px;\\n      \"])));\n  if (dir === TopicDirection.LEFT) return css(templateObject_2$4 || (templateObject_2$4 = __makeTemplateObject([\"\\n        left: -25px;\\n      \"], [\"\\n        left: -25px;\\n      \"])));\n}, function (props) {\n  return props.background;\n});\n\nfunction TopicCollapseIcon(props) {\n  var _a;\n\n  var model = props.model,\n      topicKey = props.topicKey,\n      topicStyle = props.topicStyle,\n      dir = props.dir,\n      saveRef = props.saveRef,\n      onClickCollapse = props.onClickCollapse;\n  var topic = model.getTopic(topicKey);\n  return topic.subKeys.size > 0 ? createElement(Icon$1, {\n    ref: saveRef(collapseRefKey(topicKey)),\n    onClick: onClickCollapse,\n    background: topicStyle.background,\n    dir: dir,\n    className: cx((_a = {\n      icon: true,\n      iconfont: true\n    }, _a[\"bm-\" + (topic.collapse ? 'plus' : 'minus')] = true, _a))\n  }) : null;\n}\n\nvar templateObject_1$4, templateObject_2$4, templateObject_3$1;\nvar log$5 = debug('node:style-editor');\nvar StyleEditorRoot = styled.div(templateObject_1$5 || (templateObject_1$5 = __makeTemplateObject([\"\\n  position: absolute;\\n  background: white;\\n  right: 30px;\\n  top: 20px;\\n  border-radius: 2px;\\n  z-index: 4;\\n\"], [\"\\n  position: absolute;\\n  background: white;\\n  right: 30px;\\n  top: 20px;\\n  border-radius: 2px;\\n  z-index: 4;\\n\"])));\nvar Title = styled.div(templateObject_2$5 || (templateObject_2$5 = __makeTemplateObject([\"\\n  height: 16px;\\n\"], [\"\\n  height: 16px;\\n\"])));\nvar CloseIcon = styled.div(templateObject_3$2 || (templateObject_3$2 = __makeTemplateObject([\"\\n  position: absolute;\\n  right: 5px;\\n  top: 5px;\\n  cursor: pointer;\\n  &:hover {\\n    color: #1ea7fd;\\n  }\\n\"], [\"\\n  position: absolute;\\n  right: 5px;\\n  top: 5px;\\n  cursor: pointer;\\n  &:hover {\\n    color: #1ea7fd;\\n  }\\n\"])));\nvar PopRoot = styled.div(templateObject_4 || (templateObject_4 = __makeTemplateObject([\"\\n  padding: 10px;\\n\"], [\"\\n  padding: 10px;\\n\"])));\nvar ShowMenuIcon = styled.a(templateObject_5 || (templateObject_5 = __makeTemplateObject([\"\\n  font-size: 20px !important;\\n\"], [\"\\n  font-size: 20px !important;\\n\"])));\nvar IconBg = styled.div(templateObject_6 || (templateObject_6 = __makeTemplateObject([\"\\n  padding: 5px;\\n  cursor: pointer;\\n\"], [\"\\n  padding: 5px;\\n  cursor: pointer;\\n\"])));\nvar WithBorder = styled.div(templateObject_7 || (templateObject_7 = __makeTemplateObject([\"\\n  border: 1px solid grey;\\n  cursor: pointer;\\n  font-weight: bold;\\n\"], [\"\\n  border: 1px solid grey;\\n  cursor: pointer;\\n  font-weight: bold;\\n\"])));\nvar SettingTitle = styled.div(templateObject_8 || (templateObject_8 = __makeTemplateObject([\"\\n  margin-top: 10px;\\n  margin-bottom: 5px;\\n\"], [\"\\n  margin-top: 10px;\\n  margin-bottom: 5px;\\n\"])));\nvar SettingItem = styled.span(templateObject_9 || (templateObject_9 = __makeTemplateObject([\"\\n  margin: 0px 10px 0px 0px;\\n\"], [\"\\n  margin: 0px 10px 0px 0px;\\n\"])));\nvar ColorBar = styled.div(templateObject_10 || (templateObject_10 = __makeTemplateObject([\"\\n  height: 3px;\\n  width: 80%;\\n  margin-left: 10%;\\n  margin-right: 10%;\\n  margin-bottom: 2px;\\n  background: \", \";\\n\"], [\"\\n  height: 3px;\\n  width: 80%;\\n  margin-left: 10%;\\n  margin-right: 10%;\\n  margin-bottom: 2px;\\n  background: \", \";\\n\"])), function (props) {\n  return props.color;\n});\nvar PxSelect = Select.ofType();\n\nvar renderItem = function (unit) {\n  return function (width, _a) {\n    var handleClick = _a.handleClick,\n        modifiers = _a.modifiers,\n        query = _a.query;\n    return createElement(MenuItem, {\n      text: \"\" + width + unit,\n      key: width,\n      onClick: handleClick\n    });\n  };\n};\n\nvar StyleEditor =\n/** @class */\nfunction (_super) {\n  __extends(StyleEditor, _super);\n\n  function StyleEditor(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.setShowPanel = function (showPanel) {\n      return function () {\n        _this.setState({\n          showPanel: showPanel\n        });\n      };\n    };\n\n    _this.setStyle = function (obj) {\n      var style = _this.topic.style;\n      var styleObj = style ? JSON.parse(style) : {};\n\n      var newStyleObj = __assign(__assign({}, styleObj), obj);\n\n      if (!isEqual(styleObj, newStyleObj)) {\n        var newStyleStr = JSON.stringify(newStyleObj);\n\n        _this.operation(OpType.SET_STYLE, __assign(__assign({}, _this.props), {\n          style: newStyleStr\n        }));\n      }\n    };\n\n    _this.setLinkStyle = function (obj) {\n      var style = _this.topic.style;\n      var styleObj = style ? JSON.parse(style) : {};\n\n      var newStyleObj = __assign(__assign({}, styleObj), {\n        linkStyle: __assign(__assign({}, styleObj.linkStyle), obj)\n      });\n\n      if (!isEqual(styleObj, newStyleObj)) {\n        var newStyleStr = JSON.stringify(newStyleObj);\n\n        _this.operation(OpType.SET_STYLE, __assign(__assign({}, _this.props), {\n          style: newStyleStr\n        }));\n      }\n    };\n\n    _this.handleBorderWidthChange = function (value) {\n      log$5('handleBorderWithChange:', value);\n\n      _this.setStyle({\n        borderWidth: value + \"px\"\n      });\n    };\n\n    _this.handleBorderStyleChange = function (value) {\n      _this.setStyle({\n        borderStyle: value\n      });\n    };\n\n    _this.handleBorderRadiusChange = function (value) {\n      log$5('handleBorderRadiusChange:', value);\n\n      _this.setStyle({\n        borderRadius: value + \"px\"\n      });\n    };\n\n    _this.handleLinkWidthChange = function (value) {\n      log$5('handleBorderRadiusChange:', value);\n\n      _this.setLinkStyle({\n        lineWidth: value + \"px\"\n      });\n    };\n\n    _this.handleBorderColorChange = function (color) {\n      log$5(color);\n\n      _this.setStyle({\n        borderColor: color.hex\n      });\n    };\n\n    _this.handleBackgroundColorChange = function (color) {\n      log$5(color);\n\n      _this.setStyle({\n        background: color.hex\n      });\n    };\n\n    _this.handleLinkColorChange = function (color) {\n      log$5(color);\n\n      _this.setLinkStyle({\n        lineColor: color.hex\n      });\n    };\n\n    _this.state = {\n      showPanel: false\n    };\n    return _this;\n  }\n\n  StyleEditor.prototype.render = function () {\n    var props = this.props;\n    var controller = props.controller,\n        model = props.model;\n    if (!model.focusKey) return null;\n    var topicStyle = controller.run('getTopicStyle', props);\n    var linkStyle = topicStyle.linkStyle;\n\n    if (!this.state.showPanel) {\n      return createElement(StyleEditorRoot, null, createElement(IconBg, {\n        onClick: this.setShowPanel(true)\n      }, createElement(ShowMenuIcon, {\n        className: iconClassName(IconName.SHOW_MENU)\n      })));\n    }\n\n    var borderWidthItems = __spread(Array(7).keys());\n\n    var borderRadiusItems = [0, 5, 10, 15, 20, 25, 30, 35];\n    var borderStyleItems = ['none', 'solid', 'dotted', 'dashed', 'double'];\n    return createElement(StyleEditorRoot, null, createElement(Title, null, createElement(CloseIcon, {\n      className: iconClassName(IconName.CLOSE),\n      onClick: this.setShowPanel(false)\n    })), createElement(PopRoot, null, createElement(SettingTitle, null, \"Border\"), createElement(\"div\", null, createElement(SettingItem, null, createElement(PxSelect, {\n      items: borderWidthItems,\n      itemRenderer: renderItem('px'),\n      filterable: false,\n      onItemSelect: this.handleBorderWidthChange\n    }, createElement(Button, {\n      text: \"width: \" + (topicStyle.borderWidth ? topicStyle.borderWidth : '0px')\n    }))), createElement(SettingItem, null, createElement(PxSelect, {\n      items: borderStyleItems,\n      itemRenderer: renderItem(''),\n      filterable: false,\n      onItemSelect: this.handleBorderStyleChange\n    }, createElement(Button, {\n      text: \"style: \" + (topicStyle.borderStyle ? topicStyle.borderStyle : 'none')\n    }))), createElement(SettingItem, null, createElement(PxSelect, {\n      items: borderRadiusItems,\n      itemRenderer: renderItem('px'),\n      filterable: false,\n      onItemSelect: this.handleBorderRadiusChange\n    }, createElement(Button, {\n      text: \"radius: \" + topicStyle.borderRadius\n    }))), createElement(SettingItem, null, createElement(Popover, null, createElement(WithBorder, null, createElement(\"div\", {\n      className: iconClassName(IconName.COLOR_PICKER)\n    }), createElement(ColorBar, {\n      color: topicStyle.borderColor\n    })), createElement(\"div\", null, createElement(SketchPicker, {\n      color: topicStyle.borderColor,\n      onChangeComplete: this.handleBorderColorChange\n    }))))), createElement(SettingTitle, null, \"Background\"), createElement(\"div\", null, createElement(SettingItem, null, createElement(Popover, null, createElement(WithBorder, null, createElement(\"div\", {\n      className: iconClassName(IconName.COLOR_PICKER)\n    }), createElement(ColorBar, {\n      color: topicStyle.background\n    })), createElement(\"div\", null, createElement(SketchPicker, {\n      color: topicStyle.background,\n      onChangeComplete: this.handleBackgroundColorChange\n    }))))), createElement(SettingTitle, null, \"Link\"), createElement(\"div\", null, createElement(SettingItem, null, createElement(PxSelect, {\n      items: borderWidthItems,\n      itemRenderer: renderItem('px'),\n      filterable: false,\n      onItemSelect: this.handleLinkWidthChange\n    }, createElement(Button, {\n      text: \"width: \" + (linkStyle ? linkStyle.lineWidth : '0px')\n    }))), createElement(SettingItem, null, createElement(Popover, null, createElement(WithBorder, null, createElement(\"div\", {\n      className: iconClassName(IconName.COLOR_PICKER)\n    }), createElement(ColorBar, {\n      color: topicStyle.background\n    })), createElement(\"div\", null, createElement(SketchPicker, {\n      color: topicStyle.background,\n      onChangeComplete: this.handleLinkColorChange\n    })))))));\n  };\n\n  return StyleEditor;\n}(BaseWidget);\n\nvar templateObject_1$5, templateObject_2$5, templateObject_3$2, templateObject_4, templateObject_5, templateObject_6, templateObject_7, templateObject_8, templateObject_9, templateObject_10;\nvar TopicLinksSvg = styled.svg(templateObject_1$6 || (templateObject_1$6 = __makeTemplateObject([\"\\n  width: 100%;\\n  height: 100%;\\n  position: absolute;\\n  left: 0;\\n  top: 0;\\n  z-index: 1;\\n  pointer-events: none;\\n\"], [\"\\n  width: 100%;\\n  height: 100%;\\n  position: absolute;\\n  left: 0;\\n  top: 0;\\n  z-index: 1;\\n  pointer-events: none;\\n\"])));\nvar log$6 = debug('node:topic-sub-links');\n\nvar TopicSubLinks =\n/** @class */\nfunction (_super) {\n  __extends(TopicSubLinks, _super);\n\n  function TopicSubLinks() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      curves: []\n    };\n    return _this;\n  }\n\n  TopicSubLinks.prototype.layout = function () {\n    var props = this.props;\n    var model = props.model,\n        getRef = props.getRef,\n        topicKey = props.topicKey,\n        dir = props.dir,\n        controller = props.controller;\n    var topic = model.getTopic(topicKey);\n    var content = getRef(contentRefKey(topicKey));\n    var svgRect = getRef(linksSvgRefKey(topicKey)).getBoundingClientRect();\n    var collapseRect = getRef(collapseRefKey(topicKey)).getBoundingClientRect();\n    var contentRect = content.getBoundingClientRect();\n    var p1, p2, p3;\n\n    if (dir === TopicDirection.RIGHT) {\n      p1 = {\n        x: 0,\n        y: centerY(contentRect) - svgRect.top\n      };\n      p2 = {\n        x: collapseRect.right - svgRect.left + 10,\n        y: p1.y\n      };\n    } else if (dir === TopicDirection.LEFT) {\n      p1 = {\n        x: svgRect.right,\n        y: centerY(contentRect) - svgRect.top\n      };\n      p2 = {\n        x: collapseRect.left - svgRect.left - 10,\n        y: p1.y\n      };\n    }\n\n    var curves = [];\n    topic.subKeys.forEach(function (key) {\n      var curve;\n      var linkStyle = controller.run('getLinkStyle', __assign(__assign({}, props), {\n        topicKey: key\n      }));\n      var rect = getRef(contentRefKey(key)).getBoundingClientRect();\n\n      if (dir === TopicDirection.RIGHT) {\n        p3 = {\n          x: rect.left - svgRect.left,\n          y: centerY(rect) - svgRect.top\n        };\n      }\n\n      if (dir === TopicDirection.LEFT) {\n        p3 = {\n          x: rect.right - svgRect.left,\n          y: centerY(rect) - svgRect.top\n        };\n      }\n\n      var lineType = linkStyle.lineType;\n\n      if (lineType === 'curve') {\n        curve = \"M \" + p1.x + \" \" + p1.y + \" L \" + p2.x + \" \" + p2.y + \" C \" + p2.x + \" \" + centerPointY(p2, p3) + \" \" + centerPointX(p2, p3) + \" \" + p3.y + \" \" + p3.x + \" \" + p3.y;\n      } else if (lineType === 'round') {\n        var vDir = p3.y > p1.y ? 1 : -1;\n        var hDir = p3.x > p1.x ? 1 : -1;\n        var radius = linkStyle.lineRadius;\n\n        if (p3.y === p1.y) {\n          curve = \"M \" + p1.x + \" \" + p1.y + \" H \" + p3.x;\n        } else {\n          // 0 表示逆时针 1 表示顺时针\n          curve = \"M \" + p1.x + \" \" + p1.y + \" H \" + p2.x + \" V \" + (p3.y - vDir * radius) + \" A \" + radius + \" \" + radius + \" 0 0 \" + (vDir * hDir === 1 ? 0 : 1) + \" \" + (p2.x + radius * hDir) + \" \" + p3.y + \" H \" + p3.x;\n        }\n      } else if (lineType === 'line') {\n        curve = \"M \" + p1.x + \" \" + p1.y + \" H \" + p2.x + \" L \" + p3.x + \" \" + p3.y;\n      }\n\n      curves.push(createElement(\"path\", {\n        key: \"link-\" + key,\n        d: curve,\n        strokeWidth: linkStyle.lineWidth,\n        stroke: linkStyle.lineColor,\n        fill: \"none\"\n      }));\n    });\n    log$6('curves:', curves);\n    this.setState({\n      curves: curves\n    });\n  };\n\n  TopicSubLinks.prototype.render = function () {\n    var _a = this.props,\n        topicKey = _a.topicKey,\n        saveRef = _a.saveRef;\n    return createElement(TopicLinksSvg, {\n      ref: saveRef(linksSvgRefKey(topicKey))\n    }, createElement(\"g\", null, this.state.curves));\n  };\n\n  return TopicSubLinks;\n}(BaseWidget);\n\nvar templateObject_1$6;\nvar RootLinksSvg = styled.svg(templateObject_1$7 || (templateObject_1$7 = __makeTemplateObject([\"\\n  width: 100%;\\n  height: 100%;\\n  position: absolute;\\n  left: 0;\\n  top: 0;\\n  z-index: 1;\\n  pointer-events: none;\\n\"], [\"\\n  width: 100%;\\n  height: 100%;\\n  position: absolute;\\n  left: 0;\\n  top: 0;\\n  z-index: 1;\\n  pointer-events: none;\\n\"])));\nvar log$7 = debug('node:topic-sub-links');\n\nvar RootSubLinks =\n/** @class */\nfunction (_super) {\n  __extends(RootSubLinks, _super);\n\n  function RootSubLinks() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      curves: []\n    };\n    return _this;\n  }\n\n  RootSubLinks.prototype.layout = function () {\n    var props = this.props;\n    var model = props.model,\n        getRef = props.getRef,\n        topicKey = props.topicKey,\n        dir = props.dir,\n        controller = props.controller;\n    var topic = model.getTopic(topicKey);\n    var contentRect = getRef(contentRefKey(topicKey)).getBoundingClientRect();\n    var svgRect = getRef(linksSvgRefKey(topicKey)).getBoundingClientRect();\n    var p1, p2;\n    p1 = {\n      x: centerX(contentRect) - svgRect.left,\n      y: centerY(contentRect) - svgRect.top\n    };\n    var curves = [];\n    topic.subKeys.forEach(function (key) {\n      var style = controller.run('getTopicStyle', __assign(__assign({}, props), {\n        topicKey: key\n      }));\n      var linkStyle = style.linkStyle;\n      var lineType = linkStyle.lineType;\n      var rect = getRef(contentRefKey(key)).getBoundingClientRect();\n\n      if (rect.left > contentRect.right) {\n        p2 = {\n          x: rect.left,\n          y: centerY(rect)\n        };\n      } else {\n        p2 = {\n          x: rect.right,\n          y: centerY(rect)\n        };\n      }\n\n      p2 = {\n        x: p2.x - svgRect.left,\n        y: p2.y - svgRect.top\n      };\n      var curve;\n\n      if (lineType === 'curve') {\n        curve = \"M \" + p1.x + \" \" + p1.y + \" C \" + p1.x + \" \" + centerPointY(p1, p2) + \" \" + centerPointX(p1, p2) + \" \" + p2.y + \" \" + p2.x + \" \" + p2.y;\n      } else if (lineType === 'line') {\n        curve = \"M \" + p1.x + \" \" + p1.y + \" L \" + p2.x + \" \" + p2.y;\n      } else if (lineType === 'round') {\n        var vDir = p2.y > p1.y ? 1 : -1;\n        var hDir = p2.x > p1.x ? 1 : -1;\n        var radius = linkStyle.lineRadius;\n\n        if (radius == null) {\n          throw new Error('link line type is round, but lineRadius is not provided!');\n        }\n\n        if (p2.y === p1.y) {\n          curve = \"M \" + p1.x + \" \" + p1.y + \" H \" + p2.x;\n        } else {\n          // 0 表示逆时针 1 表示顺时针\n          curve = \"M \" + p1.x + \" \" + p1.y + \"  V \" + (p2.y - vDir * radius) + \" A \" + radius + \" \" + radius + \" 0 0 \" + (vDir * hDir === 1 ? 0 : 1) + \" \" + (p1.x + radius * hDir) + \" \" + p2.y + \" H \" + p2.x;\n        }\n      }\n\n      curves.push(createElement(\"path\", {\n        key: \"link-\" + key,\n        d: curve,\n        strokeWidth: style.linkStyle.lineWidth,\n        stroke: style.linkStyle.lineColor,\n        fill: \"none\"\n      }));\n    });\n    this.setState({\n      curves: curves\n    });\n  };\n\n  RootSubLinks.prototype.render = function () {\n    var _a = this.props,\n        topicKey = _a.topicKey,\n        saveRef = _a.saveRef;\n    return createElement(RootLinksSvg, {\n      ref: saveRef(linksSvgRefKey(topicKey))\n    }, createElement(\"g\", null, this.state.curves));\n  };\n\n  return RootSubLinks;\n}(BaseWidget);\n\nvar templateObject_1$7;\nvar FocusHighlightSvg = styled.svg(templateObject_1$8 || (templateObject_1$8 = __makeTemplateObject([\"\\n  width: 100%;\\n  height: 100%;\\n  position: absolute;\\n  left: 0;\\n  top: 0;\\n  z-index: 2;\\n  pointer-events: none;\\n\"], [\"\\n  width: 100%;\\n  height: 100%;\\n  position: absolute;\\n  left: 0;\\n  top: 0;\\n  z-index: 2;\\n  pointer-events: none;\\n\"])));\n\nvar TopicHighlight =\n/** @class */\nfunction (_super) {\n  __extends(TopicHighlight, _super);\n\n  function TopicHighlight() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      content: null\n    };\n    return _this;\n  }\n\n  TopicHighlight.prototype.layout = function () {\n    var _a = this.props,\n        getRef = _a.getRef,\n        model = _a.model;\n    var focusKey = model.focusKey;\n    var focusMode = model.focusMode;\n\n    if (!focusKey || focusMode === FocusMode.EDITING_CONTENT) {\n      this.setState({\n        content: null\n      });\n      return;\n    }\n\n    var contentRect = getRef(contentRefKey(focusKey)).getBoundingClientRect();\n    var svgRect = getRef('svg-highlight').getBoundingClientRect();\n    var padding = 3;\n    var x = contentRect.left - svgRect.left - padding;\n    var y = contentRect.top - svgRect.top - padding;\n    var width = contentRect.width + 2 * padding;\n    var height = contentRect.height + 2 * padding;\n    this.setState({\n      content: createElement(\"rect\", {\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        fill: \"none\",\n        stroke: model.config.theme.highlightColor,\n        strokeWidth: 2\n      })\n    });\n  };\n\n  TopicHighlight.prototype.render = function () {\n    var saveRef = this.props.saveRef;\n    return createElement(FocusHighlightSvg, {\n      ref: saveRef('svg-highlight')\n    }, this.state.content);\n  };\n\n  return TopicHighlight;\n}(BaseWidget);\n\nvar templateObject_1$8;\nvar NodeLayer = styled.div(templateObject_1$9 || (templateObject_1$9 = __makeTemplateObject([\"\\n  position: relative;\\n  display: flex;\\n  align-items: center;\\n  padding: 5px;\\n\"], [\"\\n  position: relative;\\n  display: flex;\\n  align-items: center;\\n  padding: 5px;\\n\"])));\nvar DIV = styled.div(templateObject_2$6 || (templateObject_2$6 = __makeTemplateObject([\"\\n  width: 100%;\\n  height: 100%;\\n  background: \", \";\\n\"], [\"\\n  width: 100%;\\n  height: 100%;\\n  background: \", \";\\n\"])), function (props) {\n  return props.theme.background;\n});\n\nvar MindDragScrollWidget =\n/** @class */\nfunction (_super) {\n  __extends(MindDragScrollWidget, _super);\n\n  function MindDragScrollWidget(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.onClick = function (e) {};\n\n    return _this;\n  }\n\n  MindDragScrollWidget.prototype.componentDidMount = function () {\n    var _a = this.props,\n        getRef = _a.getRef,\n        model = _a.model;\n    var rootTopic = getRef(topicRefKey(model.editorRootTopicKey));\n    var nodeLayer = getRef('node-layer');\n    var rootTopicRect = rootTopic.getBoundingClientRect();\n    var nodeLayerRect = nodeLayer.getBoundingClientRect();\n    this.dragScrollWidget.setViewBoxScrollDelta(0, rootTopicRect.top - nodeLayerRect.top - this.dragScrollWidget.viewBox.getBoundingClientRect().height / 2 + rootTopicRect.height);\n  };\n\n  Object.defineProperty(MindDragScrollWidget.prototype, \"dragScrollWidget\", {\n    get: function () {\n      return this.props.getRef('DragScrollWidget');\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MindDragScrollWidget.prototype.render = function () {\n    var _this = this;\n\n    var _a = this.props,\n        saveRef = _a.saveRef,\n        model = _a.model,\n        controller = _a.controller;\n    var nodeKey = model.editorRootTopicKey;\n    return createElement(DIV // onClick={this.onClick}\n    , null, createElement(DragScrollWidget, __assign({}, this.state, {\n      ref: saveRef('DragScrollWidget')\n    }), function (setViewBoxScroll, setViewBoxScrollDelta) {\n      var rootWidgetProps = __assign(__assign({}, _this.props), {\n        topicKey: nodeKey,\n        setViewBoxScroll: setViewBoxScroll,\n        setViewBoxScrollDelta: setViewBoxScrollDelta\n      });\n\n      return createElement(NodeLayer, {\n        ref: saveRef('node-layer')\n      }, controller.run('renderRootWidget', rootWidgetProps));\n    }));\n  };\n\n  return MindDragScrollWidget;\n}(Component);\n\nvar templateObject_1$9, templateObject_2$6;\nvar DescWrapper = styled.div(templateObject_1$a || (templateObject_1$a = __makeTemplateObject([\"\\n  border: 1px solid #d9d9d9;\\n  height: calc(100% - 50px);\\n  padding: 0 1rem;\\n  overflow: auto;\\n  margin: 0.5rem 0.5rem 0 0.5rem;\\n\"], [\"\\n  border: 1px solid #d9d9d9;\\n  height: calc(100% - 50px);\\n  padding: 0 1rem;\\n  overflow: auto;\\n  margin: 0.5rem 0.5rem 0 0.5rem;\\n\"])));\n\nvar Modals =\n/** @class */\nfunction (_super) {\n  __extends(Modals, _super);\n\n  function Modals() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.handleClose = function () {\n      var controller = _this.props.controller;\n      var handleActiveModalClose = controller.run('handleActiveModalClose', _this.props);\n      handleActiveModalClose && handleActiveModalClose();\n    };\n\n    return _this;\n  }\n\n  Modals.prototype.render = function () {\n    var controller = this.props.controller;\n    var onClose = controller.run('handleActiveModalClose', this.props);\n    var activeModal = controller.run('renderModal', this.props);\n    var activeModalProps = controller.run('getActiveModalProps', this.props);\n    return createElement(Dialog, {\n      onClose: this.handleClose,\n      isOpen: activeModal !== null,\n      autoFocus: true,\n      enforceFocus: true,\n      usePortal: true,\n      title: activeModalProps && activeModalProps.title,\n      style: activeModalProps && activeModalProps.style\n    }, createElement(\"div\", {\n      className: Classes.DIALOG_BODY,\n      style: {\n        minHeight: 0\n      }\n    }, activeModal));\n  };\n\n  return Modals;\n}(BaseWidget);\n\nvar templateObject_1$a;\nvar DescIcon = styled.div(templateObject_1$b || (templateObject_1$b = __makeTemplateObject([\"\\n  &:hover {\\n  }\\n\"], [\"\\n  &:hover {\\n  }\\n\"])));\n\nfunction TopicDescIcon(props) {\n  var controller = props.controller,\n      model = props.model,\n      topicKey = props.topicKey;\n\n  var onClick = function (e) {\n    e.stopPropagation();\n    controller.run('operation', __assign(__assign({}, props), {\n      opType: OpType.START_EDITING_DESC\n    }));\n  };\n\n  var desc = model.getTopic(topicKey).getBlock(BlockType.DESC);\n  return desc.block && createElement(DescIcon, {\n    onClick: onClick,\n    className: iconClassName(IconName.NOTES)\n  });\n}\n\nvar templateObject_1$b;\nvar ContentEditable = styled.span(templateObject_1$c || (templateObject_1$c = __makeTemplateObject([\"\\n  &:focus {\\n    outline: 0px;\\n  }\\n\"], [\"\\n  &:focus {\\n    outline: 0px;\\n  }\\n\"])));\n\nvar SimpleTextEditor =\n/** @class */\nfunction (_super) {\n  __extends(SimpleTextEditor, _super);\n\n  function SimpleTextEditor() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.domNodeRef = function (ref) {\n      _this.domNode = ref;\n    };\n\n    _this.emitChange = function () {\n      var html = _this.domNode.innerHTML;\n\n      if (_this.props.onChange && html !== _this.lastHtml) {\n        _this.props.onChange(html);\n      }\n\n      _this.lastHtml = html;\n    };\n\n    return _this;\n  }\n\n  SimpleTextEditor.prototype.render = function () {\n    return createElement(ContentEditable, {\n      ref: this.domNodeRef,\n      // onInput={this.emitChange}\n      onBlur: this.emitChange.bind(this),\n      contentEditable: !this.props.readOnly,\n      suppressContentEditableWarning: true\n    }, this.props.editorValue);\n  };\n\n  SimpleTextEditor.prototype.shouldComponentUpdate = function (nextProps) {\n    return nextProps.html !== this.domNode.innerHTML;\n  };\n\n  return SimpleTextEditor;\n}(Component);\n\nvar templateObject_1$c;\nvar log$8 = debug('node:topic-content-editor');\nvar NodeContent = styled.div(templateObject_1$d || (templateObject_1$d = __makeTemplateObject([\"\\n  padding: 6px;\\n  background-color: \", \";\\n  color: black;\\n  cursor: \", \";\\n\"], [\"\\n  padding: 6px;\\n  background-color: \", \";\\n  color: black;\\n  cursor: \", \";\\n\"])), function (props) {\n  return props.readOnly ? null : 'white';\n}, function (props) {\n  return props.readOnly ? 'pointer' : 'text';\n});\n\nvar SimpleTopicContentEditor =\n/** @class */\nfunction (_super) {\n  __extends(SimpleTopicContentEditor, _super);\n\n  function SimpleTopicContentEditor() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.onMouseDown = function (e) {\n      e.stopPropagation();\n    };\n\n    _this.onMouseMove = function (e) {\n      e.stopPropagation();\n    };\n\n    _this.onChange = function (value) {\n      _this.operation(OpType.SET_TOPIC_CONTENT, __assign(__assign({}, _this.props), {\n        content: value\n      }));\n    };\n\n    return _this;\n  }\n\n  SimpleTopicContentEditor.prototype.render = function () {\n    var _a = this.props,\n        model = _a.model,\n        topicKey = _a.topicKey,\n        saveRef = _a.saveRef,\n        block = _a.block;\n    var content = block.data;\n    var editingContentKey = model.editingContentKey;\n    var readOnly = !(topicKey === editingContentKey);\n    var key = \"editor-\" + topicKey;\n    return createElement(NodeContent, {\n      key: key,\n      readOnly: readOnly,\n      ref: saveRef(key),\n      onMouseDown: this.onMouseDown,\n      onMouseMove: this.onMouseMove\n    }, createElement(SimpleTextEditor, {\n      editorValue: content,\n      readOnly: readOnly,\n      onChange: this.onChange\n    }));\n  };\n\n  return SimpleTopicContentEditor;\n}(BaseWidget);\n\nvar templateObject_1$d;\nvar ModalBody = styled.div(templateObject_1$e || (templateObject_1$e = __makeTemplateObject([\"\\n  height: 100%;\\n  flex: 1;\\n  display: flex;\\n  overflow: auto;\\n  background: white;\\n\"], [\"\\n  height: 100%;\\n  flex: 1;\\n  display: flex;\\n  overflow: auto;\\n  background: white;\\n\"])));\nvar ModalDescEditor = styled.div(templateObject_2$7 || (templateObject_2$7 = __makeTemplateObject([\"\\n  padding: 6px;\\n  width: 100%;\\n\"], [\"\\n  padding: 6px;\\n  width: 100%;\\n\"])));\nvar templateObject_1$e, templateObject_2$7;\nvar log$9 = debug('node:topic-content-editor');\nvar NodeContent$1 = styled.div(templateObject_1$f || (templateObject_1$f = __makeTemplateObject([\"\\n  padding: 6px;\\n  background-color: \", \";\\n  color: black;\\n  cursor: \", \";\\n\"], [\"\\n  padding: 6px;\\n  background-color: \", \";\\n  color: black;\\n  cursor: \", \";\\n\"])), function (props) {\n  return props.readOnly ? null : 'white';\n}, function (props) {\n  return props.readOnly ? 'pointer' : 'text';\n});\n\nvar SimpleTopicDescEditor =\n/** @class */\nfunction (_super) {\n  __extends(SimpleTopicDescEditor, _super);\n\n  function SimpleTopicDescEditor() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.onMouseDown = function (e) {\n      e.stopPropagation();\n    };\n\n    _this.onMouseMove = function (e) {\n      e.stopPropagation();\n    };\n\n    _this.onChange = function (value) {\n      _this.operation(OpType.SET_TOPIC_DESC, __assign(__assign({}, _this.props), {\n        desc: value\n      }));\n    };\n\n    return _this;\n  }\n\n  SimpleTopicDescEditor.prototype.render = function () {\n    var _a = this.props,\n        model = _a.model,\n        topicKey = _a.topicKey,\n        saveRef = _a.saveRef;\n    var block = model.getTopic(topicKey).getBlock(BlockType.DESC).block;\n    var content = block.data;\n    var editingDescKey = model.editingDescKey;\n    var readOnly = !(topicKey === editingDescKey);\n    var key = \"desc-\" + topicKey;\n    return createElement(NodeContent$1, {\n      key: key,\n      readOnly: readOnly,\n      ref: saveRef(key),\n      onMouseDown: this.onMouseDown,\n      onMouseMove: this.onMouseMove\n    }, createElement(SimpleTextEditor, {\n      editorValue: content,\n      readOnly: readOnly,\n      onChange: this.onChange\n    }));\n  };\n\n  return SimpleTopicDescEditor;\n}(BaseWidget);\n\nvar templateObject_1$f;\n\nfunction Theme(_a) {\n  var theme = _a.theme,\n      children = _a.children;\n  return (//@ts-ignore\n    createElement(ThemeProvider, {\n      theme: theme\n    }, createElement(Fragment, null, children))\n  );\n}\n\nvar items = [{\n  icon: 'edit',\n  label: 'edit',\n  rootCanUse: true,\n  opType: OpType.START_EDITING_CONTENT\n}, {\n  icon: 'add-sibling',\n  label: 'add sibling',\n  shortcut: 'enter',\n  opType: OpType.ADD_SIBLING\n}, {\n  icon: 'add-child',\n  label: 'add child',\n  shortcut: 'Tab',\n  rootCanUse: true,\n  opType: OpType.ADD_CHILD\n}, {\n  icon: 'notes',\n  label: 'edit notes',\n  shortcut: 'Alt + D',\n  opType: OpType.START_EDITING_DESC\n}, {\n  icon: 'delete-node',\n  label: 'delete node',\n  shortcut: 'Del',\n  opType: OpType.DELETE_TOPIC\n}];\n\nfunction customizeTopicContextMenu(props) {\n  var topicKey = props.topicKey,\n      model = props.model,\n      controller = props.controller;\n  var isRoot = topicKey === model.editorRootTopicKey;\n\n  function onClickItem(item) {\n    return function (e) {\n      item.opType && controller.run('operation', __assign(__assign({}, props), {\n        opType: item.opType\n      }));\n    };\n  }\n\n  return items.map(function (item) {\n    return isRoot && !item.rootCanUse ? null : createElement(MenuItem, {\n      key: item.label,\n      icon: Icon(item.icon),\n      text: item.label,\n      labelElement: createElement(\"kbd\", null, item.shortcut),\n      onClick: onClickItem(item)\n    });\n  });\n}\n\nvar log$a = debug('plugin:rendering');\n\nfunction RenderingPlugin() {\n  var DiagramRoot = styled.div(templateObject_1$g || (templateObject_1$g = __makeTemplateObject([\"\\n    width: 100%;\\n    height: 100%;\\n    background: \", \";\\n    position: relative;\\n  \"], [\"\\n    width: 100%;\\n    height: 100%;\\n    background: \", \";\\n    position: relative;\\n  \"])), function (props) {\n    return props.theme.background;\n  });\n  return {\n    renderDiagram: function (props) {\n      var model = props.model,\n          controller = props.controller;\n      return createElement(SaveRef, null, function (saveRef, getRef) {\n        var widgetProps = __assign(__assign({}, props), {\n          saveRef: saveRef,\n          getRef: getRef\n        });\n\n        log$a('renderDiagram', model);\n        return createElement(Theme, {\n          theme: model.config.theme\n        }, createElement(DiagramRoot, null, createElement(MindDragScrollWidget, __assign({}, widgetProps)), controller.run('renderDiagramCustomize', widgetProps)));\n      });\n    },\n    renderDiagramCustomize: function (props) {\n      var controller = props.controller,\n          model = props.model;\n      var styleEditor = controller.run('renderStyleEditor', __assign(__assign({}, props), {\n        topicKey: model.focusKey\n      }));\n      var modals = controller.run('renderModals', __assign(__assign({}, props), {\n        topicKey: model.focusKey\n      }));\n      return [styleEditor, modals];\n    },\n    renderModals: function (props) {\n      return createElement(Modals, __assign({\n        key: \"modals\"\n      }, props));\n    },\n    renderModal: function (props) {\n      var controller = props.controller,\n          model = props.model;\n      var activeModalProps = controller.run('getActiveModalProps', props);\n\n      if (activeModalProps) {\n        if (activeModalProps.name === 'edit-desc') {\n          var modalProps = __assign(__assign({}, props), {\n            topicKey: model.focusKey\n          });\n\n          return createElement(ModalBody, null, createElement(ModalDescEditor, null, controller.run('renderTopicDescEditor', modalProps)));\n        }\n      }\n\n      return null;\n    },\n    getActiveModalProps: function (props) {\n      var model = props.model;\n      if (model.focusKey && model.focusMode === FocusMode.EDITING_DESC) return {\n        name: 'edit-desc',\n        title: 'Edit Notes',\n        style: {\n          width: '50%',\n          height: '600px'\n        }\n      };\n      return null;\n    },\n    renderDoc: function (_a) {\n      var children = _a.children;\n      return children;\n    },\n    renderRootWidget: function (props) {\n      return createElement(RootWidget, __assign({}, props));\n    },\n    renderTopicWidget: function (props) {\n      return createElement(TopicWidget, __assign({}, props));\n    },\n    renderTopicContent: function (props) {\n      return createElement(TopicContentWidget, __assign({}, props));\n    },\n    renderTopicContextMenu: function (props) {\n      return createElement(TopicContextMenu, __assign({}, props));\n    },\n    customizeTopicContextMenu: customizeTopicContextMenu,\n    renderTopicContentEditor: function (props) {\n      log$a('renderTopicContentEditor', props); // return <TopicContentEditor {...props} />;\n\n      return createElement(SimpleTopicContentEditor, __assign({}, props));\n    },\n    renderTopicDescEditor: function (props) {\n      return createElement(SimpleTopicDescEditor, __assign({}, props));\n    },\n    renderTopicCollapseIcon: function (props) {\n      return createElement(TopicCollapseIcon, __assign({}, props));\n    },\n    renderBlocks: function (props) {\n      var model = props.model,\n          topicKey = props.topicKey,\n          controller = props.controller;\n      var topic = model.getTopic(topicKey);\n      var blocks = topic.blocks;\n      var res = [];\n      var i = 0;\n      blocks.forEach(function (block) {\n        var b = controller.run('renderBlock', __assign(__assign({}, props), {\n          block: block,\n          blockKey: \"block-\" + i\n        }));\n\n        if (b) {\n          res.push(createElement(Fragment, {\n            key: \"block-\" + i\n          }, b));\n          i++;\n        }\n      });\n      return res;\n    },\n    renderBlock: function (props) {\n      var controller = props.controller,\n          block = props.block;\n\n      switch (block.type) {\n        case BlockType.CONTENT:\n          return controller.run('renderTopicContentEditor', props);\n\n        case BlockType.DESC:\n          return createElement(TopicDescIcon, __assign({}, props));\n      }\n    },\n    renderSubLinks: function (props) {\n      var saveRef = props.saveRef,\n          topicKey = props.topicKey,\n          model = props.model;\n      var topic = model.getTopic(topicKey);\n      if (topic.subKeys.size === 0 || topic.collapse) return null;\n      return createElement(TopicSubLinks, __assign({\n        ref: saveRef(linksRefKey(topicKey))\n      }, props));\n    },\n    renderRootSubLinks: function (props) {\n      var saveRef = props.saveRef,\n          topicKey = props.topicKey,\n          model = props.model;\n      var topic = model.getTopic(topicKey);\n      if (topic.subKeys.size === 0) return null;\n      return createElement(RootSubLinks, __assign({\n        ref: saveRef(linksRefKey(topicKey))\n      }, props));\n    },\n    renderFocusItemHighlight: function (props) {\n      var saveRef = props.saveRef;\n      return createElement(TopicHighlight, __assign({\n        ref: saveRef('focus-highlight')\n      }, props));\n    },\n    renderRootWidgetOtherChildren: function (props) {\n      var controller = props.controller;\n      return createElement(Fragment, null, controller.run('renderRootSubLinks', props), controller.run('renderFocusItemHighlight', props), controller.run('renderDragAndDropEffect', props));\n    },\n    renderStyleEditor: function (props) {\n      return createElement(StyleEditor, __assign({\n        key: \"style-editor\"\n      }, props));\n    }\n  };\n}\n\nvar templateObject_1$g;\n\nfunction ReactPlugin(options) {\n  var renderingPlugin = RenderingPlugin();\n  return [renderingPlugin];\n}\n\nfunction LayoutPlugin() {\n  return {\n    getPartTopics: function (_a) {\n      var layout = _a.layout,\n          model = _a.model,\n          topicKey = _a.topicKey;\n      var topic = model.getTopic(topicKey);\n      var subTopicCount = topic.subKeys.size;\n      var topics = topic.subKeys.toArray();\n\n      switch (layout) {\n        case DiagramLayoutType.LEFT_TO_RIGHT:\n          return {\n            R: topics\n          };\n\n        case DiagramLayoutType.RIGHT_TO_LEFT:\n          return {\n            L: topics\n          };\n\n        case DiagramLayoutType.LEFT_AND_RIGHT:\n          return {\n            L: topics.slice(Math.ceil(subTopicCount / 2), subTopicCount),\n            R: topics.slice(0, Math.ceil(subTopicCount / 2))\n          };\n\n        case DiagramLayoutType.TOP_TO_BOTTOM:\n          return {\n            B: topics\n          };\n      }\n    },\n    createSubTopics: function (_a) {\n      var props = _a.props,\n          topics = _a.topics;\n      var model = props.model,\n          topicKey = props.topicKey;\n      var topic = model.getTopic(topicKey);\n      if (topics.size === 0 || topic.collapse) return null;\n      var subTopics = [];\n      topics.forEach(function (tKey) {\n        var subTopicProps = __assign(__assign({}, props), {\n          topicKey: tKey\n        });\n\n        subTopics.push(createElement(TopicWidget, __assign({\n          key: tKey\n        }, subTopicProps)));\n      });\n      return {\n        subTopics: subTopics\n      };\n    },\n    layout: function (props) {\n      var getRef = props.getRef,\n          topicKey = props.topicKey;\n      var links = getRef(linksRefKey(topicKey));\n      var highlight = getRef('focus-highlight');\n      var dropEffect = getRef('drop-effect');\n      links && links.layout();\n      highlight && highlight.layout();\n      dropEffect && dropEffect.layout();\n    },\n    setLayoutDir: function (props) {\n      var layoutDir = props.layoutDir,\n          model = props.model,\n          controller = props.controller;\n      controller.change(ModelModifier.setLayoutDir({\n        model: model,\n        layoutDir: layoutDir\n      }));\n    }\n  };\n}\n\nvar log$b = debug('plugin:StylePlugin');\n\nfunction StylePlugin() {\n  var colorMap = new Map();\n  var colorIndex = 0;\n  return {\n    getTopicStyle: function (props) {\n      log$b('getTopicStyle');\n      var topicKey = props.topicKey,\n          model = props.model,\n          controller = props.controller;\n      var visualLevel = model.getTopicVisualLevel(topicKey);\n      var theme = model.config.theme;\n      var themeStyle;\n      if (visualLevel === TopicVisualLevel.ROOT) themeStyle = theme.rootTopic;else if (visualLevel === TopicVisualLevel.PRIMARY) themeStyle = theme.primaryTopic;else themeStyle = theme.normalTopic;\n\n      if (theme.randomColor) {\n        var randomColor = controller.run('getRandomColor', props);\n        themeStyle = __assign(__assign({}, themeStyle), {\n          background: randomColor,\n          borderColor: randomColor,\n          linkStyle: __assign(__assign({}, themeStyle.linkStyle), {\n            lineColor: randomColor\n          })\n        });\n      }\n\n      var topic = model.getTopic(topicKey);\n\n      if (!topic.style) {\n        return themeStyle;\n      }\n\n      var customStyle = JSON.parse(topic.style);\n      return __assign(__assign(__assign({}, themeStyle), customStyle), {\n        linkStyle: __assign(__assign({}, themeStyle.linkStyle), customStyle.linkStyle)\n      });\n    },\n    getLinkStyle: function (props) {\n      var topicKey = props.topicKey,\n          model = props.model,\n          controller = props.controller;\n      var visualLevel = model.getTopicVisualLevel(topicKey);\n      var theme = model.config.theme;\n      var linkStyle;\n      if (visualLevel === TopicVisualLevel.ROOT) linkStyle = theme.rootTopic.linkStyle;else if (visualLevel === TopicVisualLevel.PRIMARY) linkStyle = theme.primaryTopic.linkStyle;else linkStyle = theme.normalTopic.linkStyle;\n      var topic = model.getTopic(topicKey);\n\n      if (theme.randomColor) {\n        var randomColor = controller.run('getRandomColor', __assign(__assign({}, props), {\n          topicKey: topic.parentKey !== model.editorRootTopicKey ? topic.parentKey : topicKey\n        }));\n        linkStyle = __assign(__assign({}, linkStyle), {\n          lineColor: randomColor\n        });\n      }\n\n      if (!topic.style) {\n        return linkStyle;\n      }\n\n      var customStyle = JSON.parse(topic.style);\n      return __assign(__assign({}, linkStyle), customStyle.linkStyle);\n    },\n    getTopicThemeStyle: function (props) {\n      var topicKey = props.topicKey,\n          model = props.model;\n      var visualLevel = model.getTopicVisualLevel(topicKey);\n      var theme = model.config.theme;\n      if (visualLevel === TopicVisualLevel.ROOT) return theme.rootTopic;\n      if (visualLevel === TopicVisualLevel.PRIMARY) return theme.primaryTopic;\n      return theme.normalTopic;\n    },\n    getRandomColor: function (props) {\n      var topicKey = props.topicKey;\n      if (colorMap.has(topicKey)) return colorMap.get(topicKey);\n      var colors = ['#00CC99', '#FFEE88', '#A167A5', '#E5F993', '#F5C396', '#DB995A', '#83BCFF', '#ED7B84', '#F92A82', '#83BCFF'];\n      var color = colors[++colorIndex % colors.length];\n      colorMap.set(topicKey, color);\n      return color;\n    }\n  };\n}\n\nvar log$c = debug('plugin:event');\n\nfunction EventPlugin() {\n  return {\n    handleTopicClick: function (props) {\n      log$c('handleTopicClick');\n      var controller = props.controller,\n          model = props.model,\n          topicKey = props.topicKey;\n      if (model.focusKey === topicKey && model.focusMode === FocusMode.EDITING_CONTENT) return;\n      controller.run('operation', __assign(__assign({}, props), {\n        opType: OpType.FOCUS_TOPIC,\n        focusMode: FocusMode.NORMAL\n      }));\n    },\n    handleTopicDoubleClick: function (props) {\n      var controller = props.controller;\n      controller.run('operation', __assign(__assign({}, props), {\n        opType: OpType.FOCUS_TOPIC,\n        focusMode: FocusMode.EDITING_CONTENT\n      }));\n    },\n    handleTopicContextMenu: function (props) {\n      var controller = props.controller;\n      controller.run('operation', __assign(__assign({}, props), {\n        opType: OpType.FOCUS_TOPIC,\n        focusMode: FocusMode.SHOW_POPUP\n      }));\n    },\n    handleActiveModalClose: function (props) {\n      var controller = props.controller;\n      var activeModalProps = controller.run('getActiveModalProps', props);\n      if (activeModalProps == null) return null;\n\n      if (activeModalProps.name === 'edit-desc') {\n        return function () {\n          controller.run('operation', __assign(__assign({}, props), {\n            focusMode: FocusMode.NORMAL,\n            opType: OpType.FOCUS_TOPIC\n          }));\n        };\n      }\n    }\n  };\n}\n\nvar HotKeyName = {\n  ADD_CHILD: 'ADD_CHILD',\n  ADD_SIBLING: 'ADD_SIBLING',\n  DELETE_TOPIC: 'DELETE_TOPIC',\n  EDIT_NOTES: 'EDIT_NOTES'\n};\n\nfunction op(opType, props) {\n  var topicKey = props.topicKey,\n      model = props.model,\n      controller = props.controller;\n\n  if (topicKey === undefined) {\n    props = __assign(__assign({}, props), {\n      topicKey: model.focusKey\n    });\n  }\n\n  controller.run('operation', __assign(__assign({}, props), {\n    opType: opType\n  }));\n}\n\nfunction HotKeyPlugin() {\n  return {\n    customizeHotKeys: function (props) {\n      var hotKeyMap = new Map([[HotKeyName.ADD_CHILD, {\n        label: 'add child',\n        combo: 'tab',\n        onKeyDown: function (e) {\n          op(OpType.ADD_CHILD, props);\n        }\n      }], [HotKeyName.ADD_SIBLING, {\n        label: 'add sibling',\n        combo: 'enter',\n        onKeyDown: function (e) {\n          op(OpType.ADD_SIBLING, props);\n        }\n      }], [HotKeyName.DELETE_TOPIC, {\n        label: 'delete topic',\n        combo: 'del',\n        onKeyDown: function (e) {\n          op(OpType.DELETE_TOPIC, props);\n        }\n      }], [HotKeyName.EDIT_NOTES, {\n        label: 'edit notes',\n        combo: 'alt + d',\n        onKeyDown: function (e) {\n          op(OpType.START_EDITING_DESC, props);\n        }\n      }]]);\n      return hotKeyMap;\n    }\n  };\n}\n\nvar log$d = debug('node:topic-drop-effect');\nvar DropEffectSvg = styled.svg(templateObject_1$h || (templateObject_1$h = __makeTemplateObject([\"\\n  width: 100%;\\n  height: 100%;\\n  position: absolute;\\n  left: 0;\\n  top: 0;\\n  z-index: 2;\\n  pointer-events: none;\\n\"], [\"\\n  width: 100%;\\n  height: 100%;\\n  position: absolute;\\n  left: 0;\\n  top: 0;\\n  z-index: 2;\\n  pointer-events: none;\\n\"])));\n\nvar TopicDropEffect =\n/** @class */\nfunction (_super) {\n  __extends(TopicDropEffect, _super);\n\n  function TopicDropEffect() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      content: null\n    };\n    return _this;\n  }\n\n  TopicDropEffect.prototype.layout = function () {\n    var props = this.props;\n    var _a = this.props,\n        getRef = _a.getRef,\n        model = _a.model,\n        controller = _a.controller;\n    var targetProps = controller.run('getDragTargetProps', props);\n    var key = targetProps.key,\n        dropDir = targetProps.dropDir;\n    log$d('layout', dropDir);\n\n    if (key === null) {\n      this.setState({\n        content: null\n      });\n      return;\n    }\n\n    var dropAreaRefKey;\n\n    if (dropDir === 'in') {\n      dropAreaRefKey = contentRefKey(key);\n    } else {\n      dropAreaRefKey = \"dropArea-\" + dropDir + \"-\" + key;\n    }\n\n    var contentRect = getRef(dropAreaRefKey).getBoundingClientRect();\n    var svgRect = getRef('svg-drop-effect').getBoundingClientRect();\n    var padding = 3;\n    var x = contentRect.left - svgRect.left - padding;\n    var y = contentRect.top - svgRect.top - padding;\n    var width = contentRect.width + 2 * padding;\n    var height = contentRect.height + 2 * padding;\n    this.setState({\n      content: createElement(\"g\", null, createElement(\"rect\", {\n        x: x,\n        y: y,\n        width: width,\n        height: height,\n        fill: \"none\",\n        stroke: model.config.theme.highlightColor,\n        strokeDasharray: \"5,5\",\n        strokeWidth: 2\n      }))\n    });\n  };\n\n  TopicDropEffect.prototype.render = function () {\n    var saveRef = this.props.saveRef;\n    return createElement(DropEffectSvg, {\n      ref: saveRef('svg-drop-effect')\n    }, this.state.content);\n  };\n\n  return TopicDropEffect;\n}(BaseWidget);\n\nvar templateObject_1$h;\nvar log$e = debug('plugin:drag-and-drop');\nvar DropArea = styled.div(templateObject_1$i || (templateObject_1$i = __makeTemplateObject([\"\\n  height: \", \";\\n  width: 100%;\\n  margin: 5px 0px;\\n\"], [\"\\n  height: \", \";\\n  width: 100%;\\n  margin: 5px 0px;\\n\"])), function (props) {\n  return props.height + \"px\";\n});\nvar DropEffects = styled.svg(templateObject_2$8 || (templateObject_2$8 = __makeTemplateObject([\"\"], [\"\"])));\n\nfunction DragAndDrop() {\n  var dragTargetKey = null;\n  var dragTargetDir = null;\n  return {\n    renderTopicDropArea: function (props) {\n      var topicKey = props.topicKey,\n          dropDir = props.dropDir,\n          saveRef = props.saveRef,\n          controller = props.controller,\n          model = props.model;\n\n      var onDragEnter = function (ev) {\n        log$e('onDragEnter', topicKey, dropDir);\n        controller.run('handleTopicDragEnter', __assign(__assign({}, props), {\n          ev: ev,\n          dropDir: dropDir\n        }));\n      };\n\n      var onDragLeave = function (ev) {\n        log$e('onDragLeave', topicKey, dropDir);\n        controller.run('handleTopicDragLeave', __assign(__assign({}, props), {\n          ev: ev,\n          dropDir: dropDir\n        }));\n      };\n\n      var onDragOver = function (ev) {\n        ev.preventDefault();\n      };\n\n      var onDrop = function (ev) {\n        log$e('onDrop', topicKey, dropDir);\n        controller.run('handleTopicDrop', __assign(__assign({}, props), {\n          ev: ev,\n          dropDir: dropDir\n        }));\n      };\n\n      var eventHandlers = {\n        onDragEnter: onDragEnter,\n        onDragLeave: onDragLeave,\n        onDragOver: onDragOver,\n        onDrop: onDrop\n      };\n      return createElement(DropArea, __assign({\n        height: model.config.theme.marginV / 2,\n        ref: saveRef(\"dropArea-\" + dropDir + \"-\" + topicKey)\n      }, eventHandlers));\n    },\n    renderDragAndDropEffect: function (props) {\n      log$e('renderDragAndDropEffect');\n      var saveRef = props.saveRef;\n      return createElement(TopicDropEffect, __assign({\n        ref: saveRef('drop-effect')\n      }, props));\n    },\n    // getTopicDropEventHandlers(props) {\n    //   const { dropDir, controller, topicKey } = props;\n    //   const onDragEnter = ev => {\n    //     log('onDragEnter', topicKey, dropDir);\n    //     controller.run('handleTopicDragEnter', { ...props, ev, dropDir });\n    //   };\n    //   const onDragLeave = ev => {\n    //     log('onDragLeave', topicKey, dropDir);\n    //     controller.run('handleTopicDragLeave', { ...props, ev, dropDir });\n    //   };\n    //   const onDragOver = ev => {\n    //     ev.preventDefault();\n    //   };\n    //   const onDrop = ev => {\n    //     log('onDrop', topicKey, dropDir);\n    //     controller.run('handleTopicDrop', { ...props, ev, dropDir });\n    //   };\n    //   const eventHandlers = {\n    //     onDragEnter,\n    //     onDragLeave,\n    //     onDragOver,\n    //     onDrop\n    //   };\n    //   return eventHandlers;\n    // },\n    getDragTargetProps: function (props) {\n      return {\n        key: dragTargetKey,\n        dropDir: dragTargetDir\n      };\n    },\n    handleTopicDragStart: function (props) {\n      var controller = props.controller,\n          ev = props.ev;\n      ev.stopPropagation();\n      controller.run('operation', __assign(__assign({}, props), {\n        opType: OpType.FOCUS_TOPIC,\n        focusMode: FocusMode.DRAGGING\n      }));\n    },\n    canDrop: function (props) {\n      var srcKey = props.srcKey,\n          dstKey = props.dstKey,\n          model = props.model,\n          dropDir = props.dropDir;\n      if (srcKey === model.editorRootTopicKey || srcKey === dstKey || getRelationship(model, srcKey, dstKey) === TopicRelationship.ANCESTOR) return false;\n      if (dstKey === model.editorRootTopicKey && dropDir !== 'in') return false;\n      var srcTopic = model.getTopic(srcKey);\n      if (srcTopic.parentKey === dstKey && dropDir === 'in') return false;\n      return true;\n    },\n    handleTopicDragEnter: function (props) {\n      var dropDir = props.dropDir,\n          topicKey = props.topicKey,\n          controller = props.controller,\n          model = props.model,\n          ev = props.ev;\n      log$e('handleTopicDragEnter:', topicKey, dropDir);\n      var canDrop = controller.run('canDrop', __assign(__assign({}, props), {\n        srcKey: model.focusKey,\n        dstKey: topicKey\n      }));\n\n      if (canDrop) {\n        dragTargetKey = topicKey;\n        dragTargetDir = dropDir;\n        controller.change(model);\n      }\n    },\n    handleTopicDragLeave: function (props) {\n      var controller = props.controller,\n          model = props.model,\n          topicKey = props.topicKey,\n          dropDir = props.dropDir,\n          getRef = props.getRef,\n          ev = props.ev;\n      var relatedTarget = ev.nativeEvent.relatedTarget;\n      log$e('handleTopicDragLeave:', topicKey, dropDir);\n      var content = getRef(contentRefKey(topicKey));\n\n      if (content == relatedTarget || content.contains(relatedTarget)) {\n        return;\n      }\n\n      dragTargetKey = null;\n      dragTargetDir = null;\n      controller.change(model);\n    },\n    handleTopicDrop: function (props) {\n      log$e('handleTopicDrop');\n      var controller = props.controller,\n          topicKey = props.topicKey,\n          model = props.model;\n      props = __assign(__assign({}, props), {\n        srcKey: model.focusKey,\n        dstKey: topicKey\n      });\n      dragTargetKey = null;\n      dragTargetDir = null;\n\n      if (controller.run('canDrop', props)) {\n        controller.run('operation', __assign(__assign({}, props), {\n          opType: OpType.DRAG_AND_DROP\n        }));\n      }\n    }\n  };\n}\n\nvar templateObject_1$i, templateObject_2$8;\n\nfunction DefaultPlugin() {\n  return [ReactPlugin(), LayoutPlugin(), OperationPlugin(), StylePlugin(), EventPlugin(), HotKeyPlugin(), DragAndDrop()];\n}\n\nvar log$f = debug('node:Diagram');\n\nvar Diagram =\n/** @class */\nfunction (_super) {\n  __extends(Diagram, _super);\n\n  function Diagram() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.resolveController = memoizeOne(function (plugins, commands, TheDefaultPlugin) {\n      if (plugins === void 0) {\n        plugins = [];\n      }\n\n      var defaultPlugin = TheDefaultPlugin();\n      _this.controller = new Controller({\n        plugins: [plugins, defaultPlugin],\n        commands: commands,\n        construct: false,\n        onChange: _this.props.onChange\n      });\n\n      _this.controller.run('onConstruct');\n    });\n    return _this;\n  }\n\n  Diagram.prototype.getDiagramProps = function () {\n    return this.diagramProps;\n  };\n\n  Diagram.prototype.renderHotkeys = function () {\n    log$f(\"renderHotkeys\");\n    var controller = this.diagramProps.controller;\n    var hotKeys = controller.run('customizeHotKeys', this.diagramProps);\n    if (hotKeys === null) return null;\n\n    if (!(hotKeys instanceof Map)) {\n      throw new TypeError('customizeHotKeys must return a Map');\n    }\n\n    log$f(hotKeys);\n    var children = [];\n    hotKeys.forEach(function (v, k) {\n      log$f(k, v);\n      children.push(createElement(Hotkey, __assign({\n        key: k\n      }, v, {\n        global: true\n      })));\n    });\n    return createElement(Hotkeys, null, children);\n  };\n\n  Diagram.prototype.render = function () {\n    var _a = this.props,\n        commands = _a.commands,\n        plugins = _a.plugins,\n        model = _a.model;\n    this.resolveController(plugins, commands, DefaultPlugin);\n    this.diagramProps = __assign(__assign({}, this.props), {\n      controller: this.controller,\n      model: model,\n      diagram: this\n    });\n    return this.controller.run('renderDiagram', this.diagramProps);\n  };\n\n  Diagram = __decorate([HotkeysTarget], Diagram);\n  return Diagram;\n}(Component);\n\nexport { BaseWidget, Diagram, Icon, IconName, OpType, centerPointX, centerPointY, centerX, centerY, collapseRefKey, contentRefKey, getLinkKey, iconClassName, linksRefKey, linksSvgRefKey, topicRefKey };","map":null,"metadata":{},"sourceType":"module"}