{"ast":null,"code":"/**\n * Original by Samuel Flores\n *\n * Adds the following new token classes:\n * \t\tconstant, builtin, variable, symbol, regex\n */\n(function (Prism) {\n  Prism.languages.ruby = Prism.languages.extend('clike', {\n    'comment': [/#.*/, {\n      pattern: /^=begin\\s[\\s\\S]*?^=end/m,\n      greedy: true\n    }],\n    'class-name': {\n      pattern: /(\\b(?:class)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n      lookbehind: true,\n      inside: {\n        'punctuation': /[.\\\\]/\n      }\n    },\n    'keyword': /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\\b/\n  });\n  var interpolation = {\n    pattern: /#\\{[^}]+\\}/,\n    inside: {\n      'delimiter': {\n        pattern: /^#\\{|\\}$/,\n        alias: 'tag'\n      },\n      rest: Prism.languages.ruby\n    }\n  };\n  delete Prism.languages.ruby.function;\n  Prism.languages.insertBefore('ruby', 'keyword', {\n    'regex': [{\n      pattern: /%r([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }, {\n      pattern: /%r\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }, {\n      // Here we need to specifically allow interpolation\n      pattern: /%r\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }, {\n      pattern: /%r\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }, {\n      pattern: /%r<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/,\n      greedy: true,\n      inside: {\n        'interpolation': interpolation\n      }\n    }, {\n      pattern: /(^|[^/])\\/(?!\\/)(?:\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*(?:$|[\\r\\n,.;})]))/,\n      lookbehind: true,\n      greedy: true\n    }],\n    'variable': /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n    'symbol': {\n      pattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n      lookbehind: true\n    },\n    'method-definition': {\n      pattern: /(\\bdef\\s+)[\\w.]+/,\n      lookbehind: true,\n      inside: {\n        'function': /\\w+$/,\n        rest: Prism.languages.ruby\n      }\n    }\n  });\n  Prism.languages.insertBefore('ruby', 'number', {\n    'builtin': /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n    'constant': /\\b[A-Z]\\w*(?:[?!]|\\b)/\n  });\n  Prism.languages.ruby.string = [{\n    pattern: /%[qQiIwWxs]?([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n    greedy: true,\n    inside: {\n      'interpolation': interpolation\n    }\n  }, {\n    pattern: /%[qQiIwWxs]?\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\n    greedy: true,\n    inside: {\n      'interpolation': interpolation\n    }\n  }, {\n    // Here we need to specifically allow interpolation\n    pattern: /%[qQiIwWxs]?\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/,\n    greedy: true,\n    inside: {\n      'interpolation': interpolation\n    }\n  }, {\n    pattern: /%[qQiIwWxs]?\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/,\n    greedy: true,\n    inside: {\n      'interpolation': interpolation\n    }\n  }, {\n    pattern: /%[qQiIwWxs]?<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\n    greedy: true,\n    inside: {\n      'interpolation': interpolation\n    }\n  }, {\n    pattern: /(\"|')(?:#\\{[^}]+\\}|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n    greedy: true,\n    inside: {\n      'interpolation': interpolation\n    }\n  }];\n  Prism.languages.rb = Prism.languages.ruby;\n})(Prism);","map":{"version":3,"sources":["C:/Users/ayomi/source/repos/Idea-Creator/Idea-Creator/MindOverMapper_Movim/MindOverMapper_Movim/ClientApp/node_modules/prismjs/components/prism-ruby.js"],"names":["Prism","languages","ruby","extend","pattern","greedy","lookbehind","inside","interpolation","alias","rest","function","insertBefore","string","rb"],"mappings":"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","sourcesContent":["/**\n * Original by Samuel Flores\n *\n * Adds the following new token classes:\n * \t\tconstant, builtin, variable, symbol, regex\n */\n(function(Prism) {\n\tPrism.languages.ruby = Prism.languages.extend('clike', {\n\t\t'comment': [\n\t\t\t/#.*/,\n\t\t\t{\n\t\t\t\tpattern: /^=begin\\s[\\s\\S]*?^=end/m,\n\t\t\t\tgreedy: true\n\t\t\t}\n\t\t],\n    'class-name': {\n      pattern: /(\\b(?:class)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n      lookbehind: true,\n      inside: {\n        'punctuation': /[.\\\\]/\n      }\n    },\n\t\t'keyword': /\\b(?:alias|and|BEGIN|begin|break|case|class|def|define_method|defined|do|each|else|elsif|END|end|ensure|extend|for|if|in|include|module|new|next|nil|not|or|prepend|protected|private|public|raise|redo|require|rescue|retry|return|self|super|then|throw|undef|unless|until|when|while|yield)\\b/\n\t});\n\n\tvar interpolation = {\n\t\tpattern: /#\\{[^}]+\\}/,\n\t\tinside: {\n\t\t\t'delimiter': {\n\t\t\t\tpattern: /^#\\{|\\}$/,\n\t\t\t\talias: 'tag'\n\t\t\t},\n\t\t\trest: Prism.languages.ruby\n\t\t}\n\t};\n\n\tdelete Prism.languages.ruby.function;\n\n\tPrism.languages.insertBefore('ruby', 'keyword', {\n\t\t'regex': [\n\t\t\t{\n\t\t\t\tpattern: /%r([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1[gim]{0,3}/,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation': interpolation\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /%r\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)[gim]{0,3}/,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation': interpolation\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\t// Here we need to specifically allow interpolation\n\t\t\t\tpattern: /%r\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}[gim]{0,3}/,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation': interpolation\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /%r\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\][gim]{0,3}/,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation': interpolation\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /%r<(?:[^<>\\\\]|\\\\[\\s\\S])*>[gim]{0,3}/,\n\t\t\t\tgreedy: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation': interpolation\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tpattern: /(^|[^/])\\/(?!\\/)(?:\\[.+?]|\\\\.|[^/\\\\\\r\\n])+\\/[gim]{0,3}(?=\\s*(?:$|[\\r\\n,.;})]))/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tgreedy: true\n\t\t\t}\n\t\t],\n\t\t'variable': /[@$]+[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n\t\t'symbol': {\n\t\t\tpattern: /(^|[^:]):[a-zA-Z_]\\w*(?:[?!]|\\b)/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t'method-definition': {\n\t\t\tpattern: /(\\bdef\\s+)[\\w.]+/,\n\t\t\tlookbehind: true,\n\t\t\tinside: {\n\t\t\t\t'function': /\\w+$/,\n\t\t\t\trest: Prism.languages.ruby\n\t\t\t}\n\t\t}\n\t});\n\n\tPrism.languages.insertBefore('ruby', 'number', {\n\t\t'builtin': /\\b(?:Array|Bignum|Binding|Class|Continuation|Dir|Exception|FalseClass|File|Stat|Fixnum|Float|Hash|Integer|IO|MatchData|Method|Module|NilClass|Numeric|Object|Proc|Range|Regexp|String|Struct|TMS|Symbol|ThreadGroup|Thread|Time|TrueClass)\\b/,\n\t\t'constant': /\\b[A-Z]\\w*(?:[?!]|\\b)/\n\t});\n\n\tPrism.languages.ruby.string = [\n\t\t{\n\t\t\tpattern: /%[qQiIwWxs]?([^a-zA-Z0-9\\s{(\\[<])(?:(?!\\1)[^\\\\]|\\\\[\\s\\S])*\\1/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'interpolation': interpolation\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tpattern: /%[qQiIwWxs]?\\((?:[^()\\\\]|\\\\[\\s\\S])*\\)/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'interpolation': interpolation\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\t// Here we need to specifically allow interpolation\n\t\t\tpattern: /%[qQiIwWxs]?\\{(?:[^#{}\\\\]|#(?:\\{[^}]+\\})?|\\\\[\\s\\S])*\\}/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'interpolation': interpolation\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tpattern: /%[qQiIwWxs]?\\[(?:[^\\[\\]\\\\]|\\\\[\\s\\S])*\\]/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'interpolation': interpolation\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tpattern: /%[qQiIwWxs]?<(?:[^<>\\\\]|\\\\[\\s\\S])*>/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'interpolation': interpolation\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\tpattern: /(\"|')(?:#\\{[^}]+\\}|\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\t\tgreedy: true,\n\t\t\tinside: {\n\t\t\t\t'interpolation': interpolation\n\t\t\t}\n\t\t}\n\t];\n\n\tPrism.languages.rb = Prism.languages.ruby;\n}(Prism));\n"]},"metadata":{},"sourceType":"script"}