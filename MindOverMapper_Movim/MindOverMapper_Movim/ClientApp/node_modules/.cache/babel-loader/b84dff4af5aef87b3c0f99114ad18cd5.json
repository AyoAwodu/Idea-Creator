{"ast":null,"code":"import _defineProperty from \"/Users/evan/Idea-Creator/MindOverMapper_Movim/MindOverMapper_Movim/ClientApp/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/evan/Idea-Creator/MindOverMapper_Movim/MindOverMapper_Movim/ClientApp/src/components/main/components/projectview/mindmapper/component/MindMap.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from \"react\";\nimport axios from 'axios';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { Toolbar } from \"./Toolbar\";\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport IconButton from '@material-ui/core/IconButton';\nimport { Diagram } from \"@blink-mind/renderer-react\";\nimport RichTextEditorPlugin from \"@blink-mind/plugin-rich-text-editor\";\nimport { JsonSerializerPlugin } from \"@blink-mind/plugin-json-serializer\";\nimport { ThemeSelectorPlugin } from \"@blink-mind/plugin-theme-selector\";\nimport \"@blink-mind/renderer-react/lib/main.css\";\nimport './MindMap.css';\nimport LoadingGIF from '../../../../../../static/Loading3.gif';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { downloadFile, generateSimpleModel } from \"../utils\";\nconst plugins = [RichTextEditorPlugin(), JsonSerializerPlugin(), ThemeSelectorPlugin()];\nexport default class MindMap extends React.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.diagramRef = ref => {\n      this.diagram = ref;\n      this.setState({});\n    };\n\n    this.handleOpenSuccessSnackBar = version => {\n      this.setState({\n        openSuccessSnackBar: true,\n        diagramVersion: version\n      });\n    };\n\n    this.handleCloseSuccessSnackBar = () => {\n      this.setState({\n        openSuccessSnackBar: false\n      });\n    };\n\n    this.handleOpenErrorSnackBar = () => {\n      this.setState({\n        openErrorSnackBar: true\n      });\n    };\n\n    this.handleCloseErrorSnackBar = () => {\n      this.setState({\n        openErrorSnackBar: false\n      });\n    };\n\n    this.componentDidMount = async () => {\n      await this.retrieveMindMap(this.props.projectInfo.uid);\n      this.autoSave(); // Enable auto save \n    };\n\n    this.autoSave = async () => {\n      let id = await setTimeout(async () => {\n        if (this.state.model === this.state.oldState) {\n          this.autoSave();\n        } else {\n          await this.saveMindMap();\n          this.setState({\n            oldState: this.state.model\n          });\n          this.autoSave();\n        }\n      }, 10000);\n      this.timeOutID = id;\n    };\n\n    this.retrieveMindMap = async projectId => {\n      let mindModelConfig = await axios.get(\"/api/project/\".concat(projectId, \"/state\"), {\n        headers: {\n          Authorization: 'Bearer ' + this.props.userData.token //the token is a variable which holds the token\n\n        }\n      }).then(res => {\n        this.setState({\n          loading: false\n        });\n        return res.data;\n      });\n      const props = this.diagram.getDiagramProps();\n      const controller = props.controller;\n      let obj = mindModelConfig.state;\n      let model = controller.run(\"deserializeModel\", {\n        controller,\n        obj\n      });\n      this.setState({\n        model,\n        diagramVersion: mindModelConfig.version\n      });\n    };\n\n    this.saveMindMap = async () => {\n      let exportyboi = this.exportJson();\n      axios({\n        method: 'put',\n        url: \"/api/project/\".concat(this.props.projectInfo.uid, \"/state\"),\n        headers: {\n          Authorization: 'Bearer ' + this.props.userData.token,\n          //the token is a variable which holds the token\n          'Content-Type': 'application/json'\n        },\n        data: JSON.stringify({\n          \"state\": exportyboi,\n          \"version\": this.state.diagramVersion\n        })\n      }).then(response => {\n        // Saved successfully\n        this.handleOpenSuccessSnackBar(response.data.version);\n      }).catch(error => {\n        // Save conflict\n        this.handleOpenErrorSnackBar();\n        this.retrieveMindMap(this.props.projectInfo.uid);\n      });\n    };\n\n    this.onClickOpenFile = e => {\n      const input = document.createElement(\"input\");\n      const props = this.diagram.getDiagramProps();\n      const controller = props.controller;\n      input.type = \"file\";\n      input.accept = \".json\";\n      input.addEventListener(\"change\", evt => {\n        const file = evt.target.files[0];\n        const fr = new FileReader();\n\n        fr.onload = evt => {\n          const txt = evt.target.result;\n          let obj = JSON.parse(txt);\n          let model = controller.run(\"deserializeModel\", {\n            controller,\n            obj\n          });\n          this.setState({\n            model\n          });\n        };\n\n        fr.readAsText(file);\n      });\n      input.click();\n    };\n\n    this.exportJson = e => {\n      const props = this.diagram.getDiagramProps();\n      const controller = props.controller;\n      const json = controller.run(\"serializeModel\", props);\n      return json;\n    };\n\n    this.onClickExportJson = e => {\n      const props = this.diagram.getDiagramProps();\n      const controller = props.controller;\n      const json = controller.run(\"serializeModel\", props);\n      const jsonStr = JSON.stringify(json);\n      const url = \"data:text/plain,\".concat(encodeURIComponent(jsonStr));\n      downloadFile(url, \"example.json\");\n      this.setState({\n        showDialog: false\n      });\n    };\n\n    this.onClickSetTheme = themeKey => e => {\n      const props = this.diagram.getDiagramProps();\n      const controller = props.controller;\n      controller.run(\"setTheme\", _objectSpread({}, props, {\n        themeKey\n      }));\n    };\n\n    this.onClickSetLayout = layoutDir => e => {\n      const props = this.diagram.getDiagramProps();\n      const controller = props.controller;\n      controller.run(\"setLayoutDir\", _objectSpread({}, props, {\n        layoutDir\n      }));\n    };\n\n    this.onClickUndo = e => {\n      const props = this.diagram.getDiagramProps();\n      const controller = props.controller;\n      controller.run(\"undo\", props);\n    };\n\n    this.onClickRedo = e => {\n      const props = this.diagram.getDiagramProps();\n      const controller = props.controller;\n      controller.run(\"redo\", props);\n    };\n\n    this.onChange = model => {\n      this.setState({\n        model\n      });\n    };\n\n    this.state = {\n      userData: this.props.userData,\n      projectInfo: this.props.projectInfo,\n      change: false,\n      diagramVersion: 0,\n      openSuccessSnackBar: false,\n      oldState: null,\n      newState: null,\n      loading: true\n    }; // This was adam's idea\n\n    this.timeOutID = null;\n    this.initModel();\n  }\n\n  componentWillUnmount() {\n    if (this.timeOutID) {\n      clearTimeout(this.timeOutID);\n    }\n  }\n\n  initModel() {\n    const model = generateSimpleModel();\n    this.state = {\n      model\n    };\n    return model;\n  }\n\n  renderDiagram() {\n    return React.createElement(Diagram, {\n      ref: this.diagramRef,\n      model: this.state.model,\n      onChange: this.onChange,\n      plugins: plugins,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    });\n  }\n\n  renderToolbar() {\n    const props = this.diagram.getDiagramProps();\n    const controller = props.controller;\n    const canUndo = controller.run(\"canUndo\", props);\n    const canRedo = controller.run(\"canRedo\", props);\n    const toolbarProps = {\n      onClickExportJson: this.onClickExportJson,\n      onClickOpenFile: this.onClickOpenFile,\n      onClickChangeTheme: this.onClickSetTheme,\n      onClickSetLayout: this.onClickSetLayout,\n      onClickUndo: this.onClickUndo,\n      onClickRedo: this.onClickRedo,\n      canUndo,\n      canRedo\n    };\n    return React.createElement(Toolbar, Object.assign({}, toolbarProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }));\n  }\n\n  renderDialog() {}\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"mindmap\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, this.diagram && this.renderToolbar(), this.state.loading ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: LoadingGIF,\n      className: \"loading-content\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    })) : this.renderDiagram(), React.createElement(Snackbar, {\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'center'\n      },\n      open: this.state.openSuccessSnackBar,\n      autoHideDuration: 3000,\n      onClose: this.handleCloseSuccessSnackBar,\n      ContentProps: {\n        'aria-describedby': 'message-id'\n      },\n      variant: \"success\",\n      message: React.createElement(\"span\", {\n        id: \"message-id\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }, React.createElement(CheckCircleIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }), \" Saved Successfully!\"),\n      action: [React.createElement(IconButton, {\n        key: \"close\",\n        \"aria-label\": \"Close\",\n        color: \"red\",\n        onClick: this.handleCloseSuccessSnackBar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }, React.createElement(CloseIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }))],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }), React.createElement(Snackbar, {\n      id: \"success-snack\",\n      anchorOrigin: {\n        vertical: 'top',\n        horizontal: 'center'\n      },\n      open: this.state.openErrorSnackBar,\n      autoHideDuration: 6000,\n      onClose: this.handleCloseErrorSnackBar,\n      ContentProps: {\n        'aria-describedby': 'message-id'\n      },\n      message: React.createElement(\"span\", {\n        id: \"message-id\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      }, React.createElement(CheckCircleIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      }), \" Newer Changes Detetcted, Loading...\"),\n      action: [React.createElement(IconButton, {\n        key: \"close\",\n        \"aria-label\": \"Close\",\n        color: \"red\",\n        onClick: this.handleCloseErrorSnackBar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291\n        },\n        __self: this\n      }, React.createElement(CloseIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298\n        },\n        __self: this\n      }))],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/evan/Idea-Creator/MindOverMapper_Movim/MindOverMapper_Movim/ClientApp/src/components/main/components/projectview/mindmapper/component/MindMap.js"],"names":["React","axios","CloseIcon","Toolbar","CheckCircleIcon","IconButton","Diagram","RichTextEditorPlugin","JsonSerializerPlugin","ThemeSelectorPlugin","LoadingGIF","Snackbar","downloadFile","generateSimpleModel","plugins","MindMap","Component","constructor","props","diagramRef","ref","diagram","setState","handleOpenSuccessSnackBar","version","openSuccessSnackBar","diagramVersion","handleCloseSuccessSnackBar","handleOpenErrorSnackBar","openErrorSnackBar","handleCloseErrorSnackBar","componentDidMount","retrieveMindMap","projectInfo","uid","autoSave","id","setTimeout","state","model","oldState","saveMindMap","timeOutID","projectId","mindModelConfig","get","headers","Authorization","userData","token","then","res","loading","data","getDiagramProps","controller","obj","run","exportyboi","exportJson","method","url","JSON","stringify","response","catch","error","onClickOpenFile","e","input","document","createElement","type","accept","addEventListener","evt","file","target","files","fr","FileReader","onload","txt","result","parse","readAsText","click","json","onClickExportJson","jsonStr","encodeURIComponent","showDialog","onClickSetTheme","themeKey","onClickSetLayout","layoutDir","onClickUndo","onClickRedo","onChange","change","newState","initModel","componentWillUnmount","clearTimeout","renderDiagram","renderToolbar","canUndo","canRedo","toolbarProps","onClickChangeTheme","renderDialog","render","vertical","horizontal"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport axios from 'axios';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { Toolbar } from \"./Toolbar\";\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport IconButton from '@material-ui/core/IconButton';\nimport { Diagram } from \"@blink-mind/renderer-react\";\nimport RichTextEditorPlugin from \"@blink-mind/plugin-rich-text-editor\";\nimport { JsonSerializerPlugin } from \"@blink-mind/plugin-json-serializer\";\nimport { ThemeSelectorPlugin } from \"@blink-mind/plugin-theme-selector\";\nimport \"@blink-mind/renderer-react/lib/main.css\";\nimport './MindMap.css';\nimport LoadingGIF from '../../../../../../static/Loading3.gif';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { downloadFile, generateSimpleModel } from \"../utils\";\n\nconst plugins = [\n  RichTextEditorPlugin(),\n  JsonSerializerPlugin(),\n  ThemeSelectorPlugin()\n];\n\nexport default class MindMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userData: this.props.userData,\n      projectInfo: this.props.projectInfo,\n      change: false,\n      diagramVersion: 0,\n      openSuccessSnackBar: false,\n      oldState: null,\n      newState: null,\n      loading: true,\n    };\n    // This was adam's idea\n    this.timeOutID = null;\n    this.initModel();\n  }\n\n  diagram;\n  diagramRef = ref => {\n    this.diagram = ref;\n    this.setState({});\n  };\n\n  handleOpenSuccessSnackBar = (version) => {\n    this.setState({\n      openSuccessSnackBar: true,\n      diagramVersion: version\n    })\n  }\n  handleCloseSuccessSnackBar = () => {\n    this.setState({ openSuccessSnackBar: false })\n  }\n\n  handleOpenErrorSnackBar = () => {\n    this.setState({ openErrorSnackBar: true })\n  }\n  handleCloseErrorSnackBar = () => {\n    this.setState({ openErrorSnackBar: false })\n  }\n\n  componentDidMount = async () => {\n    await this.retrieveMindMap(this.props.projectInfo.uid);\n    this.autoSave(); // Enable auto save \n  };\n\n  componentWillUnmount() {\n    if(this.timeOutID)\n    {\n      clearTimeout(this.timeOutID);\n    }\n    \n}\n\n  autoSave = async () => {\n    let id = await setTimeout(async () => {\n      if(this.state.model === this.state.oldState){\n        this.autoSave();\n      } else {\n        await this.saveMindMap();\n        this.setState({\n          oldState: this.state.model,\n\n        });\n        this.autoSave();\n      }\n    }, 10000);\n    this.timeOutID = id;\n  }\n\n  retrieveMindMap = async (projectId) => {\n    let mindModelConfig = await axios.get(`/api/project/${projectId}/state`, {\n      headers: {\n        Authorization: 'Bearer ' + this.props.userData.token //the token is a variable which holds the token\n      }\n    }).then(res => { \n      this.setState({\n        loading: false\n      });\n    return res.data;\n    });\n    const props = this.diagram.getDiagramProps();\n    const { controller } = props;\n    let obj = mindModelConfig.state;\n    let model = controller.run(\"deserializeModel\", { controller, obj });    \n    this.setState({\n      model,\n      diagramVersion: mindModelConfig.version,\n    });\n  }\n\n  saveMindMap = async () => {\n    let exportyboi = this.exportJson();\n    axios({\n      method: 'put',\n      url: `/api/project/${this.props.projectInfo.uid}/state`,\n      headers: {\n                Authorization: 'Bearer ' + this.props.userData.token, //the token is a variable which holds the token\n                'Content-Type': 'application/json'\n              },\n      data: JSON.stringify({\n        \"state\" : exportyboi,\n        \"version\" : this.state.diagramVersion,\n      }) \n    }).then(response => { \n      // Saved successfully\n      this.handleOpenSuccessSnackBar(response.data.version)\n    })\n    .catch(error => {\n        // Save conflict\n        this.handleOpenErrorSnackBar()\n        this.retrieveMindMap(this.props.projectInfo.uid);\n      });\n  }\n\n  initModel() {\n    const model = generateSimpleModel();\n    this.state = { model };\n    return model;\n  }\n\n  onClickOpenFile = e => {\n    const input = document.createElement(\"input\");\n    const props = this.diagram.getDiagramProps();\n    const { controller } = props;\n    input.type = \"file\";\n    input.accept = \".json\";\n    input.addEventListener(\"change\", evt => {\n      const file = evt.target.files[0];\n      const fr = new FileReader();\n      fr.onload = evt => {\n        const txt = evt.target.result;\n        let obj = JSON.parse(txt);\n        let model = controller.run(\"deserializeModel\", { controller, obj });\n        this.setState({ model });\n      };\n      fr.readAsText(file);\n    });\n    input.click();\n  };\n\n  exportJson = e => {\n    const props = this.diagram.getDiagramProps();\n    const { controller } = props;\n    const json = controller.run(\"serializeModel\", props);\n    return json;\n  }\n\n  onClickExportJson = e => {\n    const props = this.diagram.getDiagramProps();\n    const { controller } = props;\n    const json = controller.run(\"serializeModel\", props);\n    const jsonStr = JSON.stringify(json);\n    const url = `data:text/plain,${encodeURIComponent(jsonStr)}`;\n    downloadFile(url, \"example.json\");\n    this.setState({ showDialog: false });\n  };\n\n  onClickSetTheme = themeKey => e => {\n    const props = this.diagram.getDiagramProps();\n    const { controller } = props;\n    controller.run(\"setTheme\", { ...props, themeKey });\n  };\n\n  onClickSetLayout = layoutDir => e => {\n    const props = this.diagram.getDiagramProps();\n    const { controller } = props;\n    controller.run(\"setLayoutDir\", { ...props, layoutDir });\n  };\n\n  onClickUndo = e => {\n    const props = this.diagram.getDiagramProps();\n    const { controller } = props;\n    controller.run(\"undo\", props);\n  };\n\n  onClickRedo = e => {\n    const props = this.diagram.getDiagramProps();\n    const { controller } = props;\n    controller.run(\"redo\", props);\n  };\n\n  renderDiagram() {\n    return (\n      <Diagram\n        ref={this.diagramRef}\n        model={this.state.model}\n        onChange={this.onChange}\n        plugins={plugins}\n      />\n    );\n  }\n\n  renderToolbar() {\n    const props = this.diagram.getDiagramProps();\n    const { controller } = props;\n    const canUndo = controller.run(\"canUndo\", props);\n    const canRedo = controller.run(\"canRedo\", props);\n    const toolbarProps = {\n      onClickExportJson: this.onClickExportJson,\n      onClickOpenFile: this.onClickOpenFile,\n      onClickChangeTheme: this.onClickSetTheme,\n      onClickSetLayout: this.onClickSetLayout,\n      onClickUndo: this.onClickUndo,\n      onClickRedo: this.onClickRedo,\n      canUndo,\n      canRedo\n    };\n    return <Toolbar {...toolbarProps} />;\n  }\n\n  renderDialog() {}\n\n  onChange = model => {\n    this.setState({\n      model\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"mindmap\">\n        {this.diagram && this.renderToolbar()}\n        {this.state.loading ? (\n          <div >\n            <img src={LoadingGIF} className='loading-content' />\n          </div>\n           ):( \n          this.renderDiagram())}\n        <Snackbar\n          anchorOrigin={{\n            vertical: 'top',\n            horizontal: 'center',\n          }}\n          open={this.state.openSuccessSnackBar}\n          autoHideDuration={3000}\n          onClose={this.handleCloseSuccessSnackBar}\n          ContentProps={{\n            'aria-describedby': 'message-id',\n          }}\n          variant=\"success\"\n          message={<span id=\"message-id\"><CheckCircleIcon /> Saved Successfully!</span>}\n          action={[\n            <IconButton\n              key=\"close\"\n              aria-label=\"Close\"\n              color=\"red\"\n\n              onClick={this.handleCloseSuccessSnackBar}\n            >\n              <CloseIcon />\n            </IconButton>,\n          ]}\n        />\n        <Snackbar\n          id='success-snack'\n          anchorOrigin={{\n            vertical: 'top',\n            horizontal: 'center',\n          }}\n          open={this.state.openErrorSnackBar}\n          autoHideDuration={6000}\n          onClose={this.handleCloseErrorSnackBar}\n          ContentProps={{\n            'aria-describedby': 'message-id',\n          }}\n          message={<span id=\"message-id\"><CheckCircleIcon /> Newer Changes Detetcted, Loading...</span>}\n          action={[\n            <IconButton\n              key=\"close\"\n              aria-label=\"Close\"\n              color=\"red\"\n\n              onClick={this.handleCloseErrorSnackBar}\n            >\n              <CloseIcon />\n            </IconButton>,\n          ]}\n        />\n      </div>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}