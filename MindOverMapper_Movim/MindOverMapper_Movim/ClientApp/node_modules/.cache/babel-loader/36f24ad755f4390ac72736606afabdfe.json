{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _options = require('./options');\n\nvar _options2 = _interopRequireDefault(_options);\n\nvar _utils = require('./utils');\n\nvar _changes = require('./changes');\n\nvar _validation = require('./validation');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n/**\n * The core of the plugin, which does not relies on `slate-react`, and includes\n * everything but behavior and rendering logic.\n */\n\n\nfunction core(optsParam) {\n  var opts = new _options2.default(optsParam);\n  return {\n    schema: (0, _validation.schema)(opts),\n    utils: {\n      isSelectionInBlockquote: _utils.isSelectionInBlockquote.bind(null, opts)\n    },\n    changes: {\n      wrapInBlockquote: _changes.wrapInBlockquote.bind(null, opts),\n      unwrapBlockquote: bindAndScopeChange(opts, _changes.unwrapBlockquote)\n    }\n  };\n}\n/**\n * Bind a change to given options, and scope it to act only inside a blockquote\n */\n\n\nfunction bindAndScopeChange(opts, fn) {\n  return function (change) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    var value = change.value;\n\n    if (!(0, _utils.isSelectionInBlockquote)(opts, value)) {\n      return change;\n    } // $FlowFixMe\n\n\n    return fn.apply(undefined, _toConsumableArray([opts, change].concat(args)));\n  };\n}\n\nexports.default = core;","map":{"version":3,"sources":["C:/Users/ayomi/Source/Repos/Idea-Creator/Idea-Creator/MindOverMapper_Movim/MindOverMapper_Movim/ClientApp/node_modules/@wikifactory/slate-edit-blockquote/dist/core.js"],"names":["Object","defineProperty","exports","value","_options","require","_options2","_interopRequireDefault","_utils","_changes","_validation","obj","__esModule","default","_toConsumableArray","arr","Array","isArray","i","arr2","length","from","core","optsParam","opts","schema","utils","isSelectionInBlockquote","bind","changes","wrapInBlockquote","unwrapBlockquote","bindAndScopeChange","fn","change","_len","arguments","args","_key","apply","undefined","concat"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _options = require('./options');\n\nvar _options2 = _interopRequireDefault(_options);\n\nvar _utils = require('./utils');\n\nvar _changes = require('./changes');\n\nvar _validation = require('./validation');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n/**\n * The core of the plugin, which does not relies on `slate-react`, and includes\n * everything but behavior and rendering logic.\n */\nfunction core(optsParam) {\n    var opts = new _options2.default(optsParam);\n\n    return {\n        schema: (0, _validation.schema)(opts),\n\n        utils: {\n            isSelectionInBlockquote: _utils.isSelectionInBlockquote.bind(null, opts)\n        },\n\n        changes: {\n            wrapInBlockquote: _changes.wrapInBlockquote.bind(null, opts),\n            unwrapBlockquote: bindAndScopeChange(opts, _changes.unwrapBlockquote)\n        }\n    };\n}\n\n/**\n * Bind a change to given options, and scope it to act only inside a blockquote\n */\nfunction bindAndScopeChange(opts, fn) {\n    return function (change) {\n        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = arguments[_key];\n        }\n\n        var value = change.value;\n\n\n        if (!(0, _utils.isSelectionInBlockquote)(opts, value)) {\n            return change;\n        }\n\n        // $FlowFixMe\n        return fn.apply(undefined, _toConsumableArray([opts, change].concat(args)));\n    };\n}\n\nexports.default = core;"]},"metadata":{},"sourceType":"script"}