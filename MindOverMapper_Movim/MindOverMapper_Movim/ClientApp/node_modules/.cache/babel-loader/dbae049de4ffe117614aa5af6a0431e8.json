{"ast":null,"code":"import { Model, Config, Topic, Block } from '@blink-mind/core';\nimport { List, Map } from 'immutable';\nimport debug from 'debug';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\n\nvar __assign = function () {\n  __assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar log = debug('plugin:json-serializer');\n\nfunction JsonSerializerPlugin() {\n  return {\n    serializeModel: function (props) {\n      var model = props.model,\n          controller = props.controller;\n      var obj = {\n        rootTopicKey: model.rootTopicKey,\n        topics: model.topics.valueSeq().toArray().map(function (topic) {\n          return controller.run('serializeTopic', __assign(__assign({}, props), {\n            topic: topic\n          }));\n        }),\n        config: controller.run('serializeConfig', __assign(__assign({}, props), {\n          config: model.config\n        }))\n      };\n      return obj;\n    },\n    deserializeModel: function (props) {\n      var obj = props.obj,\n          controller = props.controller;\n      var rootTopicKey = obj.rootTopicKey,\n          topics = obj.topics,\n          config = obj.config;\n      var model = new Model();\n      model = model.merge({\n        rootTopicKey: rootTopicKey,\n        editorRootTopicKey: rootTopicKey,\n        config: controller.run('deserializeConfig', __assign(__assign({}, props), {\n          obj: config\n        })),\n        topics: controller.run('deserializeTopics', __assign(__assign({}, props), {\n          obj: topics\n        }))\n      });\n      log('deserializeModel', model);\n      return model;\n    },\n    serializeConfig: function (props) {\n      var config = props.config;\n      return config.toJS();\n    },\n    deserializeConfig: function (props) {\n      var obj = props.obj;\n      return new Config(obj);\n    },\n    serializeTopic: function (props) {\n      var topic = props.topic,\n          controller = props.controller;\n      return {\n        key: topic.key,\n        parentKey: topic.parentKey,\n        subKeys: topic.subKeys.toArray(),\n        collapse: topic.collapse,\n        style: topic.style,\n        blocks: topic.blocks.map(function (block) {\n          return controller.run('serializeBlock', __assign(__assign({}, props), {\n            block: block\n          }));\n        })\n      };\n    },\n    deserializeTopic: function (props) {\n      var obj = props.obj,\n          controller = props.controller;\n      var key = obj.key,\n          parentKey = obj.parentKey,\n          subKeys = obj.subKeys,\n          blocks = obj.blocks,\n          style = obj.style,\n          collapse = obj.collapse;\n      var topic = new Topic();\n      topic = topic.merge({\n        key: key,\n        parentKey: parentKey,\n        subKeys: List(subKeys),\n        style: style,\n        collapse: collapse,\n        blocks: controller.run('deserializeBlocks', __assign(__assign({}, props), {\n          obj: blocks\n        }))\n      });\n      return topic;\n    },\n    deserializeTopics: function (props) {\n      var obj = props.obj,\n          controller = props.controller;\n      var topics = Map();\n      topics = topics.withMutations(function (topics) {\n        obj.forEach(function (topic) {\n          return topics.set(topic.key, controller.run('deserializeTopic', __assign(__assign({}, props), {\n            obj: topic\n          })));\n        });\n      });\n      return topics;\n    },\n    serializeBlock: function (props) {\n      var block = props.block;\n      return block.toJS();\n    },\n    deserializeBlock: function (props) {\n      var obj = props.obj;\n      return new Block(obj);\n    },\n    deserializeBlocks: function (props) {\n      var obj = props.obj,\n          controller = props.controller;\n      var blocks = List();\n      blocks = blocks.withMutations(function (blocks) {\n        obj.forEach(function (block) {\n          return blocks.push(controller.run('deserializeBlock', __assign(__assign({}, props), {\n            obj: block\n          })));\n        });\n      });\n      return blocks;\n    }\n  };\n}\n\nexport { JsonSerializerPlugin };","map":{"version":3,"sources":["../src/plguins/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { Block, Config, Model, Topic } from '@blink-mind/core';\nimport { List, Map } from 'immutable';\nimport debug from 'debug';\n\nconst log = debug('plugin:json-serializer');\n\nexport function JsonSerializerPlugin() {\n  return {\n    serializeModel(props) {\n      const { model, controller } = props;\n      const obj = {\n        rootTopicKey: model.rootTopicKey,\n        topics: model.topics\n          .valueSeq()\n          .toArray()\n          .map(topic => controller.run('serializeTopic', { ...props, topic })),\n        config: controller.run('serializeConfig', {\n          ...props,\n          config: model.config\n        })\n      };\n      return obj;\n    },\n\n    deserializeModel(props) {\n      const { obj, controller } = props;\n      const { rootTopicKey, topics, config } = obj;\n      let model = new Model();\n      model = model.merge({\n        rootTopicKey,\n        editorRootTopicKey: rootTopicKey,\n        config: controller.run('deserializeConfig', {\n          ...props,\n          obj: config\n        }),\n        topics: controller.run('deserializeTopics', {\n          ...props,\n          obj: topics\n        })\n      });\n      log('deserializeModel', model);\n      return model;\n    },\n\n    serializeConfig(props) {\n      const { config } = props;\n      return config.toJS();\n    },\n\n    deserializeConfig(props) {\n      const { obj } = props;\n      return new Config(obj);\n    },\n\n    serializeTopic(props) {\n      const { topic, controller } = props;\n      return {\n        key: topic.key,\n        parentKey: topic.parentKey,\n        subKeys: topic.subKeys.toArray(),\n        collapse: topic.collapse,\n        style: topic.style,\n        blocks: topic.blocks.map(block =>\n          controller.run('serializeBlock', { ...props, block })\n        )\n      };\n    },\n\n    deserializeTopic(props) {\n      const { obj, controller } = props;\n      const { key, parentKey, subKeys, blocks, style, collapse } = obj;\n      let topic = new Topic();\n      topic = topic.merge({\n        key,\n        parentKey,\n        subKeys: List(subKeys),\n        style,\n        collapse,\n        blocks: controller.run('deserializeBlocks', { ...props, obj: blocks })\n      });\n      return topic;\n    },\n\n    deserializeTopics(props) {\n      const { obj, controller } = props;\n      let topics = Map();\n      topics = topics.withMutations(topics => {\n        obj.forEach(topic =>\n          topics.set(\n            topic.key,\n            controller.run('deserializeTopic', { ...props, obj: topic })\n          )\n        );\n      });\n      return topics;\n    },\n\n    serializeBlock(props) {\n      const { block } = props;\n      return block.toJS();\n    },\n\n    deserializeBlock(props) {\n      const { obj } = props;\n      return new Block(obj);\n    },\n\n    deserializeBlocks(props) {\n      const { obj, controller } = props;\n      let blocks = List();\n      blocks = blocks.withMutations(blocks => {\n        obj.forEach(block =>\n          blocks.push(\n            controller.run('deserializeBlock', { ...props, obj: block })\n          )\n        );\n      });\n      return blocks;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"module"}