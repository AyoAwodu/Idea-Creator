{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.escapeMarkdownChars = escapeMarkdownChars;\n\nfunction escapeMarkdownChars(text) {\n  var result = text; // First replace all backslashes because we are adding backslashes in this function\n\n  result = result.replace(/([\\\\])/gi, \"\\\\$1\"); // Periods only happen in ordered lists\n\n  result = result.replace(/^(\\s*\\w+)\\./gi, \"$1\\\\.\"); // Hashtags shouldn't be escaped, but elsewhere should\n\n  result = result.replace(/(#\\s)/gi, \"\\\\$1\"); // Catch all escaping for certain characters\n  // TODO: situationally escape these characters so we don't overescape\n\n  return result.replace(/([`*{}\\[\\]()+\\-!|_>])/gi, \"\\\\$1\");\n}","map":{"version":3,"sources":["C:/Users/ayomi/source/repos/Idea-Creator/Idea-Creator/MindOverMapper_Movim/MindOverMapper_Movim/ClientApp/node_modules/slate-md-serializer/lib/utils.js"],"names":["Object","defineProperty","exports","value","escapeMarkdownChars","text","result","replace"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B;;AACA,SAASA,mBAAT,CAA6BC,IAA7B,EAAmC;AACjC,MAAIC,MAAM,GAAGD,IAAb,CADiC,CAGjC;;AACAC,EAAAA,MAAM,GAAGA,MAAM,CAACC,OAAP,CAAe,UAAf,EAA2B,MAA3B,CAAT,CAJiC,CAMjC;;AACAD,EAAAA,MAAM,GAAGA,MAAM,CAACC,OAAP,CAAe,eAAf,EAAgC,OAAhC,CAAT,CAPiC,CASjC;;AACAD,EAAAA,MAAM,GAAGA,MAAM,CAACC,OAAP,CAAe,SAAf,EAA0B,MAA1B,CAAT,CAViC,CAYjC;AACA;;AACA,SAAOD,MAAM,CAACC,OAAP,CAAe,yBAAf,EAA0C,MAA1C,CAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.escapeMarkdownChars = escapeMarkdownChars;\nfunction escapeMarkdownChars(text) {\n  var result = text;\n\n  // First replace all backslashes because we are adding backslashes in this function\n  result = result.replace(/([\\\\])/gi, \"\\\\$1\");\n\n  // Periods only happen in ordered lists\n  result = result.replace(/^(\\s*\\w+)\\./gi, \"$1\\\\.\");\n\n  // Hashtags shouldn't be escaped, but elsewhere should\n  result = result.replace(/(#\\s)/gi, \"\\\\$1\");\n\n  // Catch all escaping for certain characters\n  // TODO: situationally escape these characters so we don't overescape\n  return result.replace(/([`*{}\\[\\]()+\\-!|_>])/gi, \"\\\\$1\");\n}"]},"metadata":{},"sourceType":"script"}