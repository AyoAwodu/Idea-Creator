{"ast":null,"code":"/*\r\n * Copyright 2015 Palantir Technologies, Inc. All rights reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nimport * as tslib_1 from \"tslib\";\nimport * as React from \"react\";\nimport { isNodeEnv } from \"./utils\";\n/**\r\n * An abstract component that Blueprint components can extend\r\n * in order to add some common functionality like runtime props validation.\r\n * @deprecated componentWillReceiveProps is deprecated in React 16.9; use AbstractComponent2 instead\r\n */\n\nvar AbstractComponent =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(AbstractComponent, _super);\n\n  function AbstractComponent(props, context) {\n    var _this = _super.call(this, props, context) || this; // Not bothering to remove entries when their timeouts finish because clearing invalid ID is a no-op\n\n\n    _this.timeoutIds = [];\n    /**\r\n     * Clear all known timeouts.\r\n     */\n\n    _this.clearTimeouts = function () {\n      if (_this.timeoutIds.length > 0) {\n        for (var _i = 0, _a = _this.timeoutIds; _i < _a.length; _i++) {\n          var timeoutId = _a[_i];\n          window.clearTimeout(timeoutId);\n        }\n\n        _this.timeoutIds = [];\n      }\n    };\n\n    if (!isNodeEnv(\"production\")) {\n      _this.validateProps(_this.props);\n    }\n\n    return _this;\n  }\n\n  AbstractComponent.prototype.componentWillReceiveProps = function (nextProps) {\n    if (!isNodeEnv(\"production\")) {\n      this.validateProps(nextProps);\n    }\n  };\n\n  AbstractComponent.prototype.componentWillUnmount = function () {\n    this.clearTimeouts();\n  };\n  /**\r\n   * Set a timeout and remember its ID.\r\n   * All stored timeouts will be cleared when component unmounts.\r\n   * @returns a \"cancel\" function that will clear timeout when invoked.\r\n   */\n\n\n  AbstractComponent.prototype.setTimeout = function (callback, timeout) {\n    var handle = window.setTimeout(callback, timeout);\n    this.timeoutIds.push(handle);\n    return function () {\n      return window.clearTimeout(handle);\n    };\n  };\n  /**\r\n   * Ensures that the props specified for a component are valid.\r\n   * Implementations should check that props are valid and usually throw an Error if they are not.\r\n   * Implementations should not duplicate checks that the type system already guarantees.\r\n   *\r\n   * This method should be used instead of React's\r\n   * [propTypes](https://facebook.github.io/react/docs/reusable-components.html#prop-validation) feature.\r\n   * Like propTypes, these runtime checks run only in development mode.\r\n   */\n\n\n  AbstractComponent.prototype.validateProps = function (_) {// implement in subclass\n  };\n\n  return AbstractComponent;\n}(React.Component);\n\nexport { AbstractComponent };","map":null,"metadata":{},"sourceType":"module"}