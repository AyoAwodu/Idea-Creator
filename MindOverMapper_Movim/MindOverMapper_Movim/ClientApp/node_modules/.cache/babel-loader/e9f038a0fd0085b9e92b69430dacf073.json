{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slate = require('slate');\n\nvar _changes = require('../changes');\n\nvar _utils = require('../utils');\n\nfunction isEmptyListItem(editor, listItem) {\n  if (editor.isVoid(listItem) || listItem.text !== '') {\n    return false;\n  }\n\n  try {\n    var nodes = listItem.nodes.get(0).nodes;\n    if (nodes.size !== 1) return false;\n    var child = nodes.get(0);\n\n    if (!_slate.Text.isText(child)) {\n      return false;\n    }\n\n    return child.text === '';\n  } catch (e) {\n    return true;\n  }\n}\n/**\n * User pressed Enter in an editor\n *\n * Enter in a list item should split the list item\n * Enter in an empty list item should remove it\n * Shift+Enter in a list item should make a new line\n */\n\n\nfunction onEnter(event, change, next, opts) {\n  // Pressing Shift+Enter\n  // should split block normally\n  if (event.shiftKey) {\n    return next();\n  }\n\n  var value = change.value;\n  var currentItem = (0, _utils.getCurrentItem)(opts, value); // Not in a list\n\n  if (!currentItem) {\n    return next();\n  }\n\n  event.preventDefault(); // If expanded, delete first.\n\n  if (value.selection.isExpanded) {\n    change.delete();\n  }\n\n  if (isEmptyListItem(change, currentItem)) {\n    // Block is empty, we exit the list\n    if ((0, _utils.getItemDepth)(opts, value) > 1) {\n      return (0, _changes.decreaseItemDepth)(opts, change);\n    } // Exit list\n\n\n    return (0, _changes.unwrapList)(opts, change);\n  } // Split list item\n\n\n  return (0, _changes.splitListItem)(opts, change);\n}\n\nexports.default = onEnter;","map":{"version":3,"sources":["C:/Users/ayomi/source/repos/Idea-Creator/Idea-Creator/MindOverMapper_Movim/MindOverMapper_Movim/ClientApp/node_modules/@tommoor/slate-edit-list/dist/handlers/onEnter.js"],"names":["Object","defineProperty","exports","value","_slate","require","_changes","_utils","isEmptyListItem","editor","listItem","isVoid","text","nodes","get","size","child","Text","isText","e","onEnter","event","change","next","opts","shiftKey","currentItem","getCurrentItem","preventDefault","selection","isExpanded","delete","getItemDepth","decreaseItemDepth","unwrapList","splitListItem","default"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,EAAAA,KAAK,EAAE;AADkC,CAA7C;;AAIA,IAAIC,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,YAAD,CAAtB;;AAEA,IAAIE,MAAM,GAAGF,OAAO,CAAC,UAAD,CAApB;;AAEA,SAASG,eAAT,CAAyBC,MAAzB,EAAiCC,QAAjC,EAA2C;AACvC,MAAID,MAAM,CAACE,MAAP,CAAcD,QAAd,KAA2BA,QAAQ,CAACE,IAAT,KAAkB,EAAjD,EAAqD;AACjD,WAAO,KAAP;AACH;;AACD,MAAI;AACA,QAAIC,KAAK,GAAGH,QAAQ,CAACG,KAAT,CAAeC,GAAf,CAAmB,CAAnB,EAAsBD,KAAlC;AACA,QAAIA,KAAK,CAACE,IAAN,KAAe,CAAnB,EAAsB,OAAO,KAAP;AACtB,QAAIC,KAAK,GAAGH,KAAK,CAACC,GAAN,CAAU,CAAV,CAAZ;;AACA,QAAI,CAACV,MAAM,CAACa,IAAP,CAAYC,MAAZ,CAAmBF,KAAnB,CAAL,EAAgC;AAC5B,aAAO,KAAP;AACH;;AACD,WAAOA,KAAK,CAACJ,IAAN,KAAe,EAAtB;AACH,GARD,CAQE,OAAOO,CAAP,EAAU;AACR,WAAO,IAAP;AACH;AACJ;AACD;;;;;;;;;AAOA,SAASC,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgCC,IAAhC,EAAsCC,IAAtC,EAA4C;AACxC;AACA;AACA,MAAIH,KAAK,CAACI,QAAV,EAAoB;AAChB,WAAOF,IAAI,EAAX;AACH;;AAED,MAAIpB,KAAK,GAAGmB,MAAM,CAACnB,KAAnB;AAEA,MAAIuB,WAAW,GAAG,CAAC,GAAGnB,MAAM,CAACoB,cAAX,EAA2BH,IAA3B,EAAiCrB,KAAjC,CAAlB,CATwC,CAWxC;;AACA,MAAI,CAACuB,WAAL,EAAkB;AACd,WAAOH,IAAI,EAAX;AACH;;AAEDF,EAAAA,KAAK,CAACO,cAAN,GAhBwC,CAkBxC;;AACA,MAAIzB,KAAK,CAAC0B,SAAN,CAAgBC,UAApB,EAAgC;AAC5BR,IAAAA,MAAM,CAACS,MAAP;AACH;;AAED,MAAIvB,eAAe,CAACc,MAAD,EAASI,WAAT,CAAnB,EAA0C;AACtC;AACA,QAAI,CAAC,GAAGnB,MAAM,CAACyB,YAAX,EAAyBR,IAAzB,EAA+BrB,KAA/B,IAAwC,CAA5C,EAA+C;AAC3C,aAAO,CAAC,GAAGG,QAAQ,CAAC2B,iBAAb,EAAgCT,IAAhC,EAAsCF,MAAtC,CAAP;AACH,KAJqC,CAKtC;;;AACA,WAAO,CAAC,GAAGhB,QAAQ,CAAC4B,UAAb,EAAyBV,IAAzB,EAA+BF,MAA/B,CAAP;AACH,GA9BuC,CA+BxC;;;AACA,SAAO,CAAC,GAAGhB,QAAQ,CAAC6B,aAAb,EAA4BX,IAA5B,EAAkCF,MAAlC,CAAP;AACH;;AAEDpB,OAAO,CAACkC,OAAR,GAAkBhB,OAAlB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _slate = require('slate');\n\nvar _changes = require('../changes');\n\nvar _utils = require('../utils');\n\nfunction isEmptyListItem(editor, listItem) {\n    if (editor.isVoid(listItem) || listItem.text !== '') {\n        return false;\n    }\n    try {\n        var nodes = listItem.nodes.get(0).nodes;\n        if (nodes.size !== 1) return false;\n        var child = nodes.get(0);\n        if (!_slate.Text.isText(child)) {\n            return false;\n        }\n        return child.text === '';\n    } catch (e) {\n        return true;\n    }\n}\n/**\n * User pressed Enter in an editor\n *\n * Enter in a list item should split the list item\n * Enter in an empty list item should remove it\n * Shift+Enter in a list item should make a new line\n */\nfunction onEnter(event, change, next, opts) {\n    // Pressing Shift+Enter\n    // should split block normally\n    if (event.shiftKey) {\n        return next();\n    }\n\n    var value = change.value;\n\n    var currentItem = (0, _utils.getCurrentItem)(opts, value);\n\n    // Not in a list\n    if (!currentItem) {\n        return next();\n    }\n\n    event.preventDefault();\n\n    // If expanded, delete first.\n    if (value.selection.isExpanded) {\n        change.delete();\n    }\n\n    if (isEmptyListItem(change, currentItem)) {\n        // Block is empty, we exit the list\n        if ((0, _utils.getItemDepth)(opts, value) > 1) {\n            return (0, _changes.decreaseItemDepth)(opts, change);\n        }\n        // Exit list\n        return (0, _changes.unwrapList)(opts, change);\n    }\n    // Split list item\n    return (0, _changes.splitListItem)(opts, change);\n}\n\nexports.default = onEnter;"]},"metadata":{},"sourceType":"script"}