{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nrequire('slate');\n\nvar _endsWith = require('ends-with');\n\nvar _endsWith2 = _interopRequireDefault(_endsWith);\n\nvar _utils = require('../utils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * User pressed Delete in an editor:\n * Remove last idnentation before cursor\n */\n\n\nfunction onBackspace(opts, event, editor, next) {\n  var value = editor.value;\n\n  if (value.selection.isExpanded) {\n    return next();\n  }\n\n  var selection = value.selection,\n      startText = value.startText;\n  var currentLine = value.startBlock; // Detect and remove indentation at cursor\n\n  var indent = (0, _utils.getCurrentIndent)(opts, value);\n  var beforeSelection = currentLine.text.slice(0, selection.start.offset); // If the line before selection ending with the indentation?\n\n  if ((0, _endsWith2.default)(beforeSelection, indent)) {\n    // Remove indent\n    event.preventDefault();\n    return editor.deleteBackward(indent.length).focus();\n  } else if (opts.exitBlockType) {\n    // Otherwise check if we are in an empty code container...\n    var currentCode = (0, _utils.getCurrentCode)(opts, value);\n    var isStartOfCode = selection.start.offset === 0 && currentCode.getFirstText() === startText; // PERF: avoid checking for whole currentCode.text\n\n    var isEmpty = currentCode.nodes.size === 1 && currentLine.text.length === 0;\n\n    if (isStartOfCode && isEmpty) {\n      event.preventDefault(); // Convert it to default exit type\n\n      editor.withoutNormalizing(function () {\n        editor.setBlocks(opts.exitBlockType).unwrapNodeByKey(currentLine.key);\n      });\n      return editor;\n    }\n  }\n\n  return next();\n}\n\nexports.default = onBackspace;","map":{"version":3,"sources":["C:/Users/ayomi/Source/Repos/Idea-Creator/Idea-Creator/MindOverMapper_Movim/MindOverMapper_Movim/ClientApp/node_modules/@wikifactory/slate-edit-code/dist/handlers/onBackspace.js"],"names":["Object","defineProperty","exports","value","require","_endsWith","_endsWith2","_interopRequireDefault","_utils","obj","__esModule","default","onBackspace","opts","event","editor","next","selection","isExpanded","startText","currentLine","startBlock","indent","getCurrentIndent","beforeSelection","text","slice","start","offset","preventDefault","deleteBackward","length","focus","exitBlockType","currentCode","getCurrentCode","isStartOfCode","getFirstText","isEmpty","nodes","size","withoutNormalizing","setBlocks","unwrapNodeByKey","key"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AACzCC,EAAAA,KAAK,EAAE;AADkC,CAA7C;;AAIAC,OAAO,CAAC,OAAD,CAAP;;AAEA,IAAIC,SAAS,GAAGD,OAAO,CAAC,WAAD,CAAvB;;AAEA,IAAIE,UAAU,GAAGC,sBAAsB,CAACF,SAAD,CAAvC;;AAEA,IAAIG,MAAM,GAAGJ,OAAO,CAAC,UAAD,CAApB;;AAEA,SAASG,sBAAT,CAAgCE,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEE,IAAAA,OAAO,EAAEF;AAAX,GAArC;AAAwD;AAE/F;;;;;;AAIA,SAASG,WAAT,CAAqBC,IAArB,EAA2BC,KAA3B,EAAkCC,MAAlC,EAA0CC,IAA1C,EAAgD;AAC5C,MAAIb,KAAK,GAAGY,MAAM,CAACZ,KAAnB;;AAEA,MAAIA,KAAK,CAACc,SAAN,CAAgBC,UAApB,EAAgC;AAC5B,WAAOF,IAAI,EAAX;AACH;;AAED,MAAIC,SAAS,GAAGd,KAAK,CAACc,SAAtB;AAAA,MACIE,SAAS,GAAGhB,KAAK,CAACgB,SADtB;AAIA,MAAIC,WAAW,GAAGjB,KAAK,CAACkB,UAAxB,CAX4C,CAa5C;;AACA,MAAIC,MAAM,GAAG,CAAC,GAAGd,MAAM,CAACe,gBAAX,EAA6BV,IAA7B,EAAmCV,KAAnC,CAAb;AACA,MAAIqB,eAAe,GAAGJ,WAAW,CAACK,IAAZ,CAAiBC,KAAjB,CAAuB,CAAvB,EAA0BT,SAAS,CAACU,KAAV,CAAgBC,MAA1C,CAAtB,CAf4C,CAiB5C;;AACA,MAAI,CAAC,GAAGtB,UAAU,CAACK,OAAf,EAAwBa,eAAxB,EAAyCF,MAAzC,CAAJ,EAAsD;AAClD;AACAR,IAAAA,KAAK,CAACe,cAAN;AAEA,WAAOd,MAAM,CAACe,cAAP,CAAsBR,MAAM,CAACS,MAA7B,EAAqCC,KAArC,EAAP;AACH,GALD,MAKO,IAAInB,IAAI,CAACoB,aAAT,EAAwB;AAC3B;AACA,QAAIC,WAAW,GAAG,CAAC,GAAG1B,MAAM,CAAC2B,cAAX,EAA2BtB,IAA3B,EAAiCV,KAAjC,CAAlB;AACA,QAAIiC,aAAa,GAAGnB,SAAS,CAACU,KAAV,CAAgBC,MAAhB,KAA2B,CAA3B,IAAgCM,WAAW,CAACG,YAAZ,OAA+BlB,SAAnF,CAH2B,CAI3B;;AACA,QAAImB,OAAO,GAAGJ,WAAW,CAACK,KAAZ,CAAkBC,IAAlB,KAA2B,CAA3B,IAAgCpB,WAAW,CAACK,IAAZ,CAAiBM,MAAjB,KAA4B,CAA1E;;AAEA,QAAIK,aAAa,IAAIE,OAArB,EAA8B;AAC1BxB,MAAAA,KAAK,CAACe,cAAN,GAD0B,CAE1B;;AACAd,MAAAA,MAAM,CAAC0B,kBAAP,CAA0B,YAAY;AAClC1B,QAAAA,MAAM,CAAC2B,SAAP,CAAiB7B,IAAI,CAACoB,aAAtB,EAAqCU,eAArC,CAAqDvB,WAAW,CAACwB,GAAjE;AACH,OAFD;AAGA,aAAO7B,MAAP;AACH;AACJ;;AACD,SAAOC,IAAI,EAAX;AACH;;AAEDd,OAAO,CAACS,OAAR,GAAkBC,WAAlB","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nrequire('slate');\n\nvar _endsWith = require('ends-with');\n\nvar _endsWith2 = _interopRequireDefault(_endsWith);\n\nvar _utils = require('../utils');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * User pressed Delete in an editor:\n * Remove last idnentation before cursor\n */\nfunction onBackspace(opts, event, editor, next) {\n    var value = editor.value;\n\n    if (value.selection.isExpanded) {\n        return next();\n    }\n\n    var selection = value.selection,\n        startText = value.startText;\n\n\n    var currentLine = value.startBlock;\n\n    // Detect and remove indentation at cursor\n    var indent = (0, _utils.getCurrentIndent)(opts, value);\n    var beforeSelection = currentLine.text.slice(0, selection.start.offset);\n\n    // If the line before selection ending with the indentation?\n    if ((0, _endsWith2.default)(beforeSelection, indent)) {\n        // Remove indent\n        event.preventDefault();\n\n        return editor.deleteBackward(indent.length).focus();\n    } else if (opts.exitBlockType) {\n        // Otherwise check if we are in an empty code container...\n        var currentCode = (0, _utils.getCurrentCode)(opts, value);\n        var isStartOfCode = selection.start.offset === 0 && currentCode.getFirstText() === startText;\n        // PERF: avoid checking for whole currentCode.text\n        var isEmpty = currentCode.nodes.size === 1 && currentLine.text.length === 0;\n\n        if (isStartOfCode && isEmpty) {\n            event.preventDefault();\n            // Convert it to default exit type\n            editor.withoutNormalizing(function () {\n                editor.setBlocks(opts.exitBlockType).unwrapNodeByKey(currentLine.key);\n            });\n            return editor;\n        }\n    }\n    return next();\n}\n\nexports.default = onBackspace;"]},"metadata":{},"sourceType":"script"}