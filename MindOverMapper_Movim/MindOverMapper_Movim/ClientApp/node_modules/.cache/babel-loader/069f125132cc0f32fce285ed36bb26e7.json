{"ast":null,"code":"'use strict';\n\nvar GROUP_LEFT_TO_RIGHT, GROUP_RIGHT_TO_LEFT, EXPRESSION_LEFT_TO_RIGHT, EXPRESSION_RIGHT_TO_LEFT;\n/*\r\n * Character ranges of left-to-right characters.\r\n */\n\nGROUP_LEFT_TO_RIGHT = 'A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6' + '\\u00F8-\\u02B8\\u0300-\\u0590\\u0800-\\u1FFF\\u200E\\u2C00-\\uFB1C' + '\\uFE00-\\uFE6F\\uFEFD-\\uFFFF';\n/*\r\n * Character ranges of right-to-left characters.\r\n */\n\nGROUP_RIGHT_TO_LEFT = '\\u0591-\\u07FF\\uFB1D-\\uFDFD\\uFE70-\\uFEFC';\n/*\r\n * Expression to match a left-to-right string.\r\n *\r\n * Matches the start of a string, followed by zero or\r\n * more non-right-to-left characters, followed by a\r\n * left-to-right character.\r\n */\n\nEXPRESSION_LEFT_TO_RIGHT = new RegExp('^[^' + GROUP_RIGHT_TO_LEFT + ']*[' + GROUP_LEFT_TO_RIGHT + ']');\n/*\r\n * Expression to match a right-to-left string.\r\n *\r\n * Matches the start of a string, followed by zero or\r\n * more non-left-to-right characters, followed by a\r\n * right-to-left character.\r\n */\n\nEXPRESSION_RIGHT_TO_LEFT = new RegExp('^[^' + GROUP_LEFT_TO_RIGHT + ']*[' + GROUP_RIGHT_TO_LEFT + ']');\n/**\r\n * Detect the direction of text.\r\n *\r\n * @param {string} value - value to stringify and check.\r\n * @return {string} - One of `\"rtl\"`, `\"ltr\"`, or\r\n *   `\"neutral\"`.\r\n */\n\nfunction direction(value) {\n  value = value.toString();\n\n  if (EXPRESSION_RIGHT_TO_LEFT.test(value)) {\n    return 'rtl';\n  }\n\n  if (EXPRESSION_LEFT_TO_RIGHT.test(value)) {\n    return 'ltr';\n  }\n\n  return 'neutral';\n}\n/*\r\n * Expose `direction`.\r\n */\n\n\nmodule.exports = direction;","map":null,"metadata":{},"sourceType":"script"}