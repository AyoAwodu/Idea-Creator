{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { DISPLAYNAME_PREFIX, InputGroup, Overlay, Utils } from \"@blueprintjs/core\";\nimport { Classes } from \"../../common\";\nimport { QueryList } from \"../query-list/queryList\";\n\nvar Omnibar =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Omnibar, _super);\n\n  function Omnibar() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.TypedQueryList = QueryList.ofType();\n\n    _this.renderQueryList = function (listProps) {\n      var _a = _this.props,\n          _b = _a.inputProps,\n          inputProps = _b === void 0 ? {} : _b,\n          isOpen = _a.isOpen,\n          _c = _a.overlayProps,\n          overlayProps = _c === void 0 ? {} : _c;\n      var handleKeyDown = listProps.handleKeyDown,\n          handleKeyUp = listProps.handleKeyUp;\n      var handlers = isOpen ? {\n        onKeyDown: handleKeyDown,\n        onKeyUp: handleKeyUp\n      } : {};\n      return React.createElement(Overlay, tslib_1.__assign({\n        hasBackdrop: true\n      }, overlayProps, {\n        isOpen: isOpen,\n        className: classNames(Classes.OMNIBAR_OVERLAY, overlayProps.className),\n        onClose: _this.handleOverlayClose\n      }), React.createElement(\"div\", tslib_1.__assign({\n        className: classNames(Classes.OMNIBAR, listProps.className)\n      }, handlers), React.createElement(InputGroup, tslib_1.__assign({\n        autoFocus: true,\n        large: true,\n        leftIcon: \"search\",\n        placeholder: \"Search...\"\n      }, inputProps, {\n        onChange: listProps.handleQueryChange,\n        value: listProps.query\n      })), listProps.itemList));\n    };\n\n    _this.handleOverlayClose = function (event) {\n      Utils.safeInvokeMember(_this.props.overlayProps, \"onClose\", event);\n      Utils.safeInvoke(_this.props.onClose, event);\n    };\n\n    return _this;\n  }\n\n  Omnibar.ofType = function () {\n    return Omnibar;\n  };\n\n  Omnibar.prototype.render = function () {\n    // omit props specific to this component, spread the rest.\n    var _a = this.props,\n        _b = _a.initialContent,\n        initialContent = _b === void 0 ? null : _b,\n        isOpen = _a.isOpen,\n        inputProps = _a.inputProps,\n        overlayProps = _a.overlayProps,\n        restProps = tslib_1.__rest(_a, [\"initialContent\", \"isOpen\", \"inputProps\", \"overlayProps\"]);\n\n    return React.createElement(this.TypedQueryList, tslib_1.__assign({}, restProps, {\n      initialContent: initialContent,\n      renderer: this.renderQueryList\n    }));\n  };\n\n  Omnibar.displayName = DISPLAYNAME_PREFIX + \".Omnibar\";\n  return Omnibar;\n}(React.PureComponent);\n\nexport { Omnibar };","map":{"version":3,"sources":["../../../../src/components/omnibar/omnibar.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { DISPLAYNAME_PREFIX, InputGroup, Overlay, Utils, } from \"@blueprintjs/core\";\nimport { Classes } from \"../../common\";\nimport { QueryList } from \"../query-list/queryList\";\nvar Omnibar = /** @class */ (function (_super) {\n    tslib_1.__extends(Omnibar, _super);\n    function Omnibar() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.TypedQueryList = QueryList.ofType();\n        _this.renderQueryList = function (listProps) {\n            var _a = _this.props, _b = _a.inputProps, inputProps = _b === void 0 ? {} : _b, isOpen = _a.isOpen, _c = _a.overlayProps, overlayProps = _c === void 0 ? {} : _c;\n            var handleKeyDown = listProps.handleKeyDown, handleKeyUp = listProps.handleKeyUp;\n            var handlers = isOpen ? { onKeyDown: handleKeyDown, onKeyUp: handleKeyUp } : {};\n            return (React.createElement(Overlay, tslib_1.__assign({ hasBackdrop: true }, overlayProps, { isOpen: isOpen, className: classNames(Classes.OMNIBAR_OVERLAY, overlayProps.className), onClose: _this.handleOverlayClose }),\n                React.createElement(\"div\", tslib_1.__assign({ className: classNames(Classes.OMNIBAR, listProps.className) }, handlers),\n                    React.createElement(InputGroup, tslib_1.__assign({ autoFocus: true, large: true, leftIcon: \"search\", placeholder: \"Search...\" }, inputProps, { onChange: listProps.handleQueryChange, value: listProps.query })),\n                    listProps.itemList)));\n        };\n        _this.handleOverlayClose = function (event) {\n            Utils.safeInvokeMember(_this.props.overlayProps, \"onClose\", event);\n            Utils.safeInvoke(_this.props.onClose, event);\n        };\n        return _this;\n    }\n    Omnibar.ofType = function () {\n        return Omnibar;\n    };\n    Omnibar.prototype.render = function () {\n        // omit props specific to this component, spread the rest.\n        var _a = this.props, _b = _a.initialContent, initialContent = _b === void 0 ? null : _b, isOpen = _a.isOpen, inputProps = _a.inputProps, overlayProps = _a.overlayProps, restProps = tslib_1.__rest(_a, [\"initialContent\", \"isOpen\", \"inputProps\", \"overlayProps\"]);\n        return React.createElement(this.TypedQueryList, tslib_1.__assign({}, restProps, { initialContent: initialContent, renderer: this.renderQueryList }));\n    };\n    Omnibar.displayName = DISPLAYNAME_PREFIX + \".Omnibar\";\n    return Omnibar;\n}(React.PureComponent));\nexport { Omnibar };\n//# sourceMappingURL=omnibar.js.map"]},"metadata":{},"sourceType":"module"}