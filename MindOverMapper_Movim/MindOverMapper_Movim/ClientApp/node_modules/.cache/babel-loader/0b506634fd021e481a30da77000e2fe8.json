{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slate = require(\"slate\");\n\nvar commands = {\n  wrapLink: function wrapLink(editor, href) {\n    if (!editor.isLinkActive()) {\n      editor.wrapInline({\n        type: \"link\",\n        data: {\n          href: href\n        }\n      });\n    }\n  },\n  unwrapLink: function unwrapLink(editor) {\n    editor.unwrapInline(\"link\");\n  },\n  insertImageFile: function insertImageFile(editor, file) {\n    var _editor$props = editor.props,\n        uploadImage = _editor$props.uploadImage,\n        onImageUploadStart = _editor$props.onImageUploadStart,\n        onShowToast = _editor$props.onShowToast,\n        onImageUploadStop = _editor$props.onImageUploadStop;\n\n    if (!uploadImage) {\n      console.warn(\"uploadImage callback must be defined to handle image uploads.\");\n    }\n\n    if (onImageUploadStart) onImageUploadStart();\n\n    var key = _slate.KeyUtils.create();\n\n    var alt = \"\"; // load the file as a data URL\n\n    var placeholderSrc = URL.createObjectURL(file);\n\n    var node = _slate.Block.create({\n      key: key,\n      type: \"image\",\n      isVoid: true,\n      data: {\n        src: placeholderSrc,\n        alt: alt,\n        loading: true\n      }\n    });\n\n    editor.insertBlock(node).insertBlock(\"paragraph\").onChange(editor); // withoutSaving prevents this op from being added to the history, so you can't\n    // undo back to showing the upload placeholder. 'onChange' addition is a hack\n    // to get around a bug in slate-drop-or-paste-images\n\n    editor.withoutSaving(function (editor) {\n      // now we have a placeholder, start the image upload. This could be very fast\n      // or take multiple seconds. The user may further edit the content during this time.\n      uploadImage(file).then(function (src) {\n        if (!src) {\n          throw new Error(\"No image url returned from uploadImage callback\");\n        } // replace the placeholder with the final image if we can. The user may have\n        // removed it during upload so we need to take that into account.\n\n\n        try {\n          editor.setNodeByKey(key, {\n            data: {\n              src: src,\n              alt: alt,\n              loading: false\n            }\n          });\n        } catch (err) {\n          console.warn(\"Image placeholder could not be found\", err);\n        }\n      }).catch(function (err) {\n        // if there was an error during upload, remove the placeholder image\n        editor.removeNodeByKey(key);\n\n        if (onShowToast) {\n          onShowToast(\"Sorry, an error occurred uploading the image\");\n        }\n\n        throw err;\n      }).finally(function () {\n        if (onImageUploadStop) onImageUploadStop();\n      });\n    });\n  }\n};\nexports.default = commands;","map":{"version":3,"sources":["C:/Users/ayomi/source/repos/Idea-Creator/Idea-Creator/MindOverMapper_Movim/MindOverMapper_Movim/ClientApp/node_modules/awehook-rich-markdown-editor/lib/commands.js"],"names":["Object","defineProperty","exports","value","_slate","require","commands","wrapLink","editor","href","isLinkActive","wrapInline","type","data","unwrapLink","unwrapInline","insertImageFile","file","_editor$props","props","uploadImage","onImageUploadStart","onShowToast","onImageUploadStop","console","warn","key","KeyUtils","create","alt","placeholderSrc","URL","createObjectURL","node","Block","isVoid","src","loading","insertBlock","onChange","withoutSaving","then","Error","setNodeByKey","err","catch","removeNodeByKey","finally","default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slate = require(\"slate\");\n\nvar commands = {\n  wrapLink: function wrapLink(editor, href) {\n    if (!editor.isLinkActive()) {\n      editor.wrapInline({ type: \"link\", data: { href: href } });\n    }\n  },\n  unwrapLink: function unwrapLink(editor) {\n    editor.unwrapInline(\"link\");\n  },\n  insertImageFile: function insertImageFile(editor, file) {\n    var _editor$props = editor.props,\n        uploadImage = _editor$props.uploadImage,\n        onImageUploadStart = _editor$props.onImageUploadStart,\n        onShowToast = _editor$props.onShowToast,\n        onImageUploadStop = _editor$props.onImageUploadStop;\n\n\n    if (!uploadImage) {\n      console.warn(\"uploadImage callback must be defined to handle image uploads.\");\n    }\n\n    if (onImageUploadStart) onImageUploadStart();\n\n    var key = _slate.KeyUtils.create();\n    var alt = \"\";\n\n    // load the file as a data URL\n    var placeholderSrc = URL.createObjectURL(file);\n    var node = _slate.Block.create({\n      key: key,\n      type: \"image\",\n      isVoid: true,\n      data: { src: placeholderSrc, alt: alt, loading: true }\n    });\n\n    editor.insertBlock(node).insertBlock(\"paragraph\").onChange(editor);\n\n    // withoutSaving prevents this op from being added to the history, so you can't\n    // undo back to showing the upload placeholder. 'onChange' addition is a hack\n    // to get around a bug in slate-drop-or-paste-images\n    editor.withoutSaving(function (editor) {\n      // now we have a placeholder, start the image upload. This could be very fast\n      // or take multiple seconds. The user may further edit the content during this time.\n      uploadImage(file).then(function (src) {\n        if (!src) {\n          throw new Error(\"No image url returned from uploadImage callback\");\n        }\n\n        // replace the placeholder with the final image if we can. The user may have\n        // removed it during upload so we need to take that into account.\n        try {\n          editor.setNodeByKey(key, {\n            data: { src: src, alt: alt, loading: false }\n          });\n        } catch (err) {\n          console.warn(\"Image placeholder could not be found\", err);\n        }\n      }).catch(function (err) {\n        // if there was an error during upload, remove the placeholder image\n        editor.removeNodeByKey(key);\n\n        if (onShowToast) {\n          onShowToast(\"Sorry, an error occurred uploading the image\");\n        }\n        throw err;\n      }).finally(function () {\n        if (onImageUploadStop) onImageUploadStop();\n      });\n    });\n  }\n};\nexports.default = commands;"]},"metadata":{},"sourceType":"script"}