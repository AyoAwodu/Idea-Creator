{"ast":null,"code":"/**\r\n * @module domHelpers\r\n *\r\n */\nimport ReactDOM from 'react-dom';\nvar focusableSelector = 'a[href], button, input, object, select, textarea, [tabindex]';\n/**\r\n * bindFocusables: Find any focusable child elements of the component instance and\r\n * add an onFocus handler to focus our keydown handlers on the parent component\r\n * when user keys applies focus to the element.\r\n *\r\n * NOTE: One limitation of this right now is that if you tab out of the\r\n * component, _focusedInstance will still be set until next click or mount or\r\n * controlled focus.\r\n *\r\n * @access public\r\n * @param {object} instance The key-bound component instance\r\n * @param {callback} activateOnFocus The fn to fire when element is focused\r\n */\n\nfunction bindFocusables(instance, activateOnFocus) {\n  if (document.querySelectorAll) {\n    try {\n      var node = ReactDOM.findDOMNode(instance);\n\n      if (node) {\n        var focusables = node.querySelectorAll(focusableSelector);\n\n        if (focusables.length) {\n          var onFocus = function onFocus(element) {\n            var onFocusPrev = element.onfocus;\n            return function (event) {\n              activateOnFocus(instance);\n              if (onFocusPrev) onFocusPrev.call(element, event);\n            };\n          };\n\n          Array.prototype.slice.call(focusables).forEach(function (element) {\n            return element.onfocus = onFocus(element);\n          });\n        }\n      }\n    } catch (error) {// noop, mostly suppressing error here https://github.com/glortho/react-keydown/issues/76\n    }\n  }\n}\n/**\r\n * findContainerNodes: Called by our click handler to find instances with nodes\r\n * that are equal to or that contain the click target. Any that pass this test\r\n * will be recipients of the next keydown event.\r\n *\r\n * @access public\r\n * @param {object} target The click event.target DOM element\r\n * @return {function} Reducer function\r\n */\n\n\nfunction findContainerNodes(target) {\n  return function (memo, instance) {\n    try {\n      var node = ReactDOM.findDOMNode(instance);\n\n      if (node && (node === target || node.contains(target))) {\n        memo.push({\n          instance: instance,\n          node: node\n        });\n      }\n    } finally {\n      return memo;\n    }\n  };\n}\n/**\r\n * sortByDOMPosition: Called by our click handler to sort a list of instances\r\n * according to least -> most nested. This is so that if multiple keybound\r\n * instances have nodes that are ancestors of the click target, they will be\r\n * sorted to let the instance closest to the click target get first dibs on the\r\n * next key down event.\r\n */\n\n\nfunction sortByDOMPosition(a, b) {\n  return a.node.compareDocumentPosition(b.node) === 10 ? 1 : -1;\n}\n\nexport default {\n  bindFocusables: bindFocusables,\n  findContainerNodes: findContainerNodes,\n  sortByDOMPosition: sortByDOMPosition\n};","map":null,"metadata":{},"sourceType":"module"}