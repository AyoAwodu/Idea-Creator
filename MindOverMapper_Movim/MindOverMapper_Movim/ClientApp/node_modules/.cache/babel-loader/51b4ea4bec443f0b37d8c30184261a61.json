{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _urls = require(\"./urls\");\n\nvar _hashtagRegex = require(\"hashtag-regex\");\n\nvar _hashtagRegex2 = _interopRequireDefault(_hashtagRegex);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n * Ported from:\n *   https://github.com/chjj/marked/blob/49b7eaca/lib/marked.js\n * TODO:\n *   Use ES6 classes\n *   Add flow annotations\n */\n// we need to convert the regex supplied by the dependency to have the\n// entire hashtag contents within a capture group and begin with newline\n\n\nvar hashtag = new RegExp((0, _hashtagRegex2.default)().source.replace(/^/, \"^(\").replace(/$/, \")\"));\nvar EMPTY_PARAGRAPH_NODES = [{\n  object: \"text\",\n  leaves: [{\n    object: \"leaf\",\n    text: \"\",\n    marks: []\n  }]\n}];\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar assign = Object.assign || function (obj) {\n  var i = 1;\n\n  for (; i < arguments.length; i++) {\n    var target = arguments[i];\n\n    for (var key in target) {\n      if (hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n\n  return obj;\n};\n\nvar flatten = function flatten(ary) {\n  return [].concat.apply([], ary);\n};\n\nvar noop = function noop() {};\n\nnoop.exec = noop;\nvar defaults = {\n  gfm: true,\n  tables: true,\n  breaks: false,\n  pedantic: false,\n  smartLists: true,\n  silent: false,\n  renderer: new Renderer()\n};\n/**\n * Block-Level Grammar\n */\n\nvar block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: noop,\n  hr: /^( *[-*_]){3,} *(?:\\n|$)/,\n  heading: /^ *(#{1,6}) *([^\\n]+?)? *#* *(?:\\n|$)/,\n  nptable: noop,\n  blockquote: /^( *>[^\\n]+(\\n(?!def)[^\\n])*(?:\\n|$))+/,\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n(?! )(?!\\1bull )\\n|\\s*$)/,\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +[\"(]([^\\n]+)[\")])? *(?:\\n|$)/,\n  paragraph: /^((?:[^\\n]+(?!hr|heading|blockquote|def))+)(?:\\n|$)/,\n  text: /^[^\\n]+/\n};\nblock.bullet = /(?:[*+-]|\\d+\\.|\\[[x\\s]\\])/;\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;\nblock.item = replace(block.item, \"gm\")(/bull/g, block.bullet)();\nblock.list = replace(block.list)(/bull/g, block.bullet)(\"hr\", \"\\\\n+(?=\\\\1?(?:[-*_] *){3,}(?:\\\\n+|$))\")(\"def\", \"\\\\n+(?=\" + block.def.source + \")\")();\nblock.blockquote = replace(block.blockquote)(\"def\", block.def)();\nblock.paragraph = replace(block.paragraph)(\"hr\", block.hr)(\"heading\", block.heading)(\"blockquote\", block.blockquote)(\"def\", block.def)();\n/**\n * Normal Block Grammar\n */\n\nblock.normal = assign({}, block);\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = assign({}, block.normal, {\n  fences: /^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n|$)/,\n  paragraph: /^/,\n  heading: /^ *(#{1,6}) +([^\\n]+?)? *#* *(?:\\n{1,2}|$)/\n});\nblock.gfm.paragraph = replace(block.paragraph)(\"(?!\", \"(?!\" + block.gfm.fences.source.replace(\"\\\\1\", \"\\\\2\") + \"|\" + block.list.source.replace(\"\\\\1\", \"\\\\3\") + \"|\")();\n/**\n * GFM + Tables Block Grammar\n */\n\nblock.tables = assign({}, block.gfm, {\n  nptable: /^ *(\\S.*\\|.*)\\n *([-:]+ *\\|[-| :]*)\\n((?:.*\\|.*(?:\\n|$))*)/,\n  table: /^ *\\|(.+)\\n *\\|( *[-:]+[-| :]*)\\n((?: *\\|.*(?:\\n|$))*)/\n});\n/**\n * Block Lexer\n */\n\nfunction Lexer(options) {\n  this.tokens = [];\n  this.tokens.links = {};\n  this.options = assign({}, options || defaults);\n  this.rules = block.normal;\n\n  if (this.options.gfm) {\n    if (this.options.tables) {\n      this.rules = block.tables;\n    } else {\n      this.rules = block.gfm;\n    }\n  }\n}\n/**\n * Expose Block Rules\n */\n\n\nLexer.rules = block;\n/**\n * Static Lex Method\n */\n\nLexer.parse = function (src, options) {\n  var lexer = new Lexer(options);\n  return lexer.parse(src);\n};\n/**\n * Preprocessing\n */\n\n\nLexer.prototype.parse = function (src) {\n  src = src.replace(/\\r\\n|\\r/g, \"\\n\").replace(/\\t/g, \"    \").replace(/\\u00a0/g, \" \").replace(/\\u2424/g, \"\\n\");\n  return this.token(src, true);\n};\n/**\n * Lexing\n */\n\n\nLexer.prototype.token = function (src, top, bq) {\n  var next;\n  var loose;\n  var cap;\n  var bull;\n  var b;\n  var item;\n  var space;\n  var i;\n  var l;\n  src = src.replace(/^ +$/gm, \"\");\n  src = src.replace(/^\\n/, \"\");\n\n  while (src) {\n    // newline\n    if (cap = this.rules.newline.exec(src)) {\n      src = src.substring(cap[0].length);\n      var newlines = cap[0].length;\n\n      if (top) {\n        for (var _i = 0; _i < newlines; _i++) {\n          this.tokens.push({\n            type: \"paragraph\",\n            text: \"\"\n          });\n        }\n      }\n    } // code\n\n\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      cap = cap[0].replace(/^ {4}/gm, \"\");\n      this.tokens.push({\n        type: \"code\",\n        text: !this.options.pedantic ? cap.replace(/\\n+$/, \"\") : cap\n      });\n      continue;\n    } // fences (gfm)\n\n\n    if (cap = this.rules.fences.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: \"code\",\n        lang: cap[2],\n        text: cap[3]\n      });\n      continue;\n    } // heading\n\n\n    if (cap = this.rules.heading.exec(src)) {\n      src = src.substring(cap[0].length);\n      var last = this.tokens[this.tokens.length - 1];\n\n      if (last && last.type === \"paragraph\" && last.text === \"\") {\n        this.tokens.splice(-1, 1);\n      }\n\n      this.tokens.push({\n        type: \"heading\",\n        depth: cap[1].length,\n        text: cap[2]\n      });\n      continue;\n    } // table no leading pipe (gfm)\n\n\n    if (top && (cap = this.rules.nptable.exec(src))) {\n      src = src.substring(cap[0].length);\n      item = {\n        type: \"table\",\n        header: splitCells(cap[1].replace(/^ *| *\\| *$/g, \"\")),\n        align: cap[2].replace(/^ *|\\| *$/g, \"\").split(/ *\\| */),\n        cells: cap[3].replace(/\\n$/, \"\").split(\"\\n\")\n      };\n\n      for (i = 0; i < item.align.length; i++) {\n        if (/^ *-+: *$/.test(item.align[i])) {\n          item.align[i] = \"right\";\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\n          item.align[i] = \"center\";\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\n          item.align[i] = \"left\";\n        } else {\n          item.align[i] = null;\n        }\n      }\n\n      for (i = 0; i < item.cells.length; i++) {\n        item.cells[i] = splitCells(item.cells[i]);\n      }\n\n      this.tokens.push(item);\n      continue;\n    } // hr\n\n\n    if (cap = this.rules.hr.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: \"hr\"\n      });\n      continue;\n    } // blockquote\n\n\n    if (cap = this.rules.blockquote.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: \"blockquote_start\"\n      });\n      cap = cap[0].replace(/^ *> ?/gm, \"\"); // Pass `top` to keep the current\n      // \"toplevel\" state. This is exactly\n      // how markdown.pl works.\n\n      this.token(cap, top, true);\n      this.tokens.push({\n        type: \"blockquote_end\"\n      });\n      continue;\n    } // list\n\n\n    if (cap = this.rules.list.exec(src)) {\n      src = src.substring(cap[0].length);\n      bull = cap[2];\n      var ordered = bull.length > 1;\n      var todo = bull[0] === \"[\";\n      this.tokens.push({\n        type: \"list_start\",\n        style: todo ? \"todo\" : ordered ? \"ordered\" : \"bulleted\"\n      }); // Get each top-level item.\n\n      cap = cap[0].match(this.rules.item);\n      next = false;\n      l = cap.length;\n      i = 0;\n\n      for (; i < l; i++) {\n        item = cap[i]; // Remove the list item's bullet\n        // so it is seen as the next token.\n\n        var checked = todo ? !!item.match(/^ *(\\[x\\])/) : undefined;\n        space = item.length;\n        item = item.replace(/^ *([*+-]|\\d+\\.|\\[[x\\s]\\]) +/, \"\"); // Outdent whatever the\n        // list item contains. Hacky.\n\n        if (~item.indexOf(\"\\n \")) {\n          space -= item.length;\n          item = !this.options.pedantic ? item.replace(new RegExp(\"^ {1,\" + space + \"}\", \"gm\"), \"\") : item.replace(/^ {1,4}/gm, \"\");\n        } // Determine whether the next list item belongs here.\n        // Backpedal if it does not belong in this list.\n\n\n        if (this.options.smartLists && i !== l - 1) {\n          b = block.bullet.exec(cap[i + 1])[0];\n\n          if (bull !== b && !(bull.length > 1 && b.length > 1)) {\n            src = cap.slice(i + 1).join(\"\\n\") + src;\n            i = l - 1;\n          }\n        } // Determine whether item is loose or not.\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n        // for discount behavior.\n\n\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);\n\n        if (i !== l - 1) {\n          next = item.charAt(item.length - 1) === \"\\n\";\n\n          if (!loose) {\n            loose = next;\n          }\n        }\n\n        this.tokens.push({\n          checked: checked,\n          type: loose ? \"loose_item_start\" : \"list_item_start\"\n        }); // Recurse.\n\n        this.token(item, false, bq);\n        this.tokens.push({\n          type: \"list_item_end\"\n        });\n      }\n\n      this.tokens.push({\n        type: \"list_end\"\n      });\n      continue;\n    } // def\n\n\n    if (!bq && top && (cap = this.rules.def.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.links[cap[1].toLowerCase()] = {\n        href: cap[2],\n        title: cap[3]\n      };\n      continue;\n    } // table (gfm)\n\n\n    if (top && (cap = this.rules.table.exec(src))) {\n      src = src.substring(cap[0].length);\n      item = {\n        type: \"table\",\n        header: splitCells(cap[1].replace(/^ *| *\\| *$/g, \"\")),\n        align: cap[2].replace(/^ *|\\| *$/g, \"\").split(/ *\\| */),\n        cells: cap[3].replace(/(?: *\\| *)?\\n$/, \"\").split(\"\\n\")\n      };\n\n      for (i = 0; i < item.align.length; i++) {\n        if (/^ *-+: *$/.test(item.align[i])) {\n          item.align[i] = \"right\";\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\n          item.align[i] = \"center\";\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\n          item.align[i] = \"left\";\n        } else {\n          item.align[i] = null;\n        }\n      }\n\n      for (i = 0; i < item.cells.length; i++) {\n        item.cells[i] = splitCells(item.cells[i].replace(/^ *\\| *| *\\| *$/g, \"\"));\n      }\n\n      this.tokens.push(item);\n      continue;\n    } // top-level paragraph\n\n\n    if (top && (cap = this.rules.paragraph.exec(src))) {\n      src = src.substring(cap[0].length);\n      var endsWithNewline = cap[1].charAt(cap[1].length - 1) === \"\\n\";\n      this.tokens.push({\n        type: \"paragraph\",\n        text: endsWithNewline ? cap[1].slice(0, -1) : cap[1]\n      });\n\n      if (endsWithNewline) {\n        this.tokens.push({\n          type: \"paragraph\",\n          text: \"\"\n        });\n      }\n\n      continue;\n    } // text\n\n\n    if (cap = this.rules.text.exec(src)) {\n      // Top-level should never reach here.\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: \"text\",\n        text: cap[0]\n      });\n      continue;\n    }\n\n    if (src) {\n      throw new Error(\"Infinite loop on byte: \" + src.charCodeAt(0));\n    }\n  }\n\n  return this.tokens;\n};\n/**\n * Inline-Level Grammar\n */\n\n\nvar inline = {\n  escape: /^\\\\([\\\\`*{}\\[\\]()#+\\-.!_>])/,\n  link: /^!?\\[(inside)\\]\\(href\\)/,\n  hashtag: hashtag,\n  reflink: /^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/,\n  nolink: /^!?\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]/,\n  strong: /^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/,\n  underlined: /^__([\\s\\S]+?)__(?!_)/,\n  em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n  code: /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n  br: /^ {2,}\\n(?!\\s*$)/,\n  del: noop,\n  ins: noop,\n  text: /^[\\s\\S]+?(?=[\\\\<!\\[_*#`]| {2,}\\n|$)/\n};\ninline._inside = /(?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*/;\ninline._href = /\\s*<?([\\s\\S]*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*/;\ninline.link = replace(inline.link)(\"inside\", inline._inside)(\"href\", inline._href)();\ninline.reflink = replace(inline.reflink)(\"inside\", inline._inside)();\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = assign({}, inline);\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = assign({}, inline.normal, {\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/\n});\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = assign({}, inline.normal, {\n  escape: replace(inline.escape)(\"])\", \"~|])\")(),\n  del: /^~~(?=\\S)([\\s\\S]*?\\S)~~/,\n  ins: /^\\+\\+(?=\\S)([\\s\\S]*?\\S)\\+\\+/,\n  text: replace(inline.text)(\"]|\", \"~+]|\")()\n});\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = assign({}, inline.gfm, {\n  br: replace(inline.br)(\"{2,}\", \"*\")(),\n  text: replace(inline.gfm.text)(\"{2,}\", \"*\")()\n});\n/**\n * Inline Lexer & Compiler\n */\n\nfunction InlineLexer(links, options) {\n  this.options = assign({}, options || defaults);\n  this.links = links;\n  this.rules = inline.normal;\n  this.renderer = this.options.renderer || new Renderer();\n  this.renderer.options = this.options;\n\n  if (!this.links) {\n    throw new Error(\"Tokens array requires a `links` property.\");\n  }\n\n  if (this.options.gfm) {\n    if (this.options.breaks) {\n      this.rules = inline.breaks;\n    } else {\n      this.rules = inline.gfm;\n    }\n  } else if (this.options.pedantic) {\n    this.rules = inline.pedantic;\n  }\n}\n/**\n * Expose Inline Rules\n */\n\n\nInlineLexer.rules = inline;\n/**\n * Static Lexing/Compiling Method\n */\n\nInlineLexer.parse = function (src, links, options) {\n  var inline = new InlineLexer(links, options);\n  return inline.parse(src);\n};\n/**\n * Lexing/Compiling\n */\n\n\nInlineLexer.prototype.parse = function (src) {\n  var out = [];\n  var link;\n  var cap;\n\n  while (src) {\n    // escape\n    if (cap = this.rules.escape.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.push({\n        object: \"text\",\n        leaves: [{\n          text: cap[1]\n        }]\n      });\n      continue;\n    } // link\n\n\n    if (cap = this.rules.link.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.push(this.outputLink(cap, {\n        href: cap[2],\n        title: cap[3]\n      }));\n      continue;\n    } // hashtag\n\n\n    if (cap = this.rules.hashtag.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.push(this.renderer.hashtag(this.parse(\"\\\\\" + cap[1])));\n      continue;\n    } // reflink, nolink\n    // TODO\n\n\n    if ((cap = this.rules.reflink.exec(src)) || (cap = this.rules.nolink.exec(src))) {\n      src = src.substring(cap[0].length);\n      link = (cap[2] || cap[1]).replace(/\\s+/g, \" \");\n      link = this.links[link.toLowerCase()];\n\n      if (!link || !link.href) {\n        out.push({\n          object: \"text\",\n          leaves: [{\n            text: cap[0].charAt(0)\n          }]\n        });\n        src = cap[0].substring(1) + src;\n        continue;\n      }\n\n      out.push(this.outputLink(cap, link));\n      continue;\n    } // underlined\n\n\n    if (cap = this.rules.underlined.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.push(this.renderer.underlined(this.parse(cap[2] || cap[1])));\n      continue;\n    } // strong\n\n\n    if (cap = this.rules.strong.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.push(this.renderer.strong(this.parse(cap[2] || cap[1])));\n      continue;\n    } // em\n\n\n    if (cap = this.rules.em.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.push(this.renderer.em(this.parse(cap[2] || cap[1])));\n      continue;\n    } // code\n\n\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.push(this.renderer.codespan(cap[2]));\n      continue;\n    } // br\n\n\n    if (cap = this.rules.br.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.push(this.renderer.br());\n      continue;\n    } // del (gfm)\n\n\n    if (cap = this.rules.del.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.push(this.renderer.del(this.parse(cap[1])));\n      continue;\n    } // ins (gfm extended)\n\n\n    if (cap = this.rules.ins.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.push(this.renderer.ins(this.parse(cap[1])));\n      continue;\n    } // text\n\n\n    if (cap = this.rules.text.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.push(this.renderer.text(cap[0]));\n      continue;\n    }\n\n    if (src) {\n      throw new Error(\"Infinite loop on byte: \" + src.charCodeAt(0));\n    }\n  }\n\n  return out;\n};\n/**\n * Compile Link\n */\n\n\nInlineLexer.prototype.outputLink = function (cap, link) {\n  var href = link.href;\n  var title = link.title;\n  return cap[0].charAt(0) !== \"!\" ? this.renderer.link(href, title, this.parse(cap[1])) : this.renderer.image(href, title, cap[1]);\n};\n/**\n * Renderer\n */\n\n\nfunction Renderer(options) {\n  this.options = options || {};\n}\n\nRenderer.prototype.groupTextInLeaves = function (childNode) {\n  var _this = this;\n\n  var node = flatten(childNode);\n  var output = node.reduce(function (acc, current) {\n    var accLast = acc.length - 1;\n    var lastIsText = accLast >= 0 && acc[accLast] && acc[accLast][\"object\"] === \"text\";\n\n    if (current.text) {\n      if (lastIsText) {\n        // If the previous item was a text object, push the current text to it's range\n        acc[accLast].leaves.push(current);\n        return acc;\n      } else {\n        // Else, create a new text object\n        acc.push({\n          object: \"text\",\n          leaves: [current]\n        });\n        return acc;\n      }\n    } else if (current instanceof Array) {\n      return acc.concat(_this.groupTextInLeaves(current));\n    } else {\n      acc.push(current);\n      return acc;\n    }\n  }, []);\n  if (!output.length) return EMPTY_PARAGRAPH_NODES;\n  return output;\n};\n\nRenderer.prototype.code = function (childNode, language) {\n  var data = {};\n\n  if (language) {\n    data.language = language;\n  }\n\n  return {\n    object: \"block\",\n    type: \"code\",\n    data: data,\n    nodes: this.groupTextInLeaves(childNode)\n  };\n};\n\nRenderer.prototype.blockquote = function (childNode) {\n  return {\n    object: \"block\",\n    type: \"block-quote\",\n    nodes: this.groupTextInLeaves(childNode)\n  };\n};\n\nRenderer.prototype.heading = function (childNode, level) {\n  return {\n    object: \"block\",\n    type: \"heading\" + level,\n    nodes: this.groupTextInLeaves(childNode)\n  };\n};\n\nRenderer.prototype.hr = function () {\n  return {\n    object: \"block\",\n    type: \"horizontal-rule\",\n    isVoid: true,\n    nodes: EMPTY_PARAGRAPH_NODES\n  };\n};\n\nRenderer.prototype.list = function (childNode, style) {\n  return {\n    object: \"block\",\n    type: style + \"-list\",\n    nodes: childNode\n  };\n};\n\nRenderer.prototype.listitem = function (childNode) {\n  var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var data = void 0;\n\n  if (flags.checked !== undefined) {\n    data = {\n      checked: flags.checked\n    };\n  }\n\n  return {\n    object: \"block\",\n    type: \"list-item\",\n    data: data,\n    nodes: this.groupTextInLeaves(childNode)\n  };\n};\n\nRenderer.prototype.paragraph = function (childNode) {\n  return {\n    object: \"block\",\n    type: \"paragraph\",\n    nodes: this.groupTextInLeaves(childNode)\n  };\n};\n\nRenderer.prototype.table = function (childNode) {\n  return {\n    object: \"block\",\n    type: \"table\",\n    nodes: childNode\n  };\n};\n\nRenderer.prototype.tablerow = function (childNode) {\n  return {\n    object: \"block\",\n    type: \"table-row\",\n    nodes: childNode\n  };\n};\n\nRenderer.prototype.tablecell = function (childNode, flags) {\n  var align = flags.align;\n  return {\n    object: \"block\",\n    data: {\n      align: align\n    },\n    type: \"table-cell\",\n    nodes: [this.paragraph(childNode)]\n  };\n};\n\nfunction applyMark(childNode, type) {\n  return childNode.map(function (node) {\n    if (node.object === \"inline\") {\n      node.nodes = applyMark(node.nodes, type);\n    } else if (node.object === \"text\") {\n      node.leaves = applyMark(node.leaves, type);\n    } else if (node.marks) {\n      node.marks.push({\n        type: type\n      });\n    } else {\n      node.marks = [{\n        type: type\n      }];\n    }\n\n    return node;\n  });\n} // span level renderer\n\n\nRenderer.prototype.underlined = function (childNode) {\n  return applyMark(childNode, \"underlined\");\n};\n\nRenderer.prototype.strong = function (childNode) {\n  return applyMark(childNode, \"bold\");\n};\n\nRenderer.prototype.em = function (childNode) {\n  return applyMark(childNode, \"italic\");\n};\n\nRenderer.prototype.codespan = function (text) {\n  return {\n    text: text,\n    marks: [{\n      type: \"code\"\n    }]\n  };\n};\n\nRenderer.prototype.br = function () {\n  return {\n    text: \" \"\n  };\n};\n\nRenderer.prototype.del = function (childNode) {\n  return applyMark(childNode, \"deleted\");\n};\n\nRenderer.prototype.ins = function (childNode) {\n  return applyMark(childNode, \"inserted\");\n};\n\nRenderer.prototype.hashtag = function (childNode) {\n  return {\n    object: \"inline\",\n    type: \"hashtag\",\n    nodes: this.groupTextInLeaves(childNode)\n  };\n};\n\nRenderer.prototype.link = function (href, title, childNode) {\n  var data = {\n    href: (0, _urls.decode)(href)\n  };\n\n  if (title) {\n    data.title = title;\n  }\n\n  return {\n    object: \"inline\",\n    type: \"link\",\n    nodes: this.groupTextInLeaves(childNode),\n    data: data\n  };\n};\n\nRenderer.prototype.image = function (href, title, alt) {\n  var data = {\n    src: (0, _urls.decode)(href)\n  };\n\n  if (title) {\n    data.title = title;\n  }\n\n  if (alt) {\n    data.alt = alt;\n  }\n\n  return {\n    object: \"block\",\n    type: \"image\",\n    nodes: EMPTY_PARAGRAPH_NODES,\n    isVoid: true,\n    data: data\n  };\n};\n\nRenderer.prototype.text = function (childNode) {\n  return {\n    text: childNode\n  };\n};\n/**\n * Parsing & Compiling\n */\n\n\nfunction Parser(options) {\n  this.tokens = [];\n  this.token = null;\n  this.options = assign({}, options || defaults);\n  this.options.renderer = this.options.renderer || new Renderer();\n  this.renderer = this.options.renderer;\n  this.renderer.options = this.options;\n}\n/**\n * Static Parse Method\n */\n\n\nParser.parse = function (src, options, renderer) {\n  var parser = new Parser(options, renderer);\n  return parser.parse(src);\n};\n/**\n * Parse Loop\n */\n\n\nParser.prototype.parse = function (src) {\n  this.inline = new InlineLexer(src.links, this.options, this.renderer);\n  this.tokens = src.slice().reverse();\n  var out = [];\n\n  while (this.next()) {\n    out.push(this.tok());\n  }\n\n  return out;\n};\n/**\n * Next Token\n */\n\n\nParser.prototype.next = function () {\n  return this.token = this.tokens.pop();\n};\n/**\n * Preview Next Token\n */\n\n\nParser.prototype.peek = function () {\n  return this.tokens[this.tokens.length - 1] || 0;\n};\n/**\n * Parse Text Tokens\n */\n\n\nParser.prototype.parseText = function () {\n  var body = this.token.text;\n\n  while (this.peek().type === \"text\") {\n    body += \"\\n\" + this.next().text;\n  }\n\n  return this.inline.parse(body);\n};\n/**\n * Parse Current Token\n */\n\n\nParser.prototype.tok = function () {\n  switch (this.token.type) {\n    case \"space\":\n      {\n        return {\n          object: \"text\",\n          leaves: [{\n            text: \"\"\n          }]\n        };\n      }\n\n    case \"hr\":\n      {\n        return this.renderer.hr();\n      }\n\n    case \"heading\":\n      {\n        return this.renderer.heading(this.inline.parse(this.token.text), this.token.depth);\n      }\n\n    case \"code\":\n      {\n        // Text inside of code blocks should not be parsed for marks\n        return this.renderer.code([{\n          object: \"text\",\n          leaves: [{\n            text: this.token.text\n          }]\n        }], this.token.lang);\n      }\n\n    case \"table\":\n      {\n        var body = [];\n        var i = void 0,\n            row = void 0,\n            flags = void 0,\n            j = void 0; // header\n\n        var cells = [];\n\n        for (i = 0; i < this.token.header.length; i++) {\n          flags = {\n            header: true,\n            align: this.token.align[i]\n          };\n          cells.push(this.renderer.tablecell(this.inline.parse(this.token.header[i]), {\n            header: true,\n            align: this.token.align[i]\n          }));\n        }\n\n        body.push(this.renderer.tablerow(cells));\n\n        for (i = 0; i < this.token.cells.length; i++) {\n          row = this.token.cells[i];\n          var _cells = [];\n\n          for (j = 0; j < row.length; j++) {\n            _cells.push(this.renderer.tablecell(this.inline.parse(row[j]), {\n              header: false,\n              align: this.token.align[j]\n            }));\n          }\n\n          body.push(this.renderer.tablerow(_cells));\n        }\n\n        return this.renderer.table(body);\n      }\n\n    case \"blockquote_start\":\n      {\n        var _body = [];\n\n        while (this.next().type !== \"blockquote_end\") {\n          _body.push(this.token.type === \"text\" ? this.renderer.paragraph(this.inline.parse(this.token.text)) : this.tok());\n        }\n\n        return this.renderer.blockquote(_body);\n      }\n\n    case \"list_start\":\n      {\n        var _body2 = [];\n        var style = this.token.style;\n\n        while (this.next().type !== \"list_end\") {\n          _body2.push(this.tok());\n        }\n\n        return this.renderer.list(_body2, style);\n      }\n\n    case \"loose_item_start\":\n    case \"list_item_start\":\n      {\n        var _body3 = [];\n        var _flags = {\n          checked: this.token.checked\n        };\n\n        while (this.next().type !== \"list_item_end\") {\n          _body3.push(this.token.type === \"text\" ? this.renderer.paragraph(this.inline.parse(this.token.text)) : this.tok());\n        }\n\n        return this.renderer.listitem(_body3, _flags);\n      }\n\n    case \"paragraph\":\n      {\n        return this.renderer.paragraph(this.inline.parse(this.token.text));\n      }\n\n    case \"text\":\n      {\n        return this.renderer.text(this.parseText());\n      }\n  }\n};\n/**\n * Helpers\n */\n\n\nfunction replace(regex, options) {\n  regex = regex.source;\n  options = options || \"\";\n  return function self(name, val) {\n    if (!name) {\n      return new RegExp(regex, options);\n    }\n\n    val = val.source || val;\n    val = val.replace(/(^|[^\\[])\\^/g, \"$1\");\n    regex = regex.replace(name, val);\n    return self;\n  };\n}\n\nvar MarkdownParser = {\n  parse: function parse(src, options) {\n    options = assign({}, defaults, options);\n    var fragment = void 0;\n\n    try {\n      fragment = Parser.parse(Lexer.parse(src, options), options);\n\n      if (!fragment.length) {\n        fragment = [{\n          object: \"block\",\n          type: \"paragraph\",\n          isVoid: false,\n          data: {},\n          nodes: EMPTY_PARAGRAPH_NODES\n        }];\n      }\n    } catch (err) {\n      if (options.silent) {\n        fragment = [{\n          object: \"block\",\n          type: \"paragraph\",\n          isVoid: false,\n          data: {},\n          nodes: [{\n            object: \"text\",\n            leaves: [{\n              object: \"leaf\",\n              text: \"An error occured:\",\n              marks: []\n            }, {\n              object: \"leaf\",\n              text: err.message,\n              marks: []\n            }]\n          }]\n        }];\n      } else {\n        throw err;\n      }\n    }\n\n    return {\n      nodes: fragment\n    };\n  }\n};\n\nfunction splitCells(tableRow) {\n  // We must account for escaped pipes within the cell content\n  var cells = tableRow.split(/[^\\\\]\\| *?|^\\|/);\n\n  for (var i = 0; i < cells.length; i++) {\n    cells[i] = cells[i].replace(/\\\\\\|/g, \"|\").trim();\n  }\n\n  return cells;\n}\n\nexports.default = MarkdownParser;","map":{"version":3,"sources":["C:/Users/ayomi/Source/Repos/Idea-Creator/Idea-Creator/MindOverMapper_Movim/MindOverMapper_Movim/ClientApp/node_modules/slate-md-serializer/lib/parser.js"],"names":["Object","defineProperty","exports","value","_urls","require","_hashtagRegex","_hashtagRegex2","_interopRequireDefault","obj","__esModule","default","hashtag","RegExp","source","replace","EMPTY_PARAGRAPH_NODES","object","leaves","text","marks","hasOwnProperty","prototype","assign","i","arguments","length","target","key","call","flatten","ary","concat","apply","noop","exec","defaults","gfm","tables","breaks","pedantic","smartLists","silent","renderer","Renderer","block","newline","code","fences","hr","heading","nptable","blockquote","list","def","paragraph","bullet","item","normal","table","Lexer","options","tokens","links","rules","parse","src","lexer","token","top","bq","next","loose","cap","bull","b","space","l","substring","newlines","_i","push","type","lang","last","splice","depth","header","splitCells","align","split","cells","test","ordered","todo","style","match","checked","undefined","indexOf","slice","join","charAt","toLowerCase","href","title","endsWithNewline","Error","charCodeAt","inline","escape","link","reflink","nolink","strong","underlined","em","br","del","ins","_inside","_href","InlineLexer","out","outputLink","codespan","image","groupTextInLeaves","childNode","_this","node","output","reduce","acc","current","accLast","lastIsText","Array","language","data","nodes","level","isVoid","listitem","flags","tablerow","tablecell","applyMark","map","decode","alt","Parser","parser","reverse","tok","pop","peek","parseText","body","row","j","_cells","_body","_body2","_body3","_flags","regex","self","name","val","MarkdownParser","fragment","err","message","tableRow","trim"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _urls = require(\"./urls\");\n\nvar _hashtagRegex = require(\"hashtag-regex\");\n\nvar _hashtagRegex2 = _interopRequireDefault(_hashtagRegex);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Ported from:\n *   https://github.com/chjj/marked/blob/49b7eaca/lib/marked.js\n * TODO:\n *   Use ES6 classes\n *   Add flow annotations\n */\n\n// we need to convert the regex supplied by the dependency to have the\n// entire hashtag contents within a capture group and begin with newline\nvar hashtag = new RegExp((0, _hashtagRegex2.default)().source.replace(/^/, \"^(\").replace(/$/, \")\"));\n\nvar EMPTY_PARAGRAPH_NODES = [{\n  object: \"text\",\n  leaves: [{\n    object: \"leaf\",\n    text: \"\",\n    marks: []\n  }]\n}];\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nvar assign = Object.assign || function (obj) {\n  var i = 1;\n  for (; i < arguments.length; i++) {\n    var target = arguments[i];\n    for (var key in target) {\n      if (hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n  return obj;\n};\n\nvar flatten = function flatten(ary) {\n  return [].concat.apply([], ary);\n};\n\nvar noop = function noop() {};\nnoop.exec = noop;\n\nvar defaults = {\n  gfm: true,\n  tables: true,\n  breaks: false,\n  pedantic: false,\n  smartLists: true,\n  silent: false,\n  renderer: new Renderer()\n};\n\n/**\n * Block-Level Grammar\n */\n\nvar block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: noop,\n  hr: /^( *[-*_]){3,} *(?:\\n|$)/,\n  heading: /^ *(#{1,6}) *([^\\n]+?)? *#* *(?:\\n|$)/,\n  nptable: noop,\n  blockquote: /^( *>[^\\n]+(\\n(?!def)[^\\n])*(?:\\n|$))+/,\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n(?! )(?!\\1bull )\\n|\\s*$)/,\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +[\"(]([^\\n]+)[\")])? *(?:\\n|$)/,\n  paragraph: /^((?:[^\\n]+(?!hr|heading|blockquote|def))+)(?:\\n|$)/,\n  text: /^[^\\n]+/\n};\n\nblock.bullet = /(?:[*+-]|\\d+\\.|\\[[x\\s]\\])/;\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/;\nblock.item = replace(block.item, \"gm\")(/bull/g, block.bullet)();\n\nblock.list = replace(block.list)(/bull/g, block.bullet)(\"hr\", \"\\\\n+(?=\\\\1?(?:[-*_] *){3,}(?:\\\\n+|$))\")(\"def\", \"\\\\n+(?=\" + block.def.source + \")\")();\n\nblock.blockquote = replace(block.blockquote)(\"def\", block.def)();\n\nblock.paragraph = replace(block.paragraph)(\"hr\", block.hr)(\"heading\", block.heading)(\"blockquote\", block.blockquote)(\"def\", block.def)();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = assign({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = assign({}, block.normal, {\n  fences: /^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]+?)\\s*\\1 *(?:\\n|$)/,\n  paragraph: /^/,\n  heading: /^ *(#{1,6}) +([^\\n]+?)? *#* *(?:\\n{1,2}|$)/\n});\n\nblock.gfm.paragraph = replace(block.paragraph)(\"(?!\", \"(?!\" + block.gfm.fences.source.replace(\"\\\\1\", \"\\\\2\") + \"|\" + block.list.source.replace(\"\\\\1\", \"\\\\3\") + \"|\")();\n\n/**\n * GFM + Tables Block Grammar\n */\n\nblock.tables = assign({}, block.gfm, {\n  nptable: /^ *(\\S.*\\|.*)\\n *([-:]+ *\\|[-| :]*)\\n((?:.*\\|.*(?:\\n|$))*)/,\n  table: /^ *\\|(.+)\\n *\\|( *[-:]+[-| :]*)\\n((?: *\\|.*(?:\\n|$))*)/\n});\n\n/**\n * Block Lexer\n */\n\nfunction Lexer(options) {\n  this.tokens = [];\n  this.tokens.links = {};\n  this.options = assign({}, options || defaults);\n  this.rules = block.normal;\n\n  if (this.options.gfm) {\n    if (this.options.tables) {\n      this.rules = block.tables;\n    } else {\n      this.rules = block.gfm;\n    }\n  }\n}\n\n/**\n * Expose Block Rules\n */\n\nLexer.rules = block;\n\n/**\n * Static Lex Method\n */\n\nLexer.parse = function (src, options) {\n  var lexer = new Lexer(options);\n  return lexer.parse(src);\n};\n\n/**\n * Preprocessing\n */\n\nLexer.prototype.parse = function (src) {\n  src = src.replace(/\\r\\n|\\r/g, \"\\n\").replace(/\\t/g, \"    \").replace(/\\u00a0/g, \" \").replace(/\\u2424/g, \"\\n\");\n\n  return this.token(src, true);\n};\n\n/**\n * Lexing\n */\n\nLexer.prototype.token = function (src, top, bq) {\n  var next;\n  var loose;\n  var cap;\n  var bull;\n  var b;\n  var item;\n  var space;\n  var i;\n  var l;\n\n  src = src.replace(/^ +$/gm, \"\");\n  src = src.replace(/^\\n/, \"\");\n\n  while (src) {\n    // newline\n    if (cap = this.rules.newline.exec(src)) {\n      src = src.substring(cap[0].length);\n      var newlines = cap[0].length;\n\n      if (top) {\n        for (var _i = 0; _i < newlines; _i++) {\n          this.tokens.push({\n            type: \"paragraph\",\n            text: \"\"\n          });\n        }\n      }\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      cap = cap[0].replace(/^ {4}/gm, \"\");\n      this.tokens.push({\n        type: \"code\",\n        text: !this.options.pedantic ? cap.replace(/\\n+$/, \"\") : cap\n      });\n      continue;\n    }\n\n    // fences (gfm)\n    if (cap = this.rules.fences.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: \"code\",\n        lang: cap[2],\n        text: cap[3]\n      });\n      continue;\n    }\n\n    // heading\n    if (cap = this.rules.heading.exec(src)) {\n      src = src.substring(cap[0].length);\n\n      var last = this.tokens[this.tokens.length - 1];\n      if (last && last.type === \"paragraph\" && last.text === \"\") {\n        this.tokens.splice(-1, 1);\n      }\n\n      this.tokens.push({\n        type: \"heading\",\n        depth: cap[1].length,\n        text: cap[2]\n      });\n      continue;\n    }\n\n    // table no leading pipe (gfm)\n    if (top && (cap = this.rules.nptable.exec(src))) {\n      src = src.substring(cap[0].length);\n\n      item = {\n        type: \"table\",\n        header: splitCells(cap[1].replace(/^ *| *\\| *$/g, \"\")),\n        align: cap[2].replace(/^ *|\\| *$/g, \"\").split(/ *\\| */),\n        cells: cap[3].replace(/\\n$/, \"\").split(\"\\n\")\n      };\n\n      for (i = 0; i < item.align.length; i++) {\n        if (/^ *-+: *$/.test(item.align[i])) {\n          item.align[i] = \"right\";\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\n          item.align[i] = \"center\";\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\n          item.align[i] = \"left\";\n        } else {\n          item.align[i] = null;\n        }\n      }\n\n      for (i = 0; i < item.cells.length; i++) {\n        item.cells[i] = splitCells(item.cells[i]);\n      }\n\n      this.tokens.push(item);\n\n      continue;\n    }\n\n    // hr\n    if (cap = this.rules.hr.exec(src)) {\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: \"hr\"\n      });\n      continue;\n    }\n\n    // blockquote\n    if (cap = this.rules.blockquote.exec(src)) {\n      src = src.substring(cap[0].length);\n\n      this.tokens.push({\n        type: \"blockquote_start\"\n      });\n\n      cap = cap[0].replace(/^ *> ?/gm, \"\");\n\n      // Pass `top` to keep the current\n      // \"toplevel\" state. This is exactly\n      // how markdown.pl works.\n      this.token(cap, top, true);\n\n      this.tokens.push({\n        type: \"blockquote_end\"\n      });\n\n      continue;\n    }\n\n    // list\n    if (cap = this.rules.list.exec(src)) {\n      src = src.substring(cap[0].length);\n      bull = cap[2];\n      var ordered = bull.length > 1;\n      var todo = bull[0] === \"[\";\n\n      this.tokens.push({\n        type: \"list_start\",\n        style: todo ? \"todo\" : ordered ? \"ordered\" : \"bulleted\"\n      });\n\n      // Get each top-level item.\n      cap = cap[0].match(this.rules.item);\n\n      next = false;\n      l = cap.length;\n      i = 0;\n\n      for (; i < l; i++) {\n        item = cap[i];\n\n        // Remove the list item's bullet\n        // so it is seen as the next token.\n        var checked = todo ? !!item.match(/^ *(\\[x\\])/) : undefined;\n        space = item.length;\n        item = item.replace(/^ *([*+-]|\\d+\\.|\\[[x\\s]\\]) +/, \"\");\n\n        // Outdent whatever the\n        // list item contains. Hacky.\n        if (~item.indexOf(\"\\n \")) {\n          space -= item.length;\n          item = !this.options.pedantic ? item.replace(new RegExp(\"^ {1,\" + space + \"}\", \"gm\"), \"\") : item.replace(/^ {1,4}/gm, \"\");\n        }\n\n        // Determine whether the next list item belongs here.\n        // Backpedal if it does not belong in this list.\n        if (this.options.smartLists && i !== l - 1) {\n          b = block.bullet.exec(cap[i + 1])[0];\n          if (bull !== b && !(bull.length > 1 && b.length > 1)) {\n            src = cap.slice(i + 1).join(\"\\n\") + src;\n            i = l - 1;\n          }\n        }\n\n        // Determine whether item is loose or not.\n        // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n        // for discount behavior.\n        loose = next || /\\n\\n(?!\\s*$)/.test(item);\n        if (i !== l - 1) {\n          next = item.charAt(item.length - 1) === \"\\n\";\n          if (!loose) {\n            loose = next;\n          }\n        }\n\n        this.tokens.push({\n          checked: checked,\n          type: loose ? \"loose_item_start\" : \"list_item_start\"\n        });\n\n        // Recurse.\n        this.token(item, false, bq);\n\n        this.tokens.push({\n          type: \"list_item_end\"\n        });\n      }\n\n      this.tokens.push({\n        type: \"list_end\"\n      });\n\n      continue;\n    }\n\n    // def\n    if (!bq && top && (cap = this.rules.def.exec(src))) {\n      src = src.substring(cap[0].length);\n      this.tokens.links[cap[1].toLowerCase()] = {\n        href: cap[2],\n        title: cap[3]\n      };\n      continue;\n    }\n\n    // table (gfm)\n    if (top && (cap = this.rules.table.exec(src))) {\n      src = src.substring(cap[0].length);\n\n      item = {\n        type: \"table\",\n        header: splitCells(cap[1].replace(/^ *| *\\| *$/g, \"\")),\n        align: cap[2].replace(/^ *|\\| *$/g, \"\").split(/ *\\| */),\n        cells: cap[3].replace(/(?: *\\| *)?\\n$/, \"\").split(\"\\n\")\n      };\n\n      for (i = 0; i < item.align.length; i++) {\n        if (/^ *-+: *$/.test(item.align[i])) {\n          item.align[i] = \"right\";\n        } else if (/^ *:-+: *$/.test(item.align[i])) {\n          item.align[i] = \"center\";\n        } else if (/^ *:-+ *$/.test(item.align[i])) {\n          item.align[i] = \"left\";\n        } else {\n          item.align[i] = null;\n        }\n      }\n\n      for (i = 0; i < item.cells.length; i++) {\n        item.cells[i] = splitCells(item.cells[i].replace(/^ *\\| *| *\\| *$/g, \"\"));\n      }\n\n      this.tokens.push(item);\n\n      continue;\n    }\n\n    // top-level paragraph\n    if (top && (cap = this.rules.paragraph.exec(src))) {\n      src = src.substring(cap[0].length);\n      var endsWithNewline = cap[1].charAt(cap[1].length - 1) === \"\\n\";\n      this.tokens.push({\n        type: \"paragraph\",\n        text: endsWithNewline ? cap[1].slice(0, -1) : cap[1]\n      });\n      if (endsWithNewline) {\n        this.tokens.push({\n          type: \"paragraph\",\n          text: \"\"\n        });\n      }\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      // Top-level should never reach here.\n      src = src.substring(cap[0].length);\n      this.tokens.push({\n        type: \"text\",\n        text: cap[0]\n      });\n      continue;\n    }\n\n    if (src) {\n      throw new Error(\"Infinite loop on byte: \" + src.charCodeAt(0));\n    }\n  }\n\n  return this.tokens;\n};\n\n/**\n * Inline-Level Grammar\n */\n\nvar inline = {\n  escape: /^\\\\([\\\\`*{}\\[\\]()#+\\-.!_>])/,\n  link: /^!?\\[(inside)\\]\\(href\\)/,\n  hashtag: hashtag,\n  reflink: /^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/,\n  nolink: /^!?\\[((?:\\[[^\\]]*\\]|[^\\[\\]])*)\\]/,\n  strong: /^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/,\n  underlined: /^__([\\s\\S]+?)__(?!_)/,\n  em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n  code: /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n  br: /^ {2,}\\n(?!\\s*$)/,\n  del: noop,\n  ins: noop,\n  text: /^[\\s\\S]+?(?=[\\\\<!\\[_*#`]| {2,}\\n|$)/\n};\n\ninline._inside = /(?:\\[[^\\]]*\\]|[^\\[\\]]|\\](?=[^\\[]*\\]))*/;\ninline._href = /\\s*<?([\\s\\S]*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*/;\n\ninline.link = replace(inline.link)(\"inside\", inline._inside)(\"href\", inline._href)();\n\ninline.reflink = replace(inline.reflink)(\"inside\", inline._inside)();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = assign({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = assign({}, inline.normal, {\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = assign({}, inline.normal, {\n  escape: replace(inline.escape)(\"])\", \"~|])\")(),\n  del: /^~~(?=\\S)([\\s\\S]*?\\S)~~/,\n  ins: /^\\+\\+(?=\\S)([\\s\\S]*?\\S)\\+\\+/,\n  text: replace(inline.text)(\"]|\", \"~+]|\")()\n});\n\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = assign({}, inline.gfm, {\n  br: replace(inline.br)(\"{2,}\", \"*\")(),\n  text: replace(inline.gfm.text)(\"{2,}\", \"*\")()\n});\n\n/**\n * Inline Lexer & Compiler\n */\n\nfunction InlineLexer(links, options) {\n  this.options = assign({}, options || defaults);\n  this.links = links;\n  this.rules = inline.normal;\n  this.renderer = this.options.renderer || new Renderer();\n  this.renderer.options = this.options;\n\n  if (!this.links) {\n    throw new Error(\"Tokens array requires a `links` property.\");\n  }\n\n  if (this.options.gfm) {\n    if (this.options.breaks) {\n      this.rules = inline.breaks;\n    } else {\n      this.rules = inline.gfm;\n    }\n  } else if (this.options.pedantic) {\n    this.rules = inline.pedantic;\n  }\n}\n\n/**\n * Expose Inline Rules\n */\n\nInlineLexer.rules = inline;\n\n/**\n * Static Lexing/Compiling Method\n */\n\nInlineLexer.parse = function (src, links, options) {\n  var inline = new InlineLexer(links, options);\n  return inline.parse(src);\n};\n\n/**\n * Lexing/Compiling\n */\n\nInlineLexer.prototype.parse = function (src) {\n  var out = [];\n  var link;\n  var cap;\n\n  while (src) {\n    // escape\n    if (cap = this.rules.escape.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.push({\n        object: \"text\",\n        leaves: [{\n          text: cap[1]\n        }]\n      });\n      continue;\n    }\n\n    // link\n    if (cap = this.rules.link.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.push(this.outputLink(cap, { href: cap[2], title: cap[3] }));\n      continue;\n    }\n\n    // hashtag\n    if (cap = this.rules.hashtag.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.push(this.renderer.hashtag(this.parse(\"\\\\\" + cap[1])));\n      continue;\n    }\n\n    // reflink, nolink\n    // TODO\n    if ((cap = this.rules.reflink.exec(src)) || (cap = this.rules.nolink.exec(src))) {\n      src = src.substring(cap[0].length);\n      link = (cap[2] || cap[1]).replace(/\\s+/g, \" \");\n      link = this.links[link.toLowerCase()];\n      if (!link || !link.href) {\n        out.push({\n          object: \"text\",\n          leaves: [{\n            text: cap[0].charAt(0)\n          }]\n        });\n        src = cap[0].substring(1) + src;\n        continue;\n      }\n      out.push(this.outputLink(cap, link));\n      continue;\n    }\n\n    // underlined\n    if (cap = this.rules.underlined.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.push(this.renderer.underlined(this.parse(cap[2] || cap[1])));\n      continue;\n    }\n\n    // strong\n    if (cap = this.rules.strong.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.push(this.renderer.strong(this.parse(cap[2] || cap[1])));\n      continue;\n    }\n\n    // em\n    if (cap = this.rules.em.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.push(this.renderer.em(this.parse(cap[2] || cap[1])));\n      continue;\n    }\n\n    // code\n    if (cap = this.rules.code.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.push(this.renderer.codespan(cap[2]));\n      continue;\n    }\n\n    // br\n    if (cap = this.rules.br.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.push(this.renderer.br());\n      continue;\n    }\n\n    // del (gfm)\n    if (cap = this.rules.del.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.push(this.renderer.del(this.parse(cap[1])));\n      continue;\n    }\n\n    // ins (gfm extended)\n    if (cap = this.rules.ins.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.push(this.renderer.ins(this.parse(cap[1])));\n      continue;\n    }\n\n    // text\n    if (cap = this.rules.text.exec(src)) {\n      src = src.substring(cap[0].length);\n      out.push(this.renderer.text(cap[0]));\n      continue;\n    }\n\n    if (src) {\n      throw new Error(\"Infinite loop on byte: \" + src.charCodeAt(0));\n    }\n  }\n\n  return out;\n};\n\n/**\n * Compile Link\n */\n\nInlineLexer.prototype.outputLink = function (cap, link) {\n  var href = link.href;\n  var title = link.title;\n\n  return cap[0].charAt(0) !== \"!\" ? this.renderer.link(href, title, this.parse(cap[1])) : this.renderer.image(href, title, cap[1]);\n};\n\n/**\n * Renderer\n */\n\nfunction Renderer(options) {\n  this.options = options || {};\n}\n\nRenderer.prototype.groupTextInLeaves = function (childNode) {\n  var _this = this;\n\n  var node = flatten(childNode);\n  var output = node.reduce(function (acc, current) {\n    var accLast = acc.length - 1;\n    var lastIsText = accLast >= 0 && acc[accLast] && acc[accLast][\"object\"] === \"text\";\n\n    if (current.text) {\n      if (lastIsText) {\n        // If the previous item was a text object, push the current text to it's range\n        acc[accLast].leaves.push(current);\n        return acc;\n      } else {\n        // Else, create a new text object\n        acc.push({\n          object: \"text\",\n          leaves: [current]\n        });\n        return acc;\n      }\n    } else if (current instanceof Array) {\n      return acc.concat(_this.groupTextInLeaves(current));\n    } else {\n      acc.push(current);\n      return acc;\n    }\n  }, []);\n\n  if (!output.length) return EMPTY_PARAGRAPH_NODES;\n  return output;\n};\n\nRenderer.prototype.code = function (childNode, language) {\n  var data = {};\n\n  if (language) {\n    data.language = language;\n  }\n\n  return {\n    object: \"block\",\n    type: \"code\",\n    data: data,\n    nodes: this.groupTextInLeaves(childNode)\n  };\n};\n\nRenderer.prototype.blockquote = function (childNode) {\n  return {\n    object: \"block\",\n    type: \"block-quote\",\n    nodes: this.groupTextInLeaves(childNode)\n  };\n};\n\nRenderer.prototype.heading = function (childNode, level) {\n  return {\n    object: \"block\",\n    type: \"heading\" + level,\n    nodes: this.groupTextInLeaves(childNode)\n  };\n};\n\nRenderer.prototype.hr = function () {\n  return {\n    object: \"block\",\n    type: \"horizontal-rule\",\n    isVoid: true,\n    nodes: EMPTY_PARAGRAPH_NODES\n  };\n};\n\nRenderer.prototype.list = function (childNode, style) {\n  return {\n    object: \"block\",\n    type: style + \"-list\",\n    nodes: childNode\n  };\n};\n\nRenderer.prototype.listitem = function (childNode) {\n  var flags = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var data = void 0;\n  if (flags.checked !== undefined) {\n    data = { checked: flags.checked };\n  }\n\n  return {\n    object: \"block\",\n    type: \"list-item\",\n    data: data,\n    nodes: this.groupTextInLeaves(childNode)\n  };\n};\n\nRenderer.prototype.paragraph = function (childNode) {\n  return {\n    object: \"block\",\n    type: \"paragraph\",\n    nodes: this.groupTextInLeaves(childNode)\n  };\n};\n\nRenderer.prototype.table = function (childNode) {\n  return {\n    object: \"block\",\n    type: \"table\",\n    nodes: childNode\n  };\n};\n\nRenderer.prototype.tablerow = function (childNode) {\n  return {\n    object: \"block\",\n    type: \"table-row\",\n    nodes: childNode\n  };\n};\n\nRenderer.prototype.tablecell = function (childNode, flags) {\n  var align = flags.align;\n\n  return {\n    object: \"block\",\n    data: { align: align },\n    type: \"table-cell\",\n    nodes: [this.paragraph(childNode)]\n  };\n};\n\nfunction applyMark(childNode, type) {\n  return childNode.map(function (node) {\n    if (node.object === \"inline\") {\n      node.nodes = applyMark(node.nodes, type);\n    } else if (node.object === \"text\") {\n      node.leaves = applyMark(node.leaves, type);\n    } else if (node.marks) {\n      node.marks.push({ type: type });\n    } else {\n      node.marks = [{ type: type }];\n    }\n    return node;\n  });\n}\n\n// span level renderer\nRenderer.prototype.underlined = function (childNode) {\n  return applyMark(childNode, \"underlined\");\n};\n\nRenderer.prototype.strong = function (childNode) {\n  return applyMark(childNode, \"bold\");\n};\n\nRenderer.prototype.em = function (childNode) {\n  return applyMark(childNode, \"italic\");\n};\n\nRenderer.prototype.codespan = function (text) {\n  return {\n    text: text,\n    marks: [{ type: \"code\" }]\n  };\n};\n\nRenderer.prototype.br = function () {\n  return {\n    text: \" \"\n  };\n};\n\nRenderer.prototype.del = function (childNode) {\n  return applyMark(childNode, \"deleted\");\n};\n\nRenderer.prototype.ins = function (childNode) {\n  return applyMark(childNode, \"inserted\");\n};\n\nRenderer.prototype.hashtag = function (childNode) {\n  return {\n    object: \"inline\",\n    type: \"hashtag\",\n    nodes: this.groupTextInLeaves(childNode)\n  };\n};\n\nRenderer.prototype.link = function (href, title, childNode) {\n  var data = {\n    href: (0, _urls.decode)(href)\n  };\n  if (title) {\n    data.title = title;\n  }\n  return {\n    object: \"inline\",\n    type: \"link\",\n    nodes: this.groupTextInLeaves(childNode),\n    data: data\n  };\n};\n\nRenderer.prototype.image = function (href, title, alt) {\n  var data = {\n    src: (0, _urls.decode)(href)\n  };\n\n  if (title) {\n    data.title = title;\n  }\n  if (alt) {\n    data.alt = alt;\n  }\n\n  return {\n    object: \"block\",\n    type: \"image\",\n    nodes: EMPTY_PARAGRAPH_NODES,\n    isVoid: true,\n    data: data\n  };\n};\n\nRenderer.prototype.text = function (childNode) {\n  return {\n    text: childNode\n  };\n};\n\n/**\n * Parsing & Compiling\n */\n\nfunction Parser(options) {\n  this.tokens = [];\n  this.token = null;\n  this.options = assign({}, options || defaults);\n  this.options.renderer = this.options.renderer || new Renderer();\n  this.renderer = this.options.renderer;\n  this.renderer.options = this.options;\n}\n\n/**\n * Static Parse Method\n */\n\nParser.parse = function (src, options, renderer) {\n  var parser = new Parser(options, renderer);\n  return parser.parse(src);\n};\n\n/**\n * Parse Loop\n */\n\nParser.prototype.parse = function (src) {\n  this.inline = new InlineLexer(src.links, this.options, this.renderer);\n  this.tokens = src.slice().reverse();\n\n  var out = [];\n  while (this.next()) {\n    out.push(this.tok());\n  }\n\n  return out;\n};\n\n/**\n * Next Token\n */\n\nParser.prototype.next = function () {\n  return this.token = this.tokens.pop();\n};\n\n/**\n * Preview Next Token\n */\n\nParser.prototype.peek = function () {\n  return this.tokens[this.tokens.length - 1] || 0;\n};\n\n/**\n * Parse Text Tokens\n */\n\nParser.prototype.parseText = function () {\n  var body = this.token.text;\n\n  while (this.peek().type === \"text\") {\n    body += \"\\n\" + this.next().text;\n  }\n\n  return this.inline.parse(body);\n};\n\n/**\n * Parse Current Token\n */\n\nParser.prototype.tok = function () {\n  switch (this.token.type) {\n    case \"space\":\n      {\n        return {\n          object: \"text\",\n          leaves: [{\n            text: \"\"\n          }]\n        };\n      }\n    case \"hr\":\n      {\n        return this.renderer.hr();\n      }\n    case \"heading\":\n      {\n        return this.renderer.heading(this.inline.parse(this.token.text), this.token.depth);\n      }\n    case \"code\":\n      {\n        // Text inside of code blocks should not be parsed for marks\n        return this.renderer.code([{\n          object: \"text\",\n          leaves: [{ text: this.token.text }]\n        }], this.token.lang);\n      }\n    case \"table\":\n      {\n        var body = [];\n        var i = void 0,\n            row = void 0,\n            flags = void 0,\n            j = void 0;\n\n        // header\n        var cells = [];\n        for (i = 0; i < this.token.header.length; i++) {\n          flags = { header: true, align: this.token.align[i] };\n          cells.push(this.renderer.tablecell(this.inline.parse(this.token.header[i]), {\n            header: true,\n            align: this.token.align[i]\n          }));\n        }\n        body.push(this.renderer.tablerow(cells));\n\n        for (i = 0; i < this.token.cells.length; i++) {\n          row = this.token.cells[i];\n\n          var _cells = [];\n          for (j = 0; j < row.length; j++) {\n            _cells.push(this.renderer.tablecell(this.inline.parse(row[j]), {\n              header: false,\n              align: this.token.align[j]\n            }));\n          }\n\n          body.push(this.renderer.tablerow(_cells));\n        }\n        return this.renderer.table(body);\n      }\n    case \"blockquote_start\":\n      {\n        var _body = [];\n\n        while (this.next().type !== \"blockquote_end\") {\n          _body.push(this.token.type === \"text\" ? this.renderer.paragraph(this.inline.parse(this.token.text)) : this.tok());\n        }\n        return this.renderer.blockquote(_body);\n      }\n    case \"list_start\":\n      {\n        var _body2 = [];\n        var style = this.token.style;\n\n        while (this.next().type !== \"list_end\") {\n          _body2.push(this.tok());\n        }\n\n        return this.renderer.list(_body2, style);\n      }\n    case \"loose_item_start\":\n    case \"list_item_start\":\n      {\n        var _body3 = [];\n        var _flags = { checked: this.token.checked };\n\n        while (this.next().type !== \"list_item_end\") {\n          _body3.push(this.token.type === \"text\" ? this.renderer.paragraph(this.inline.parse(this.token.text)) : this.tok());\n        }\n\n        return this.renderer.listitem(_body3, _flags);\n      }\n    case \"paragraph\":\n      {\n        return this.renderer.paragraph(this.inline.parse(this.token.text));\n      }\n    case \"text\":\n      {\n        return this.renderer.text(this.parseText());\n      }\n  }\n};\n\n/**\n * Helpers\n */\n\nfunction replace(regex, options) {\n  regex = regex.source;\n  options = options || \"\";\n  return function self(name, val) {\n    if (!name) {\n      return new RegExp(regex, options);\n    }\n    val = val.source || val;\n    val = val.replace(/(^|[^\\[])\\^/g, \"$1\");\n    regex = regex.replace(name, val);\n    return self;\n  };\n}\n\nvar MarkdownParser = {\n  parse: function parse(src, options) {\n    options = assign({}, defaults, options);\n    var fragment = void 0;\n\n    try {\n      fragment = Parser.parse(Lexer.parse(src, options), options);\n\n      if (!fragment.length) {\n        fragment = [{\n          object: \"block\",\n          type: \"paragraph\",\n          isVoid: false,\n          data: {},\n          nodes: EMPTY_PARAGRAPH_NODES\n        }];\n      }\n    } catch (err) {\n      if (options.silent) {\n        fragment = [{\n          object: \"block\",\n          type: \"paragraph\",\n          isVoid: false,\n          data: {},\n          nodes: [{\n            object: \"text\",\n            leaves: [{\n              object: \"leaf\",\n              text: \"An error occured:\",\n              marks: []\n            }, {\n              object: \"leaf\",\n              text: err.message,\n              marks: []\n            }]\n          }]\n        }];\n      } else {\n        throw err;\n      }\n    }\n\n    return { nodes: fragment };\n  }\n};\n\nfunction splitCells(tableRow) {\n  // We must account for escaped pipes within the cell content\n  var cells = tableRow.split(/[^\\\\]\\| *?|^\\|/);\n\n  for (var i = 0; i < cells.length; i++) {\n    cells[i] = cells[i].replace(/\\\\\\|/g, \"|\").trim();\n  }\n\n  return cells;\n}\n\nexports.default = MarkdownParser;"]},"metadata":{},"sourceType":"script"}