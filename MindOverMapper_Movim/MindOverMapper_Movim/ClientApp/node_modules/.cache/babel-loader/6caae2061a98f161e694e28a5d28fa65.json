{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar enterKey = {\n  keys: ['Enter'],\n  keyCode: 13\n};\nvar tabKey = {\n  keys: ['Tab'],\n  keyCode: 9\n};\nvar spaceBarKey = {\n  keys: [' '],\n  keyCode: 32\n};\nvar escapeKey = {\n  keys: ['Escape', 'Esc'],\n  keyCode: 27\n  /**\r\n   * Per the MDN, KeyboardEvent.keyCode and KeyboardEvent.which\r\n   * are deprecated. KeyboardEvent.code is not to be used to\r\n   * determine what character corresponds with a key event\r\n   * and is also not supported on Edge. KeyboardEvent.key is the\r\n   * preferred method, but seems less reliable than keyCode given\r\n   * it returns different strings for different browsers; ex: \"Escape\"\r\n   * in Chrome, but \"Esc\" in Edge. This function future proofs\r\n   * against deprecation, while still giving preference to the more\r\n   * reliable keyCode.\r\n   * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode\r\n   * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code\r\n   * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key\r\n   * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/which\r\n   *\r\n   * KeyMap : { keyCode: Number, keys: [ String ] }\r\n   * isKey : KeyMap -> KeyboardEvent -> Boolean\r\n   */\n\n};\n\nvar isKey = function isKey(_ref) {\n  var keyCode = _ref.keyCode,\n      keys = _ref.keys;\n  return function (e) {\n    return e.keyCode ? e.keyCode === keyCode : keys.indexOf(e.key) !== -1;\n  };\n}; // is<X>Key : KeyboardEvent -> Boolean\n\n\nvar isEnterOrSpaceBarKey = exports.isEnterOrSpaceBarKey = function isEnterOrSpaceBarKey(e) {\n  return isKey(enterKey)(e) || isSpaceBarKey(e);\n};\n\nvar isTabKey = exports.isTabKey = isKey(tabKey);\nvar isSpaceBarKey = exports.isSpaceBarKey = isKey(spaceBarKey);\nvar isEscapeKey = exports.isEscapeKey = isKey(escapeKey);","map":null,"metadata":{},"sourceType":"script"}