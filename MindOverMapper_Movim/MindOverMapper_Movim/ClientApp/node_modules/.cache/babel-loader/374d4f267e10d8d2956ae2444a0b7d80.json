{"ast":null,"code":"import isUrl from 'is-url';\n\nfunction PasteLinkify() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _options$isActiveQuer = options.isActiveQuery,\n      isActiveQuery = _options$isActiveQuer === undefined ? 'isLinkActive' : _options$isActiveQuer,\n      _options$wrapCommand = options.wrapCommand,\n      wrapCommand = _options$wrapCommand === undefined ? 'wrapLink' : _options$wrapCommand,\n      _options$unwrapComman = options.unwrapCommand,\n      unwrapCommand = _options$unwrapComman === undefined ? 'unwrapLink' : _options$unwrapComman;\n  return {\n    onCommand: function onCommand(command, change, next) {\n      var type = command.type,\n          args = command.args;\n      var value = change.value;\n      var selection = value.selection;\n      var isCollapsed = selection.isCollapsed,\n          start = selection.start;\n      var url = void 0;\n\n      if (type === 'insertText' && isUrl(url = args[0]) || type === 'insertFragment' && isUrl(url = args[0].text)) {\n        // If there is already a link active, unwrap it so that we don't end up\n        // with a confusing overlapping inline situation.\n        if (change.query(isActiveQuery, value)) {\n          change.command(unwrapCommand);\n        } // If the selection is collapsed, we need to allow the default inserting\n        // to occur instead of just wrapping the existing text in a link.\n\n\n        if (isCollapsed) {\n          next();\n          change.moveAnchorTo(start.offset).moveFocusTo(start.offset + url.length);\n        } // Wrap the selection in a link, and collapse to the end of it.\n\n\n        change.command(wrapCommand, url).moveToEnd();\n        return;\n      }\n\n      next();\n    }\n  };\n}\n\nexport default PasteLinkify;","map":{"version":3,"sources":["../src/index.js"],"names":["options","isActiveQuery","wrapCommand","unwrapCommand","type","args","command","value","change","selection","isCollapsed","start","url","isUrl"],"mappings":";;AAEe,SAAA,YAAA,GAAoC;MAAdA,OAAc,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAJ,E;8BAKzCA,OAL6C,CAAA,a;MAE/CC,aAF+C,GAAA,qBAAA,KAAA,SAAA,GAAA,cAAA,GAAA,qB;6BAK7CD,OAL6C,CAAA,W;MAG/CE,WAH+C,GAAA,oBAAA,KAAA,SAAA,GAAA,UAAA,GAAA,oB;8BAK7CF,OAL6C,CAAA,a;MAI/CG,aAJ+C,GAAA,qBAAA,KAAA,SAAA,GAAA,YAAA,GAAA,qB;SAO1C;aAAA,EAAA,SAAA,SAAA,CAAA,OAAA,EAAA,MAAA,EAAA,IAAA,EAC4B;UACvBC,IADuB,GACRE,OADQ,CAAA,I;UACjBD,IADiB,GACRC,OADQ,CAAA,I;UAEvBC,KAFuB,GAEbC,MAFa,CAAA,K;UAGvBC,SAHuB,GAGTF,KAHS,CAAA,S;UAIvBG,WAJuB,GAIAD,SAJA,CAAA,W;UAIVE,KAJU,GAIAF,SAJA,CAAA,K;UAK3BG,GAAAA,GAAAA,KAAJ,C;;UAGGR,IAAAA,KAAAA,YAAAA,IAAyBS,KAAAA,CAAOD,GAAAA,GAAMP,IAAAA,CAAvC,CAAuCA,CAAbQ,CAAzBT,IACAA,IAAAA,KAAAA,gBAAAA,IAA6BS,KAAAA,CAAOD,GAAAA,GAAMP,IAAAA,CAAAA,CAAAA,CAAAA,CAF7C,IAEgCQ,C,EAC9B;;;YAGIL,MAAAA,CAAAA,KAAAA,CAAAA,aAAAA,EAAJ,KAAIA,C,EAAoC;iBACtC,O,CAAA,a;SAJF,C;;;;YASA,W,EAAiB;;iBAEf,Y,CACgBG,KAAAA,CADhB,M,EAAA,W,CAEeA,KAAAA,CAAAA,MAAAA,GAAeC,GAAAA,CAF9B,M;SAXF,C;;;eAiBA,O,CAAA,W,EAAA,G,EAAA,S;;;;;;AA5BC,G","sourcesContent":["import isUrl from 'is-url'\n\nexport default function PasteLinkify(options = {}) {\n  const {\n    isActiveQuery = 'isLinkActive',\n    wrapCommand = 'wrapLink',\n    unwrapCommand = 'unwrapLink',\n  } = options\n\n  return {\n    onCommand(command, change, next) {\n      const { type, args } = command\n      const { value } = change\n      const { selection } = value\n      const { isCollapsed, start } = selection\n      let url\n\n      if (\n        (type === 'insertText' && isUrl((url = args[0]))) ||\n        (type === 'insertFragment' && isUrl((url = args[0].text)))\n      ) {\n        // If there is already a link active, unwrap it so that we don't end up\n        // with a confusing overlapping inline situation.\n        if (change.query(isActiveQuery, value)) {\n          change.command(unwrapCommand)\n        }\n\n        // If the selection is collapsed, we need to allow the default inserting\n        // to occur instead of just wrapping the existing text in a link.\n        if (isCollapsed) {\n          next()\n          change\n            .moveAnchorTo(start.offset)\n            .moveFocusTo(start.offset + url.length)\n        }\n\n        // Wrap the selection in a link, and collapse to the end of it.\n        change.command(wrapCommand, url).moveToEnd()\n        return\n      }\n\n      next()\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}