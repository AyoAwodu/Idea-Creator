{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Ellipsis;\n\nvar _slate = require(\"slate\");\n\nvar _isModKey = require(\"../lib/isModKey\");\n\nvar _isModKey2 = _interopRequireDefault(_isModKey);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction Ellipsis() {\n  return {\n    onKeyDown: function onKeyDown(ev, editor, next) {\n      if ((0, _isModKey2.default)(ev) || ev.key !== \" \") return next();\n      var value = editor.value;\n      var startBlock = value.startBlock,\n          selection = value.selection;\n      if (selection.isExpanded) return next();\n      if (!startBlock || startBlock.type.match(/code/)) return next();\n      var startOffset = value.selection.start.offset - 3;\n      var textNode = startBlock.getFirstText();\n      if (!textNode) return next();\n      var chars = textNode.text.slice(startOffset, startOffset + 3); // replaces three periods with a real ellipsis character\n\n      if (chars === \"...\") {\n        return editor.removeTextByKey(textNode.key, startOffset, 3).insertTextByKey(textNode.key, startOffset, \"…\");\n      }\n\n      return next();\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/ayomi/source/repos/Idea-Creator/Idea-Creator/MindOverMapper_Movim/MindOverMapper_Movim/ClientApp/node_modules/awehook-rich-markdown-editor/lib/plugins/Ellipsis.js"],"names":["Object","defineProperty","exports","value","default","Ellipsis","_slate","require","_isModKey","_isModKey2","_interopRequireDefault","obj","__esModule","onKeyDown","ev","editor","next","key","startBlock","selection","isExpanded","type","match","startOffset","start","offset","textNode","getFirstText","chars","text","slice","removeTextByKey","insertTextByKey"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,QAAlB;;AAEA,IAAIC,MAAM,GAAGC,OAAO,CAAC,OAAD,CAApB;;AAEA,IAAIC,SAAS,GAAGD,OAAO,CAAC,iBAAD,CAAvB;;AAEA,IAAIE,UAAU,GAAGC,sBAAsB,CAACF,SAAD,CAAvC;;AAEA,SAASE,sBAAT,CAAgCC,GAAhC,EAAqC;AAAE,SAAOA,GAAG,IAAIA,GAAG,CAACC,UAAX,GAAwBD,GAAxB,GAA8B;AAAEP,IAAAA,OAAO,EAAEO;AAAX,GAArC;AAAwD;;AAE/F,SAASN,QAAT,GAAoB;AAClB,SAAO;AACLQ,IAAAA,SAAS,EAAE,SAASA,SAAT,CAAmBC,EAAnB,EAAuBC,MAAvB,EAA+BC,IAA/B,EAAqC;AAC9C,UAAI,CAAC,GAAGP,UAAU,CAACL,OAAf,EAAwBU,EAAxB,KAA+BA,EAAE,CAACG,GAAH,KAAW,GAA9C,EAAmD,OAAOD,IAAI,EAAX;AAEnD,UAAIb,KAAK,GAAGY,MAAM,CAACZ,KAAnB;AACA,UAAIe,UAAU,GAAGf,KAAK,CAACe,UAAvB;AAAA,UACIC,SAAS,GAAGhB,KAAK,CAACgB,SADtB;AAGA,UAAIA,SAAS,CAACC,UAAd,EAA0B,OAAOJ,IAAI,EAAX;AAC1B,UAAI,CAACE,UAAD,IAAeA,UAAU,CAACG,IAAX,CAAgBC,KAAhB,CAAsB,MAAtB,CAAnB,EAAkD,OAAON,IAAI,EAAX;AAElD,UAAIO,WAAW,GAAGpB,KAAK,CAACgB,SAAN,CAAgBK,KAAhB,CAAsBC,MAAtB,GAA+B,CAAjD;AACA,UAAIC,QAAQ,GAAGR,UAAU,CAACS,YAAX,EAAf;AACA,UAAI,CAACD,QAAL,EAAe,OAAOV,IAAI,EAAX;AAEf,UAAIY,KAAK,GAAGF,QAAQ,CAACG,IAAT,CAAcC,KAAd,CAAoBP,WAApB,EAAiCA,WAAW,GAAG,CAA/C,CAAZ,CAd8C,CAgB9C;;AACA,UAAIK,KAAK,KAAK,KAAd,EAAqB;AACnB,eAAOb,MAAM,CAACgB,eAAP,CAAuBL,QAAQ,CAACT,GAAhC,EAAqCM,WAArC,EAAkD,CAAlD,EAAqDS,eAArD,CAAqEN,QAAQ,CAACT,GAA9E,EAAmFM,WAAnF,EAAgG,GAAhG,CAAP;AACD;;AAED,aAAOP,IAAI,EAAX;AACD;AAvBI,GAAP;AAyBD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = Ellipsis;\n\nvar _slate = require(\"slate\");\n\nvar _isModKey = require(\"../lib/isModKey\");\n\nvar _isModKey2 = _interopRequireDefault(_isModKey);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction Ellipsis() {\n  return {\n    onKeyDown: function onKeyDown(ev, editor, next) {\n      if ((0, _isModKey2.default)(ev) || ev.key !== \" \") return next();\n\n      var value = editor.value;\n      var startBlock = value.startBlock,\n          selection = value.selection;\n\n      if (selection.isExpanded) return next();\n      if (!startBlock || startBlock.type.match(/code/)) return next();\n\n      var startOffset = value.selection.start.offset - 3;\n      var textNode = startBlock.getFirstText();\n      if (!textNode) return next();\n\n      var chars = textNode.text.slice(startOffset, startOffset + 3);\n\n      // replaces three periods with a real ellipsis character\n      if (chars === \"...\") {\n        return editor.removeTextByKey(textNode.key, startOffset, 3).insertTextByKey(textNode.key, startOffset, \"…\");\n      }\n\n      return next();\n    }\n  };\n}"]},"metadata":{},"sourceType":"script"}