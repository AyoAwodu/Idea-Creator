{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slate = require('slate');\n\nvar _utils = require('../utils');\n/**\n * Decreases the depth of the current item. The following items will\n * be moved as sublist of the decreased item.\n *\n * No-op for root items.\n */\n\n\nfunction decreaseItemDepth(opts, change) {\n  var value = change.value;\n  var document = value.document; // Cannot decrease item depth of root items\n\n  var depth = (0, _utils.getItemDepth)(opts, value);\n\n  if (depth == 1) {\n    return change;\n  }\n\n  var currentItem = (0, _utils.getCurrentItem)(opts, value);\n\n  if (!currentItem) {\n    return change;\n  }\n\n  var currentList = document.getParent(currentItem.key);\n  var parentItem = document.getParent(currentList.key);\n  var parentList = document.getParent(parentItem.key); // The items following the item will be moved to a sublist of currentItem\n\n  var followingItems = currentList.nodes.skipUntil(function (i) {\n    return i === currentItem;\n  }).rest(); // True if the currentItem and the followingItems make the whole\n  // currentList, and hence the currentList will be emptied\n\n  var willEmptyCurrentList = currentList.nodes.size === followingItems.size + 1;\n\n  if (!followingItems.isEmpty()) {\n    change.withoutNormalizing(function () {\n      // Add them as sublist of currentItem\n      var sublist = _slate.Block.create({\n        object: 'block',\n        type: currentList.type,\n        data: currentList.data\n      }); // Add the sublist\n\n\n      change.insertNodeByKey(currentItem.key, currentItem.nodes.size, sublist);\n      change.moveNodeByKey(currentItem.key, parentList.key, parentList.nodes.indexOf(parentItem) + 1); // Move the followingItems to the sublist\n\n      followingItems.forEach(function (item, index) {\n        return change.moveNodeByKey(item.key, sublist.key, sublist.nodes.size + index);\n      });\n    });\n  } else {\n    change.moveNodeByKey(currentItem.key, parentList.key, parentList.nodes.indexOf(parentItem) + 1);\n  } // Remove the currentList completely if needed\n\n\n  if (willEmptyCurrentList) {\n    change.removeNodeByKey(currentList.key);\n  }\n\n  return change;\n}\n\nexports.default = decreaseItemDepth;","map":{"version":3,"sources":["C:/Users/ayomi/Source/Repos/Idea-Creator/Idea-Creator/MindOverMapper_Movim/MindOverMapper_Movim/ClientApp/node_modules/@tommoor/slate-edit-list/dist/changes/decreaseItemDepth.js"],"names":["Object","defineProperty","exports","value","_slate","require","_utils","decreaseItemDepth","opts","change","document","depth","getItemDepth","currentItem","getCurrentItem","currentList","getParent","key","parentItem","parentList","followingItems","nodes","skipUntil","i","rest","willEmptyCurrentList","size","isEmpty","withoutNormalizing","sublist","Block","create","object","type","data","insertNodeByKey","moveNodeByKey","indexOf","forEach","item","index","removeNodeByKey","default"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _slate = require('slate');\n\nvar _utils = require('../utils');\n\n/**\n * Decreases the depth of the current item. The following items will\n * be moved as sublist of the decreased item.\n *\n * No-op for root items.\n */\nfunction decreaseItemDepth(opts, change) {\n    var value = change.value;\n    var document = value.document;\n\n    // Cannot decrease item depth of root items\n\n    var depth = (0, _utils.getItemDepth)(opts, value);\n    if (depth == 1) {\n        return change;\n    }\n\n    var currentItem = (0, _utils.getCurrentItem)(opts, value);\n    if (!currentItem) {\n        return change;\n    }\n\n    var currentList = document.getParent(currentItem.key);\n    var parentItem = document.getParent(currentList.key);\n    var parentList = document.getParent(parentItem.key);\n    // The items following the item will be moved to a sublist of currentItem\n    var followingItems = currentList.nodes.skipUntil(function (i) {\n        return i === currentItem;\n    }).rest();\n\n    // True if the currentItem and the followingItems make the whole\n    // currentList, and hence the currentList will be emptied\n    var willEmptyCurrentList = currentList.nodes.size === followingItems.size + 1;\n\n    if (!followingItems.isEmpty()) {\n        change.withoutNormalizing(function () {\n            // Add them as sublist of currentItem\n            var sublist = _slate.Block.create({\n                object: 'block',\n                type: currentList.type,\n                data: currentList.data\n            });\n            // Add the sublist\n            change.insertNodeByKey(currentItem.key, currentItem.nodes.size, sublist);\n\n            change.moveNodeByKey(currentItem.key, parentList.key, parentList.nodes.indexOf(parentItem) + 1);\n\n            // Move the followingItems to the sublist\n            followingItems.forEach(function (item, index) {\n                return change.moveNodeByKey(item.key, sublist.key, sublist.nodes.size + index);\n            });\n        });\n    } else {\n        change.moveNodeByKey(currentItem.key, parentList.key, parentList.nodes.indexOf(parentItem) + 1);\n    }\n\n    // Remove the currentList completely if needed\n    if (willEmptyCurrentList) {\n        change.removeNodeByKey(currentList.key);\n    }\n\n    return change;\n}\n\nexports.default = decreaseItemDepth;"]},"metadata":{},"sourceType":"script"}