{"ast":null,"code":"/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { Classes as CoreClasses, DISPLAYNAME_PREFIX, Keys, Popover, Position, TagInput, Utils } from \"@blueprintjs/core\";\nimport { Classes } from \"../../common\";\nimport { QueryList } from \"../query-list/queryList\";\n\nvar MultiSelect =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(MultiSelect, _super);\n\n  function MultiSelect() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      isOpen: _this.props.popoverProps && _this.props.popoverProps.isOpen || false\n    };\n    _this.TypedQueryList = QueryList.ofType();\n    _this.input = null;\n    _this.queryList = null;\n    _this.refHandlers = {\n      input: function (ref) {\n        _this.input = ref;\n        Utils.safeInvokeMember(_this.props.tagInputProps, \"inputRef\", ref);\n      },\n      queryList: function (ref) {\n        return _this.queryList = ref;\n      }\n    };\n\n    _this.renderQueryList = function (listProps) {\n      var _a = _this.props,\n          fill = _a.fill,\n          _b = _a.tagInputProps,\n          tagInputProps = _b === void 0 ? {} : _b,\n          _c = _a.popoverProps,\n          popoverProps = _c === void 0 ? {} : _c,\n          _d = _a.selectedItems,\n          selectedItems = _d === void 0 ? [] : _d,\n          placeholder = _a.placeholder;\n      var handlePaste = listProps.handlePaste,\n          handleKeyDown = listProps.handleKeyDown,\n          handleKeyUp = listProps.handleKeyUp;\n\n      if (fill) {\n        popoverProps.fill = true;\n        tagInputProps.fill = true;\n      } // add our own inputProps.className so that we can reference it in event handlers\n\n\n      var _e = tagInputProps.inputProps,\n          inputProps = _e === void 0 ? {} : _e;\n      inputProps.className = classNames(inputProps.className, Classes.MULTISELECT_TAG_INPUT_INPUT);\n\n      var handleTagInputAdd = function (values, method) {\n        if (method === \"paste\") {\n          handlePaste(values);\n        }\n      };\n\n      return React.createElement(Popover, tslib_1.__assign({\n        autoFocus: false,\n        canEscapeKeyClose: true,\n        enforceFocus: false,\n        isOpen: _this.state.isOpen,\n        position: Position.BOTTOM_LEFT\n      }, popoverProps, {\n        className: classNames(listProps.className, popoverProps.className),\n        onInteraction: _this.handlePopoverInteraction,\n        popoverClassName: classNames(Classes.MULTISELECT_POPOVER, popoverProps.popoverClassName),\n        onOpened: _this.handlePopoverOpened\n      }), React.createElement(\"div\", {\n        onKeyDown: _this.getTagInputKeyDownHandler(handleKeyDown),\n        onKeyUp: _this.getTagInputKeyUpHandler(handleKeyUp)\n      }, React.createElement(TagInput, tslib_1.__assign({\n        placeholder: placeholder\n      }, tagInputProps, {\n        className: classNames(Classes.MULTISELECT, tagInputProps.className),\n        inputRef: _this.refHandlers.input,\n        inputProps: inputProps,\n        inputValue: listProps.query,\n        onAdd: handleTagInputAdd,\n        onInputChange: listProps.handleQueryChange,\n        values: selectedItems.map(_this.props.tagRenderer)\n      }))), React.createElement(\"div\", {\n        onKeyDown: handleKeyDown,\n        onKeyUp: handleKeyUp\n      }, listProps.itemList));\n    };\n\n    _this.handleItemSelect = function (item, evt) {\n      if (_this.input != null) {\n        _this.input.focus();\n      }\n\n      Utils.safeInvoke(_this.props.onItemSelect, item, evt);\n    };\n\n    _this.handleQueryChange = function (query, evt) {\n      _this.setState({\n        isOpen: query.length > 0 || !_this.props.openOnKeyDown\n      });\n\n      Utils.safeInvoke(_this.props.onQueryChange, query, evt);\n    };\n\n    _this.handlePopoverInteraction = function (nextOpenState) {\n      // deferring to rAF to get properly updated document.activeElement\n      return requestAnimationFrame(function () {\n        if (_this.input != null && _this.input !== document.activeElement) {\n          // the input is no longer focused so we can close the popover\n          _this.setState({\n            isOpen: false\n          });\n        } else if (!_this.props.openOnKeyDown) {\n          // open the popover when focusing the tag input\n          _this.setState({\n            isOpen: true\n          });\n        }\n\n        Utils.safeInvokeMember(_this.props.popoverProps, \"onInteraction\", nextOpenState);\n      });\n    };\n\n    _this.handlePopoverOpened = function (node) {\n      if (_this.queryList != null) {\n        // scroll active item into view after popover transition completes and all dimensions are stable.\n        _this.queryList.scrollActiveItemIntoView();\n      }\n\n      Utils.safeInvokeMember(_this.props.popoverProps, \"onOpened\", node);\n    };\n\n    _this.getTagInputKeyDownHandler = function (handleQueryListKeyDown) {\n      return function (e) {\n        var which = e.which;\n\n        if (which === Keys.ESCAPE || which === Keys.TAB) {\n          // By default the escape key will not trigger a blur on the\n          // input element. It must be done explicitly.\n          if (_this.input != null) {\n            _this.input.blur();\n          }\n\n          _this.setState({\n            isOpen: false\n          });\n        } else if (!(which === Keys.BACKSPACE || which === Keys.ARROW_LEFT || which === Keys.ARROW_RIGHT)) {\n          _this.setState({\n            isOpen: true\n          });\n        }\n\n        var isTargetingTagRemoveButton = e.target.closest(\".\" + CoreClasses.TAG_REMOVE) != null;\n\n        if (_this.state.isOpen && !isTargetingTagRemoveButton) {\n          Utils.safeInvoke(handleQueryListKeyDown, e);\n        }\n      };\n    };\n\n    _this.getTagInputKeyUpHandler = function (handleQueryListKeyUp) {\n      return function (e) {\n        var isTargetingInput = e.target.classList.contains(Classes.MULTISELECT_TAG_INPUT_INPUT); // only handle events when the focus is on the actual <input> inside the TagInput, as that's\n        // what QueryList is designed to do\n\n        if (_this.state.isOpen && isTargetingInput) {\n          Utils.safeInvoke(handleQueryListKeyUp, e);\n        }\n      };\n    };\n\n    return _this;\n  }\n\n  MultiSelect.ofType = function () {\n    return MultiSelect;\n  };\n\n  MultiSelect.prototype.render = function () {\n    // omit props specific to this component, spread the rest.\n    var _a = this.props,\n        openOnKeyDown = _a.openOnKeyDown,\n        popoverProps = _a.popoverProps,\n        tagInputProps = _a.tagInputProps,\n        restProps = tslib_1.__rest(_a, [\"openOnKeyDown\", \"popoverProps\", \"tagInputProps\"]);\n\n    return React.createElement(this.TypedQueryList, tslib_1.__assign({}, restProps, {\n      onItemSelect: this.handleItemSelect,\n      onQueryChange: this.handleQueryChange,\n      ref: this.refHandlers.queryList,\n      renderer: this.renderQueryList\n    }));\n  };\n\n  MultiSelect.displayName = DISPLAYNAME_PREFIX + \".MultiSelect\";\n  MultiSelect.defaultProps = {\n    fill: false,\n    placeholder: \"Search...\"\n  };\n  return MultiSelect;\n}(React.PureComponent);\n\nexport { MultiSelect };","map":{"version":3,"sources":["../../../../src/components/select/multiSelect.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2017 Palantir Technologies, Inc. All rights reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as tslib_1 from \"tslib\";\nimport classNames from \"classnames\";\nimport * as React from \"react\";\nimport { Classes as CoreClasses, DISPLAYNAME_PREFIX, Keys, Popover, Position, TagInput, Utils, } from \"@blueprintjs/core\";\nimport { Classes } from \"../../common\";\nimport { QueryList } from \"../query-list/queryList\";\nvar MultiSelect = /** @class */ (function (_super) {\n    tslib_1.__extends(MultiSelect, _super);\n    function MultiSelect() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.state = {\n            isOpen: (_this.props.popoverProps && _this.props.popoverProps.isOpen) || false,\n        };\n        _this.TypedQueryList = QueryList.ofType();\n        _this.input = null;\n        _this.queryList = null;\n        _this.refHandlers = {\n            input: function (ref) {\n                _this.input = ref;\n                Utils.safeInvokeMember(_this.props.tagInputProps, \"inputRef\", ref);\n            },\n            queryList: function (ref) { return (_this.queryList = ref); },\n        };\n        _this.renderQueryList = function (listProps) {\n            var _a = _this.props, fill = _a.fill, _b = _a.tagInputProps, tagInputProps = _b === void 0 ? {} : _b, _c = _a.popoverProps, popoverProps = _c === void 0 ? {} : _c, _d = _a.selectedItems, selectedItems = _d === void 0 ? [] : _d, placeholder = _a.placeholder;\n            var handlePaste = listProps.handlePaste, handleKeyDown = listProps.handleKeyDown, handleKeyUp = listProps.handleKeyUp;\n            if (fill) {\n                popoverProps.fill = true;\n                tagInputProps.fill = true;\n            }\n            // add our own inputProps.className so that we can reference it in event handlers\n            var _e = tagInputProps.inputProps, inputProps = _e === void 0 ? {} : _e;\n            inputProps.className = classNames(inputProps.className, Classes.MULTISELECT_TAG_INPUT_INPUT);\n            var handleTagInputAdd = function (values, method) {\n                if (method === \"paste\") {\n                    handlePaste(values);\n                }\n            };\n            return (React.createElement(Popover, tslib_1.__assign({ autoFocus: false, canEscapeKeyClose: true, enforceFocus: false, isOpen: _this.state.isOpen, position: Position.BOTTOM_LEFT }, popoverProps, { className: classNames(listProps.className, popoverProps.className), onInteraction: _this.handlePopoverInteraction, popoverClassName: classNames(Classes.MULTISELECT_POPOVER, popoverProps.popoverClassName), onOpened: _this.handlePopoverOpened }),\n                React.createElement(\"div\", { onKeyDown: _this.getTagInputKeyDownHandler(handleKeyDown), onKeyUp: _this.getTagInputKeyUpHandler(handleKeyUp) },\n                    React.createElement(TagInput, tslib_1.__assign({ placeholder: placeholder }, tagInputProps, { className: classNames(Classes.MULTISELECT, tagInputProps.className), inputRef: _this.refHandlers.input, inputProps: inputProps, inputValue: listProps.query, onAdd: handleTagInputAdd, onInputChange: listProps.handleQueryChange, values: selectedItems.map(_this.props.tagRenderer) }))),\n                React.createElement(\"div\", { onKeyDown: handleKeyDown, onKeyUp: handleKeyUp }, listProps.itemList)));\n        };\n        _this.handleItemSelect = function (item, evt) {\n            if (_this.input != null) {\n                _this.input.focus();\n            }\n            Utils.safeInvoke(_this.props.onItemSelect, item, evt);\n        };\n        _this.handleQueryChange = function (query, evt) {\n            _this.setState({ isOpen: query.length > 0 || !_this.props.openOnKeyDown });\n            Utils.safeInvoke(_this.props.onQueryChange, query, evt);\n        };\n        _this.handlePopoverInteraction = function (nextOpenState) {\n            // deferring to rAF to get properly updated document.activeElement\n            return requestAnimationFrame(function () {\n                if (_this.input != null && _this.input !== document.activeElement) {\n                    // the input is no longer focused so we can close the popover\n                    _this.setState({ isOpen: false });\n                }\n                else if (!_this.props.openOnKeyDown) {\n                    // open the popover when focusing the tag input\n                    _this.setState({ isOpen: true });\n                }\n                Utils.safeInvokeMember(_this.props.popoverProps, \"onInteraction\", nextOpenState);\n            });\n        };\n        _this.handlePopoverOpened = function (node) {\n            if (_this.queryList != null) {\n                // scroll active item into view after popover transition completes and all dimensions are stable.\n                _this.queryList.scrollActiveItemIntoView();\n            }\n            Utils.safeInvokeMember(_this.props.popoverProps, \"onOpened\", node);\n        };\n        _this.getTagInputKeyDownHandler = function (handleQueryListKeyDown) {\n            return function (e) {\n                var which = e.which;\n                if (which === Keys.ESCAPE || which === Keys.TAB) {\n                    // By default the escape key will not trigger a blur on the\n                    // input element. It must be done explicitly.\n                    if (_this.input != null) {\n                        _this.input.blur();\n                    }\n                    _this.setState({ isOpen: false });\n                }\n                else if (!(which === Keys.BACKSPACE || which === Keys.ARROW_LEFT || which === Keys.ARROW_RIGHT)) {\n                    _this.setState({ isOpen: true });\n                }\n                var isTargetingTagRemoveButton = e.target.closest(\".\" + CoreClasses.TAG_REMOVE) != null;\n                if (_this.state.isOpen && !isTargetingTagRemoveButton) {\n                    Utils.safeInvoke(handleQueryListKeyDown, e);\n                }\n            };\n        };\n        _this.getTagInputKeyUpHandler = function (handleQueryListKeyUp) {\n            return function (e) {\n                var isTargetingInput = e.target.classList.contains(Classes.MULTISELECT_TAG_INPUT_INPUT);\n                // only handle events when the focus is on the actual <input> inside the TagInput, as that's\n                // what QueryList is designed to do\n                if (_this.state.isOpen && isTargetingInput) {\n                    Utils.safeInvoke(handleQueryListKeyUp, e);\n                }\n            };\n        };\n        return _this;\n    }\n    MultiSelect.ofType = function () {\n        return MultiSelect;\n    };\n    MultiSelect.prototype.render = function () {\n        // omit props specific to this component, spread the rest.\n        var _a = this.props, openOnKeyDown = _a.openOnKeyDown, popoverProps = _a.popoverProps, tagInputProps = _a.tagInputProps, restProps = tslib_1.__rest(_a, [\"openOnKeyDown\", \"popoverProps\", \"tagInputProps\"]);\n        return (React.createElement(this.TypedQueryList, tslib_1.__assign({}, restProps, { onItemSelect: this.handleItemSelect, onQueryChange: this.handleQueryChange, ref: this.refHandlers.queryList, renderer: this.renderQueryList })));\n    };\n    MultiSelect.displayName = DISPLAYNAME_PREFIX + \".MultiSelect\";\n    MultiSelect.defaultProps = {\n        fill: false,\n        placeholder: \"Search...\",\n    };\n    return MultiSelect;\n}(React.PureComponent));\nexport { MultiSelect };\n//# sourceMappingURL=multiSelect.js.map"]},"metadata":{},"sourceType":"module"}